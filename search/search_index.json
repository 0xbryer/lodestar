{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#welcome-to-the-lodestar-documentation","title":"Welcome to the Lodestar documentation!","text":"<p>Lodestar is an open-source Ethereum Consensus client and Typescript ecosystem, maintained by ChainSafe Systems</p>"},{"location":"#getting-started","title":"Getting started","text":"<ul> <li>Follow the installation method for source install, NPM install, or Docker install to install Lodestar. Or use our Lodestar Quickstart scripts.</li> <li>Use Lodestar libraries in your next Ethereum Typescript project.</li> <li>Run a beacon node on mainnet or a public testnet.</li> <li>Utilize the whole stack by starting a local testnet.</li> <li>View the Lodestar CLI commands and options</li> <li>Prospective contributors can read the contributing section to understand how we develop and test on Lodestar.</li> <li>If you have questions submit an issue or join us on Discord!</li> <li>Please note our security policy.</li> <li>Sign up to our mailing list for announcements and any critical information about Lodestar.</li> </ul>"},{"location":"#specifications","title":"Specifications","text":"<p>Hardware specifications minimum / recommended, to run the Lodestar client.</p> Minimum Recommended Processor Intel Core i5\u2013760 or AMD FX-8100 Intel Core i7\u20134770 or AMD FX-8310 Memory 4GB RAM 8GB RAM Storage 20GB available space SSD 100GB available space SSD Internet Broadband connection Broadband connection"},{"location":"#about-these-docs","title":"About these docs","text":"<p>This documentation is open source, contribute at Github Lodestar repository /docs.</p>"},{"location":"#need-assistance","title":"Need assistance?","text":"<p>If you have questions about this documentation, feel free to talk to us on our ChainSafe Discord or open an issue and a member of the team or our community will be happy to assist you.</p>"},{"location":"contributing/","title":"Contribution Guidelines","text":"<p>Thanks for your interest in contributing to Lodestar. It's people like you that push the Ethereum ecosystem forward.</p>"},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>:gear: NodeJS (LTS)</li> <li>:toolbox: Yarn</li> </ul>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ul> <li>:gear: Run <code>yarn</code> to install dependencies.</li> <li>:gear: Run <code>yarn build</code> to build lib from source.</li> <li>:package: A <code>lodestar</code> binary will be bundled in <code>./packages/cli/bin</code>.</li> <li>:computer: Run <code>./lodestar --help</code> to get a list of available commands and arguments.</li> </ul>"},{"location":"contributing/#tests","title":"Tests","text":"<p>To run tests:</p> <ul> <li>:test_tube: Run <code>yarn test:unit</code> for unit tests.</li> <li>:test_tube: Run <code>yarn test:e2e</code> for end-to-end tests.</li> <li>:test_tube: Run <code>yarn test:spec</code> for spec tests.</li> <li>:test_tube: Run <code>yarn test</code> to run all tests.</li> <li>:test_tube: Run <code>yarn check-types</code> to check TypeScript types.</li> <li>:test_tube: Run <code>yarn lint</code> to run the linter (ESLint).</li> </ul> <p>Contributing to tests:</p> <ul> <li>Test must not depend on external live resources, such that running tests for a commit must be deterministic:</li> <li>Do not pull data from external APIs like execution JSON RPC (instead run a local node).</li> <li>Do not pull unpinned versions from DockerHub (use deterministic tag) or Github (checkout commit not branch).</li> <li>Carefully design tests that depend on timing sensitive events like p2p network e2e tests. Consider that Github runners are significantly less powerful than your development environment.</li> </ul>"},{"location":"contributing/#debugging-spec-tests","title":"Debugging Spec Tests","text":"<ul> <li>To fix errors always focus on passing all minimal tests first without running mainnet tests.</li> <li>Spec tests often compare full expected vs actual states in JSON format. To better understand the diff it's convenient to use mocha's option <code>--inline-diffs</code>.</li> <li>A single logical error can cause many spec tests to fail. To focus on a single test at a time you can use mocha's option <code>--bail</code> to stop at the first failed test</li> <li>To then run only that failed test you can run against a specific file as use mocha's option <code>--grep</code> to run only one case</li> </ul> <pre><code>LODESTAR_PRESET=minimal ../../node_modules/.bin/mocha --config .mocharc.spec.yml test/spec/phase0/sanity.test.ts --inline-diffs --bail --grep \"attestation\"\n</code></pre>"},{"location":"contributing/#docker","title":"Docker","text":"<p>The docker-compose file requires that a <code>.env</code> file be present in this directory. The <code>default.env</code> file provides a template and can be copied <code>.env</code>:</p> <pre><code>cp default.env .env\n</code></pre>"},{"location":"contributing/#beacon-node-only","title":"Beacon node only","text":"<pre><code>docker-compose up -d\n</code></pre>"},{"location":"contributing/#beacon-node-and-validator","title":"Beacon node and validator","text":"<p>First, you must have keystores and their secrets available locally at <code>./keystores</code> and your <code>password.txt</code> in <code>./secrets</code></p> <pre><code>docker-compose -f docker-compose.yml -f docker-compose.validator.yml up -d\n</code></pre>"},{"location":"contributing/#dockerized-metrics-local-beacon-node","title":"Dockerized metrics + local beacon node","text":"<p>Run a local beacon with <code>--metrics</code> enabled. Then start Prometheus + Grafana with all dashboards in <code>./dashboards</code> automatically loaded running:</p> <pre><code>./docker/docker-compose.local_dev.sh\n</code></pre>"},{"location":"contributing/#first-time-contributor","title":"First Time Contributor?","text":"<p>Unsure where to begin contributing to Lodestar? Here are some ideas!</p> <ul> <li>:pencil2: See any typos? See any verbiage that should be changed or updated? Go for it! Github makes it easy to make contributions right from the browser.</li> <li>:mag_right: Look through our outstanding unassigned issues. (Hint: look for issues labeled <code>good first issue</code> or <code>help-wanted</code>!)</li> <li>:speech_balloon: Join our Discord chat!   </li> </ul>"},{"location":"contributing/#reporting-a-bug","title":"Reporting A Bug?","text":"<ul> <li>:spiral_notepad: Create a new issue! Select the type of issue that best fits, and please fill out as much of the information as you can.</li> </ul>"},{"location":"contributing/#contribution-process","title":"Contribution Process","text":"<ol> <li>Make sure you're familiar with our contribution guidelines (this document)!</li> <li>Create your own fork of this repository.</li> <li>Make your changes in your local fork.</li> <li>If you've made a code change, make sure to lint and test your changes (<code>yarn lint</code> and <code>yarn test:unit</code>).</li> <li>Make an open pull request when you're ready for it to be reviewed. We review PRs on a regular basis. See Pull request etiquette for more information.</li> <li>You may be asked to sign a Contributor License Agreement (CLA). We make it relatively painless with CLA-bot.</li> </ol>"},{"location":"contributing/#github-style-guide","title":"Github Style Guide","text":"<p>Branch Naming</p> <p>If you are contributing from this repository prefix the branch name with your Github username (i.e. <code>myusername/short-description</code>)</p> <p>Pull Request Naming</p> <p>Pull request titles must be:</p> <ul> <li>Adhering to the conventional commits spec</li> <li>Short and descriptive summary</li> <li>Written in imperative present tense</li> <li>Not end with a period</li> </ul> <p>For example:</p> <ul> <li>feat: add lodestar prover for execution api</li> <li>fix: ignore known block in publish blinded block flow</li> <li>refactor(reqresp)!: support byte based handlers</li> </ul> <p>Pull Request Etiquette</p> <ul> <li>Pull requests should remain as drafts when they are not ready for review by maintainers. Open pull requests signal to the maintainers that it's ready for review.</li> <li>If your pull request is no longer applicable or validated to fix an issue, close your pull request.</li> <li>If your pull request is fixable and needs additional changes or commits within a short period of time, switch your pull request into a draft until it's ready.</li> <li>Otherwise, close your pull request and create a new issue instead.</li> </ul>"},{"location":"contributing/#lodestar-monorepo","title":"Lodestar Monorepo","text":"<p>We're currently experimenting with hosting the majority of lodestar packages and support packages in this repository as a monorepo. We're using Lerna to manage the packages. See packages/ for a list of packages hosted in this repository.</p>"},{"location":"contributing/#style-guide","title":"Style Guide","text":"<ul> <li>Lodestar has migrated to using ES modules.</li> <li>Many module class constructors have the following signature: <code>(options, dependencies)</code></li> <li>e.g.: <code>public constructor(opts: IExampleOptions, {db, logger}: IExampleModules)</code></li> <li>Modules should be designed to \"do one thing and do it well!\"</li> <li>Consider the interface of a module -- events included, and make sure it is coherent</li> <li>Make sure your code is properly linted</li> <li>use an IDE that will show linter errors/warnings</li> <li>run <code>yarn lint</code> from the command line</li> <li>common rules:<ul> <li>Functions and variables should be <code>camelCase</code>, classes should be <code>PascalCase</code>, constants should be <code>UPPERCASE_WITH_UNDERSCORES</code>.</li> <li>Use <code>\"</code> instead of <code>'</code></li> <li>All functions should have types declared for all parameters and return value</li> <li>You shouldn't be using TypeScript type <code>any</code></li> <li>Private class properties should not be prefixed with a <code>_</code></li> <li>e.g.: <code>private dirty;</code>, not <code>private _dirty;</code></li> </ul> </li> <li>Make sure that your code is properly type checked:</li> <li>use an IDE that will show type errors</li> <li>run <code>yarn check-types</code> from the command line</li> <li>Make sure that the tests are still passing:</li> <li>run <code>yarn test:unit</code> from the command line</li> <li>Commenting: If your code does something that is not obvious or deviates from standards, leave a comment for other developers to explain your logic and reasoning.</li> <li>Use <code>//</code> commenting format unless it's a comment you want people to see in their IDE.</li> <li>Use <code>/** */</code> commenting format for documenting a function/variable.</li> <li>Code white space can be helpful for reading complex code, please add some.</li> <li>For unit tests, we forbid import stubbing when other approaches are feasible.</li> <li>Metrics are a critical part of Lodestar, every large feature should be documented with metrics</li> <li>Metrics need to follow the Prometheus Best Practices</li> <li>For metric names, make sure to add the unit as suffix, e.g. <code>_seconds</code> or <code>_bytes</code></li> <li>Metric code variables on the other hand should not be suffixed, i.e. <code>Sec</code>-suffix should be omitted</li> <li>Time-based metrics must use seconds as the unit</li> </ul>"},{"location":"contributing/#tests-style-guide","title":"Tests style guide","text":"<p>Test must not depend on external live resources, such that running tests for a commit must be deterministic:</p> <ul> <li>Do not pull data from external APIs like execution JSON RPC (instead run a local node).</li> <li>Do not pull unpinned versions from dockerhub (use deterministic tag) or Github (checkout commit not branch).</li> <li>Carefully design tests that depend on timing sensitive events like p2p network e2e tests. Consider that Github runners are significantly less powerful than your development environment.</li> </ul> <p>Add assertion messages where possible to ease fixing tests if they fail. If an assertion message is called from multiple times with the same stack trace, you MUST include an assertion message. For example, if an assertion is inside a for loop add some metadata to be able to locate the error source:</p> <pre><code>for (const blockResult of blocksResult) {\n  expect(blockResult.status).equals(\"processed\", `wrong block ${blockResult.id} result status`);\n}\n</code></pre>"},{"location":"contributing/#logging-policy","title":"Logging policy","text":""},{"location":"contributing/#logging-levels","title":"Logging Levels","text":"<p>Contributors must choose the log level carefully to ensure a consistent experience for every type of user:</p> <ul> <li><code>error</code>: Critical issues that prevent the application from functioning correctly or cause significant disruption to users. Examples include failed network connections, crashes, or data corruption.</li> <li><code>warn</code>: Situations that may lead to critical issues if not addressed but do not prevent the application from functioning. Examples include configuration issues, deprecated features, or temporary network disruptions.</li> <li><code>info</code>: General sporadic informational about the node's state. Examples include initialization messages, infrequent periodic status updates, or high-level progress reports.</li> <li><code>debug</code>: Detailed diagnostic information that can help developers or users troubleshoot specific issues. Examples include individual request logs for every REST API, networking interactions, or internal components status changes. Alias to <code>verbose</code>.</li> </ul>"},{"location":"contributing/#logging-guidelines","title":"Logging guidelines","text":"<ul> <li>Avoid excessive logging. Log messages should be clear and concise, providing enough information to understand the context and severity of the issue.</li> <li>Do not log sensitive data, such as private keys, user credentials, or personal information.</li> <li>Do not log arbitrary data from the network as ASCII or UTF8 at levels higher or equal to <code>info</code>.</li> <li>Use clear and concise language. Prefer to log variables in JSON format <code>log.debug(\"Action\", {slot})</code> instead of formatting the text yourself <code>log.debug('slot=${slot}')</code>.</li> <li>Include only relevant context in log messages, sufficient to debug the issue or action it refers to.</li> </ul>"},{"location":"contributing/#contributing-to-grafana-dashboards","title":"Contributing to Grafana dashboards","text":"<p>To edit or extend an existing Grafana dashboard with minimal diff:</p> <ol> <li>Grab the <code>.json</code> dashboard file from current unstable</li> <li>Import the file to Grafana via the web UI at <code>/dashboard/import</code> without modifying the UID of the dashboard</li> <li>Visually edit the dashboard</li> <li>Once done make sure to leave the exact same visual aspect as before: same refresh interval, time range, etc.</li> <li>Save the dashboard (CTRL+S)</li> <li>Run download script, see below on how to use it</li> <li>Check git diff of updated dashboards, commit, push and open your PR</li> </ol>"},{"location":"contributing/#using-download-script","title":"Using Download Script","text":"<p>Create a file <code>.secrets.env</code> with envs</p> <pre><code>GRAFANA_API_KEY=$token\nGRAFANA_URL=https://yourgrafanaapi.io\n</code></pre> <p>Run script to download dashboards to <code>./dashboards</code> folder</p> <pre><code>node scripts/download_dashboards.mjs\n</code></pre>"},{"location":"contributing/#label-guide","title":"Label Guide","text":"<p>Issues and pull requests are subject to the following labeling guidelines.</p> <ul> <li>PRs may have a status label to indicate deviation from the normal process such as <code>status-blocked</code> or <code>status-do-not-merge</code></li> <li>Issues and PRs will be tagged with a <code>scope</code> and <code>prio</code> to indicate type and priority for triage.</li> <li>All other labels allow for further evaluation and organization.</li> </ul> <p>Label descriptions can be found below.</p>"},{"location":"contributing/#status-issues-and-pull-request-status","title":"<code>status.*</code> Issues and Pull Request Status","text":"<p>Status labels apply to issues and pull requests which deviate from normal processes.</p>"},{"location":"contributing/#scope-scope-indicator","title":"<code>scope.*</code> Scope Indicator","text":"<p>Scope is comparable to Module labels but less strict with the definition of components. It applies to both, issues and pull requests.</p>"},{"location":"contributing/#prio-prioritization-indicator","title":"<code>prio.*</code> Prioritization Indicator","text":"<p>A simple indicator of issue prioritization. It mainly applies to issues.</p>"},{"location":"contributing/#spec-ethereum-consensus-spec-version-target","title":"<code>spec.*</code> Ethereum Consensus Spec Version Target","text":"<p>Issues that target a specific version of the Ethereum consensus spec, shall be tagged accordingly.</p>"},{"location":"contributing/#community","title":"Community","text":"<p>Come chat with us on Discord and join our public weekly planning meetings!</p>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#lodestar-quickstart","title":"Lodestar Quickstart","text":"<p>In order to make things easy for users to onboard and try the Ethereum Proof of Stake we have come up with Lodestar quick start scripts!</p> <p>\u2705 Zero Configuration \u2705 All testnets supported along with <code>mainnet</code> \u2705 All mainstream Execution Clients integrated</p> <p>With just single command you can run lodestar with various execution engines, switch them up to see the Optimistic sync work its magic and eventually brings lodestar and the execution engine in sync</p>"},{"location":"quickstart/#customizations","title":"Customizations","text":"<p>You can adapt them to your production setups with ease! Here is a simple guide for you to follow along:</p> <p>\ud83d\udc49 Lodestar Quick Setup Guide</p>"},{"location":"quickstart/#support","title":"Support","text":"<p>We actively maintain and update the configurations of running lodestar with the top of the line execution engines for various PoS networks so you have the minimum possible figuring out to do.</p> <p>In case you are facing any issues with the quick start guide, do reach us out on lodestar discord! Happy to help! \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f</p>"},{"location":"design/depgraph/","title":"Lodestar package structure","text":""},{"location":"design/depgraph/#lodestar-monorepo-dependency-graph","title":"Lodestar monorepo dependency graph","text":"<p>This is a diagram of the various <code>lodestar-*</code> packages in the Lodestar monorepo and how they fit together:</p> <p>Info</p> <p>note: this dependency graph only applies to dependencies as they are used in the <code>src/</code> folders of each package, not in <code>test/</code></p> graph TD     lodestar[\"lodestar\"]:::nodemodule     cli[\"lodestar-cli\"]:::nodemodule     config[\"lodestar-config\"]:::nodemodule     db[\"lodestar-db\"]:::nodemodule     fork-choice[\"lodestar-fork-choice\"]:::nodemodule     params[\"lodestar-params\"]:::nodemodule     types[\"lodestar-types\"]:::nodemodule     utils[\"lodestar-utils\"]:::nodemodule     validator[\"lodestar-validator\"]:::nodemodule     state-trans[\"lodestar-state-transition\"]:::nodemodule      params--&gt;config     params--&gt;types      types--&gt;lodestar     types--&gt;cli     types--&gt;config     types--&gt;validator     types--&gt;fork-choice      config--&gt;lodestar     config--&gt;cli     config--&gt;validator     config--&gt;fork-choice     config--&gt;state-trans     config--&gt;db      utils--&gt;lodestar     utils--&gt;db     utils--&gt;cli     utils--&gt;validator     utils--&gt;fork-choice     utils--&gt;state-trans      state-trans--&gt;lodestar     state-trans--&gt;validator     state-trans--&gt;fork-choice      db--&gt;lodestar     db--&gt;validator      fork-choice--&gt;lodestar      lodestar--&gt;cli     validator--&gt;cli      click cli \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/cli\"     click lodestar \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/beacon-node\"     click validator \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/validator\"     click db \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/db\"     click params \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/params\"     click state-trans \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/state-transition\"     click fork-choice \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/fork-choice\"     click types \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/types\"     click utils \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/utils\"     click config \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/config\"      classDef nodemodule fill:grey,stroke-width:2px,stroke:black,color:white;     linkStyle default stroke:grey, fill:none,stroke-width:1.5px;  <p>For a list of all the packages in the monorepo and a description for each, click here.</p> <p>Let's talk about how each package fits together in finer detail, from top to bottom, following the chart.</p>"},{"location":"design/depgraph/#lodestarparams","title":"<code>@lodestar/params</code>","text":"<p>@lodestar/params contains the parameters for configuring an Ethereum Consensus network. For example, the mainnet params</p>"},{"location":"design/depgraph/#lodestartypes","title":"<code>@lodestar/types</code>","text":"<p>@lodestar/types contains Ethereum Consensus ssz types and data structures.</p>"},{"location":"design/depgraph/#lodestarconfig","title":"<code>@lodestar/config</code>","text":"<p>@lodestar/config combines <code>@lodestar/params</code> and <code>@lodestar/types</code> together to be used as a single config object across the other Lodestar packages.</p>"},{"location":"design/depgraph/#lodestarutils","title":"<code>@lodestar/utils</code>","text":"<p>@lodestar/utils contains various utilities that are common among the various Lodestar monorepo packages.</p>"},{"location":"design/depgraph/#lodestarstate-transition","title":"<code>@lodestar/state-transition</code>","text":"<p>@lodestar/state-transition contains the Lodestar implementation of the beacon state transition function, which is used by <code>@lodestar/beacon-node</code> to perform the actual beacon state transition. This package also contains various functions used to calculate info about the beacon chain (such as <code>computeEpochAtSlot</code>) which are used by <code>@lodestar/fork-choice</code> and <code>@lodestar/validator</code></p>"},{"location":"design/depgraph/#lodestardb","title":"<code>@lodestar/db</code>","text":"<p>@lodestar/db is where all persistent data about the beacon node is stored. Any package that needs to read or write persistent beacon node data depends on <code>lodestar-db</code>.</p>"},{"location":"design/depgraph/#lodestarfork-choice","title":"<code>@lodestar/fork-choice</code>","text":"<p>@lodestar/fork-choice holds the methods for reading/writing the fork choice DAG. The <code>@lodestar/beacon-node</code> package is the sole consumer of this package because the beacon node itself is what controls when the fork choice DAG is updated. For a good explanation on how the fork choice itself works, see the annotated fork choice spec. This is an annotated version of the Ethereum Consensus fork choice spec which <code>lodestar-fork-choice</code> is based on.</p>"},{"location":"design/depgraph/#lodestarvalidator","title":"<code>@lodestar/validator</code>","text":"<p>@lodestar/validator contains the validator client. The sole consumer of this package is <code>@chainsafe/lodestar</code>, which provides CLI access to run and configure the validator client. However, the validator client communicates to a REST API that is contained in <code>@lodestar/beacon-node</code> (specifically in the <code>api</code> module) to perform the validator duties.</p>"},{"location":"design/depgraph/#lodestarbeacon-node","title":"<code>@lodestar/beacon-node</code>","text":"<p>@lodestar/beacon-node contains the actual beacon node process itself, which is the aggregate of all the above packages and the \"brain\" of the Lodestar beacon chain implementation. All of the node modules live in this package as well.</p>"},{"location":"design/depgraph/#chainsafelodestar","title":"<code>@chainsafe/lodestar</code>","text":"<p>@chainsafe/lodestar combines everything together for CLI usage and configuration of the beacon node and validator.</p>"},{"location":"install/docker/","title":"Install with Docker","text":"<p>The <code>chainsafe/lodestar</code> Docker Hub repository is maintained actively. It contains the <code>lodestar</code> CLI preinstalled.</p> <p>Info</p> <p>The Docker Hub image tagged as <code>chainsafe/lodestar:next</code> is run on CI every commit on our <code>unstable</code> branch. For <code>stable</code> releases, the image is tagged as <code>chainsafe/lodestar:latest</code>.</p> <p>Ensure you have Docker installed by issuing the command:</p> <pre><code>docker -v\n</code></pre> <p>It should return a non error message such as <code>Docker version xxxx, build xxxx</code>.</p> <p>Pull, run the image and Lodestar should now be ready to use</p> <pre><code>docker pull chainsafe/lodestar\ndocker run chainsafe/lodestar --help\n</code></pre> <p>Info</p> <p>Docker is the recommended setup for Lodestar. Use our Lodestar Quickstart scripts with Docker for detailed instructions.</p>"},{"location":"install/npm/","title":"Install from NPM [not recommended]","text":"<p>Danger</p> <p>For mainnet (production) usage, we only recommend installing with docker due to NPM supply chain attacks. Until a safer installation method has been found, do not use this install method except for experimental purposes only.</p>"},{"location":"install/source/","title":"Install from source","text":""},{"location":"install/source/#prerequisites","title":"Prerequisites","text":"<p>Make sure to have Yarn installed. It is also recommended to install NVM (Node Version Manager) and use the LTS version (currently v20) of NodeJS.</p> <p>Info</p> <p>NodeJS versions older than the current LTS are not supported by Lodestar. We recommend running the latest Node LTS. It is important to make sure the NodeJS version is not changed after reboot by setting a default <code>nvm alias default &lt;version&gt; &amp;&amp; nvm use default</code>.</p> <p>Note</p> <p>Node Version Manager (NVM) will only install NodeJS for use with the active user. If you intend on setting up Lodestar to run under another user, we recommend using NodeSource's source for NodeJS so you can install NodeJS globally.</p>"},{"location":"install/source/#clone-repository","title":"Clone repository","text":"<p>Clone the repository locally and build from the stable release branch.</p> <pre><code>git clone -b stable https://github.com/chainsafe/lodestar.git\n</code></pre> <p>Switch to created directory.</p> <pre><code>cd lodestar\n</code></pre>"},{"location":"install/source/#install-packages","title":"Install packages","text":"<p>Install across all packages. Lodestar follows a monorepo structure, so all commands below must be run in the project root.</p> <pre><code>yarn install\n</code></pre>"},{"location":"install/source/#build-source-code","title":"Build source code","text":"<p>Build across all packages.</p> <pre><code>yarn run build\n</code></pre>"},{"location":"install/source/#lodestar-cli","title":"Lodestar CLI","text":"<p>Lodestar should now be ready for use.</p> <pre><code>./lodestar --help\n</code></pre> <p>See Command Line Reference for further information.</p>"},{"location":"libraries/","title":"Lodestar libraries","text":"<p>The Lodestar project is divided into Typescript packages that can be used independently of the CLI. These packages span the breadth of the Ethereum Consensus layer, and are perfect for Typescript developers looking to build around Ethereum.</p>"},{"location":"libraries/#monorepo-libraries","title":"Monorepo libraries","text":"<p>Several useful Ethereum consensus libraries are developed as part of the Lodestar monorepo and may be useful when used individually.</p> <ul> <li><code>params</code> - Ethereum consensus constants and fork names</li> <li><code>types</code> - Ethereum consensus types, Typescript interfaces and SSZ type objects</li> <li><code>config</code> - Ethereum consensus run-time network configuration</li> <li><code>api</code> - Ethereum consensus REST API client</li> <li><code>flare</code> - Beacon chain multi-purpose and debugging tool</li> </ul>"},{"location":"libraries/#other-libraries","title":"Other libraries","text":""},{"location":"libraries/#bls-utilities","title":"BLS Utilities","text":"<ul> <li><code>bls</code> - Ethereum Consensus BLS sign / verify / aggregate</li> <li><code>bls-keystore</code> - store / retrieve a BLS secret key from an EIP-2335 JSON keystore</li> <li><code>bls-keygen</code> - utility functions to generate BLS secret keys, following EIP-2333 and EIP-2334</li> <li><code>bls-hd-key</code> - low level EIP-2333 and EIP-2334 functionality</li> </ul>"},{"location":"libraries/#hashing","title":"Hashing","text":"<ul> <li><code>ssz</code> - Simple Serialize (SSZ)</li> <li><code>persistent-merkle-tree</code> - binary merkle tree implemented as a persistent data structure</li> <li><code>as-sha256</code> - Small AssemblyScript implementation of SHA256</li> </ul>"},{"location":"libraries/#networking","title":"Networking","text":"<ul> <li><code>discv5</code> - Discv5 protocol</li> <li><code>js-libp2p-gossipsub</code> - Gossipsub protocol for <code>js-libp2p</code></li> <li><code>js-libp2p-noise</code> - Noise handshake for <code>js-libp2p</code></li> </ul>"},{"location":"reference/cli/","title":"Command Line Reference","text":"<p>This reference describes the syntax of the Lodestar CLI commands and their options.</p>"},{"location":"reference/cli/#global-options","title":"Global Options","text":"Option Type Description Default <code>--dataDir</code> string Lodestar root data directory <code>--network</code> string Name of the Ethereum Consensus chain network to join mainnet <code>--paramsFile</code> string Network configuration file <code>--terminal-total-difficulty-override</code> string Terminal PoW block TTD override <code>--terminal-block-hash-override</code> string Terminal PoW block hash override <code>--terminal-block-hash-epoch-override</code> string Terminal PoW block hash override activation epoch"},{"location":"reference/cli/#beacon","title":"<code>beacon</code>","text":"<p>Run a beacon chain node</p> <p>Examples</p> <p>Run a beacon chain node and connect to the goerli testnet</p> <pre><code>beacon --network goerli\n</code></pre> <p>Options</p> Option Type Description Default <code>--checkpointSyncUrl</code> string Server url hosting Beacon Node APIs to fetch weak subjectivity state. Fetch latest finalized by default, else set --wssCheckpoint <code>--checkpointState</code> string Set a checkpoint state to start syncing from <code>--wssCheckpoint</code> string Start beacon node off a state at the provided weak subjectivity checkpoint, to be supplied in : format. For example, 0x1234:100 will sync and start off from the weak subjectivity state at checkpoint of epoch 100 with block root 0x1234. <code>--forceCheckpointSync</code> boolean Force syncing from checkpoint state even if db state is within weak subjectivity period. This helps to avoid long sync times after node has been offline for a while. <code>--private</code> boolean Do not send implementation details over p2p identify protocol and in builder, execution engine and eth1 requests <code>--validatorMonitorLogs</code> boolean Log validator monitor events as info. This requires metrics to be enabled. <code>--logLevel</code> string Logging verbosity level for emitting logs to terminal info <code>--logFile</code> string Path to output all logs to a persistent log file, use 'none' to disable <code>--logFileLevel</code> string Logging verbosity level for emitting logs to file debug <code>--logFileDailyRotate</code> number Daily rotate log files, set to an integer to limit the file count, set to 0 (zero) to disable rotation 5 <code>--rest</code> boolean Enable/disable HTTP API true <code>--rest.namespace</code> array Pick namespaces to expose for HTTP API. Set to '*' to enable all namespaces [\"beacon\",\"config\",\"events\",\"node\",\"validator\",\"lightclient\"] <code>--rest.cors</code> string Configures the Access-Control-Allow-Origin CORS header for HTTP API * <code>--rest.address</code> string Set host for HTTP API 127.0.0.1 <code>--rest.port</code> number Set port for HTTP API 9596 <code>--rest.swaggerUI</code> boolean Enable Swagger UI for API exploration at http://{address}:{port}/documentation <code>--suggestedFeeRecipient</code> string Specify fee recipient default for collecting the EL block fees and rewards (a hex string representing 20 bytes address: ^0x[a-fA-F0-9]{40}$) in case validator fails to update for a validator index before calling <code>produceBlock</code>. 0x0000000000000000000000000000000000000000 <code>--emitPayloadAttributes</code> boolean Flag to SSE emit execution <code>payloadAttributes</code> before every slot false <code>--eth1</code> boolean Whether to follow the eth1 chain true <code>--eth1.providerUrls</code> array Urls to Eth1 node with enabled rpc. If not explicitly provided and execution endpoint provided via execution.urls, it will use execution.urls. Otherwise will try connecting on the specified default(s) http://localhost:8545 <code>--execution.urls</code> array Urls to execution client engine API http://localhost:8551 <code>--execution.timeout</code> number Timeout in milliseconds for execution engine API HTTP client 12000 <code>--execution.retryAttempts</code> number Number of retry attempts when calling execution engine API 3 <code>--execution.retryDelay</code> number Delay time in milliseconds between retries when retrying calls to the execution engine API 2000 <code>--jwtSecret</code> string File path to a shared hex-encoded jwt secret which will be used to generate and bundle HS256 encoded jwt tokens for authentication with the EL client's rpc server hosting engine apis. Secret to be exactly same as the one used by the corresponding EL client. <code>--jwtId</code> string An optional identifier to be set in the id field of the claims included in jwt tokens used for authentication with EL client's rpc server hosting engine apis <code>--builder</code> boolean Enable builder interface <code>--builder.urls</code> array Urls hosting the builder API http://localhost:8661 <code>--builder.timeout</code> number Timeout in milliseconds for builder API HTTP client 12000 <code>--builder.faultInspectionWindow</code> number Window to inspect missed slots for enabling/disabling builder circuit breaker <code>--builder.allowedFaults</code> number Number of missed slots allowed in the <code>faultInspectionWindow</code> for builder circuit <code>--metrics</code> boolean Enable the Prometheus metrics HTTP server <code>--metrics.port</code> number Listen TCP port for the Prometheus metrics HTTP server 8008 <code>--metrics.address</code> string Listen address for the Prometheus metrics HTTP server 127.0.0.1 <code>--monitoring.endpoint</code> string Enables monitoring service for sending clients stats to the specified endpoint of a remote service (e.g. beaconcha.in) <code>--monitoring.interval</code> number Interval in milliseconds between sending client stats to the remote service 60000 <code>--discv5</code> boolean Enable discv5 true <code>--listenAddress</code> string The IPv4 address to listen for p2p UDP and TCP connections 0.0.0.0 <code>--port</code> number The TCP/UDP port to listen on. The UDP port can be modified by the --discoveryPort flag. 9000 <code>--discoveryPort</code> number The UDP port that discovery will listen on. Defaults to <code>port</code> <code>port</code> <code>--listenAddress6</code> string The IPv6 address to listen for p2p UDP and TCP connections <code>--port6</code> number The TCP/UDP port to listen on. The UDP port can be modified by the --discoveryPort6 flag. 9090 <code>--discoveryPort6</code> number The UDP port that discovery will listen on. Defaults to <code>port6</code> <code>port6</code> <code>--bootnodes</code> array Bootnodes for discv5 discovery [] <code>--targetPeers</code> number The target connected peers. Above this number peers will be disconnected 50 <code>--deterministicLongLivedAttnets</code> boolean Use deterministic subnet selection for long-lived subnet subscriptions true <code>--subscribeAllSubnets</code> boolean Subscribe to all subnets regardless of validator count false <code>--disablePeerScoring</code> boolean Disable peer scoring, used for testing on devnets false <code>--mdns</code> boolean Enable mdns local peer discovery false <code>--terminal-total-difficulty-override</code> string Terminal PoW block TTD override <code>--terminal-block-hash-override</code> string Terminal PoW block hash override <code>--terminal-block-hash-epoch-override</code> string Terminal PoW block hash override activation epoch <code>--enr.ip</code> string Override ENR IP entry <code>--enr.tcp</code> number Override ENR TCP entry <code>--enr.udp</code> number Override ENR UDP entry <code>--enr.ip6</code> string Override ENR IPv6 entry <code>--enr.tcp6</code> number Override ENR (IPv6-specific) TCP entry <code>--enr.udp6</code> number Override ENR (IPv6-specific) UDP entry <code>--nat</code> boolean Allow configuration of non-local addresses"},{"location":"reference/cli/#validator","title":"<code>validator</code>","text":"<p>Run one or multiple validator clients</p> <p>Examples</p> <p>Run one validator client with all the keystores available in the directory .goerli/keystores</p> <pre><code>validator --network goerli\n</code></pre> <p>Options</p> <p>The options below apply to all sub-commands.</p> Option Type Description Default <code>--logLevel</code> string Logging verbosity level for emitting logs to terminal info <code>--logFile</code> string Path to output all logs to a persistent log file, use 'none' to disable <code>--logFileLevel</code> string Logging verbosity level for emitting logs to file debug <code>--logFileDailyRotate</code> number Daily rotate log files, set to an integer to limit the file count, set to 0 (zero) to disable rotation 5 <code>--keymanager</code> boolean Enable key manager API server <code>--keymanager.authEnabled</code> boolean Enable token bearer authentication for key manager API server true <code>--keymanager.port</code> number Set port for key manager API 5062 <code>--keymanager.address</code> string Set host for key manager API 127.0.0.1 <code>--keymanager.cors</code> string Configures the Access-Control-Allow-Origin CORS header for key manager API * <code>--beaconNodes</code> array Addresses to connect to BeaconNode http://127.0.0.1:9596 <code>--force</code> boolean Open validators even if there's a lockfile. Use with caution <code>--graffiti</code> string Specify your custom graffiti to be included in blocks (plain UTF8 text, 32 characters max) <code>--proposerSettingsFile</code> string A yaml file to specify detailed default and per validator public key customized proposer configs. PS: This feature and its format is in alpha and subject to change <code>--suggestedFeeRecipient</code> string Specify fee recipient default for collecting the EL block fees and rewards (a hex string representing 20 bytes address: ^0x[a-fA-F0-9]{40}$). It would be possible (WIP) to override this per validator key using config or key manager API. Only used post merge. 0x0000000000000000000000000000000000000000 <code>--strictFeeRecipientCheck</code> boolean Enable strict checking of the validator's <code>feeRecipient</code> with the one returned by engine <code>--defaultGasLimit</code> number Suggested gas limit to the engine/builder for building execution payloads. Only used post merge. 30000000 <code>--builder</code> boolean An alias for <code>--builder.selection maxprofit</code> for the builder flow, ignored if <code>--builder.selection</code> is explicitly provided <code>--builder.selection</code> string Builder block selection strategy <code>maxprofit</code>, <code>builderalways</code>, <code>builderonly</code> or <code>executiononly</code> <code>executiononly</code> <code>--useProduceBlockV3</code> boolean Enable/disable usage of produceBlockV3 that might not be supported by all beacon clients yet false <code>--importKeystores</code> array Path(s) to a directory or single file path to validator keystores, i.e. Launchpad validators ./keystores/*.json <code>--importKeystoresPassword</code> string Path to a file with password to decrypt all keystores from <code>importKeystores</code> option <code>./password.txt</code> <code>--doppelgangerProtection</code> boolean Enables Doppelganger protection <code>--externalSigner.url</code> string URL to connect to an external signing server <code>--externalSigner.pubkeys</code> array List of validator public keys used by an external signer. May also provide a single string a comma separated public keys <code>--externalSigner.fetch</code> boolean Fetch then list of public keys to validate from an external signer <code>--distributed</code> boolean Enables specific features required to run as part of a distributed validator cluster <code>--metrics</code> boolean Enable the Prometheus metrics HTTP server false <code>--metrics.port</code> number Listen TCP port for the Prometheus metrics HTTP server 5064 <code>--metrics.address</code> string Listen address for the Prometheus metrics HTTP server 127.0.0.1 <code>--monitoring.endpoint</code> string Enables monitoring service for sending clients stats to the specified endpoint of a remote service (e.g. beaconcha.in) <code>--monitoring.interval</code> number Interval in milliseconds between sending client stats to the remote service 60000"},{"location":"reference/cli/#validator-slashing-protection","title":"<code>validator slashing-protection</code>","text":"<p>Import or export slashing protection data to or from another client.</p> <p>Options</p> <p>The options below apply to all sub-commands.</p> Option Type Description Default <code>--beaconNodes</code> array Addresses to connect to BeaconNode http://127.0.0.1:9596 <code>--force</code> boolean If <code>genesisValidatorsRoot</code> can't be fetched from the Beacon node, use a zero hash"},{"location":"reference/cli/#validator-slashing-protection-import","title":"<code>validator slashing-protection  import</code>","text":"<p>Import an interchange file.</p> <p>Examples</p> <p>Import an interchange file to the slashing protection DB</p> <pre><code>validator slashing-protection import --network goerli --file interchange.json\n</code></pre> <p>Options</p> Option Type Description Default <code>--file</code> string The slashing protection interchange file to import (.json)."},{"location":"reference/cli/#validator-slashing-protection-export","title":"<code>validator slashing-protection  export</code>","text":"<p>Export an interchange file.</p> <p>Examples</p> <p>Export an interchange JSON file for all validators in the slashing protection DB</p> <pre><code>validator slashing-protection export --network goerli --file interchange.json\n</code></pre> <p>Options</p> Option Type Description Default <code>--file</code> string The slashing protection interchange file to export to (.json). <code>--pubkeys</code> array Export slashing protection data only for a given subset of public keys"},{"location":"reference/cli/#validator-import","title":"<code>validator import</code>","text":"<p>Imports one or more EIP-2335 keystores into a Lodestar validator client directory, requesting passwords interactively. The directory flag provides a convenient method for importing a directory of keys generated by the eth2-deposit-cli Ethereum Foundation utility.</p> <p>Examples</p> <p>Import validator keystores generated with the Ethereum Foundation Staking Launchpad</p> <pre><code>validator import --network goerli --importKeystores $HOME/staking-deposit-cli/validator_keys\n</code></pre> <p>Options</p> Option Type Description Default <code>--importKeystores</code> array Path(s) to a directory or single file path to validator keystores, i.e. Launchpad validators ./keystores/*.json <code>--importKeystoresPassword</code> string Path to a file with password to decrypt all keystores from <code>importKeystores</code> option <code>./password.txt</code>"},{"location":"reference/cli/#validator-list","title":"<code>validator list</code>","text":"<p>Lists the public keys of all validators</p> <p>Examples</p> <p>List all validator public keys previously imported</p> <pre><code>validator list\n</code></pre>"},{"location":"reference/cli/#validator-voluntary-exit","title":"<code>validator voluntary-exit</code>","text":"<p>Performs a voluntary exit for a given set of validators as identified via <code>pubkeys</code>. If no <code>pubkeys</code> are provided, it will exit all validators that have been imported.</p> <p>Examples</p> <p>Perform a voluntary exit for the validator who has a public key 0xF00</p> <pre><code>validator voluntary-exit --network goerli --pubkeys 0xF00\n</code></pre> <p>Options</p> Option Type Description Default <code>--exitEpoch</code> number The epoch upon which to submit the voluntary exit.  If no value is provided, then we default to the current epoch. <code>--pubkeys</code> array Public keys to exit, must be available as local signers <code>--yes</code> boolean Skip confirmation prompt"},{"location":"reference/cli/#validator-bls-to-execution-change","title":"<code>validator bls-to-execution-change</code>","text":"<p>Performs BLS To Execution Change for a given validator (as identified via <code>publicKey</code>.  If no <code>publicKey</code> is provided, a prompt will ask the user which validator they would like to choose for BLS To Execution Change.</p> <p>Examples</p> <p>Perform BLS To Execution Change for the validator who has a public key 0xF00</p> <pre><code>validator bls-to-execution-change --publicKey 0xF00 --fromBlsPrivkey ... --toExecutionAddress ...\n</code></pre> <p>Options</p> Option Type Description Default <code>--publicKey</code> string Validator public key for which to set withdrawal address hence enabling withdrawals <code>--fromBlsPrivkey</code> string Bls withdrawals private key to sign the message <code>--toExecutionAddress</code> string Address to which the validator's balances will be set to be withdrawn."},{"location":"reference/cli/#lightclient","title":"<code>lightclient</code>","text":"<p>Run lightclient</p> <p>Examples</p> <p>Run lightclient with goerli network</p> <pre><code>lightclient --network goerli\n</code></pre> <p>Options</p> Option Type Description Default <code>--logLevel</code> string Logging verbosity level for emitting logs to terminal info <code>--logFile</code> string Path to output all logs to a persistent log file, use 'none' to disable <code>--logFileLevel</code> string Logging verbosity level for emitting logs to file debug <code>--logFileDailyRotate</code> number Daily rotate log files, set to an integer to limit the file count, set to 0 (zero) to disable rotation 5 <code>--beaconApiUrl</code> string Url to a beacon node that support lightclient API <code>--checkpointRoot</code> string Checkpoint root hex string to sync the lightclient from, start with 0x"},{"location":"reference/cli/#dev","title":"<code>dev</code>","text":"<p>Quickly bootstrap a beacon node and multiple validators. Use for development and testing</p> <p>Examples</p> <p>Start a single beacon node with 8 interop validators</p> <pre><code>dev --genesisValidators 8 --reset\n</code></pre> <p>Options</p> <p>Cmd <code>dev</code> has all the options from the <code>beacon</code> cmd.</p> Option Type Description Default <code>--keymanager</code> boolean Enable key manager API server <code>--keymanager.authEnabled</code> boolean Enable token bearer authentication for key manager API server true <code>--keymanager.port</code> number Set port for key manager API 5062 <code>--keymanager.address</code> string Set host for key manager API 127.0.0.1 <code>--keymanager.cors</code> string Configures the Access-Control-Allow-Origin CORS header for key manager API * <code>--beaconNodes</code> array Addresses to connect to BeaconNode http://127.0.0.1:9596 <code>--force</code> boolean Open validators even if there's a lockfile. Use with caution <code>--graffiti</code> string Specify your custom graffiti to be included in blocks (plain UTF8 text, 32 characters max) <code>--proposerSettingsFile</code> string A yaml file to specify detailed default and per validator public key customized proposer configs. PS: This feature and its format is in alpha and subject to change <code>--strictFeeRecipientCheck</code> boolean Enable strict checking of the validator's <code>feeRecipient</code> with the one returned by engine <code>--defaultGasLimit</code> number Suggested gas limit to the engine/builder for building execution payloads. Only used post merge. 30000000 <code>--builder.selection</code> string Builder block selection strategy <code>maxprofit</code>, <code>builderalways</code>, <code>builderonly</code> or <code>executiononly</code> <code>executiononly</code> <code>--useProduceBlockV3</code> boolean Enable/disable usage of produceBlockV3 that might not be supported by all beacon clients yet false <code>--importKeystores</code> array Path(s) to a directory or single file path to validator keystores, i.e. Launchpad validators ./keystores/*.json <code>--importKeystoresPassword</code> string Path to a file with password to decrypt all keystores from <code>importKeystores</code> option <code>./password.txt</code> <code>--doppelgangerProtection</code> boolean Enables Doppelganger protection <code>--externalSigner.url</code> string URL to connect to an external signing server <code>--externalSigner.pubkeys</code> array List of validator public keys used by an external signer. May also provide a single string a comma separated public keys <code>--externalSigner.fetch</code> boolean Fetch then list of public keys to validate from an external signer <code>--distributed</code> boolean Enables specific features required to run as part of a distributed validator cluster <code>--network</code> string Name of the Ethereum Consensus chain network to join mainnet <code>--genesisEth1Hash</code> string If present it will create genesis with this eth1 hash. <code>--genesisValidators</code> number If present it will create genesis with interop validators and start chain. 8 <code>--startValidators</code> string Start interop validators in inclusive range with notation '0..7' <code>--genesisTime</code> number genesis_time to initialize interop genesis state now <code>--reset</code> boolean To delete chain and validator directories <code>--dumpTestnetFiles</code> string Dump testnet files and exit"},{"location":"reference/cli/#bootnode","title":"<code>bootnode</code>","text":"<p>Run a discv5 bootnode. This will NOT perform any beacon node functions, rather, it will run a discv5 service that allows nodes on the network to discover one another.</p> <p>Options</p> Option Type Description Default <code>--listenAddress</code> string The IPv4 address to listen for discv5 connections 0.0.0.0 <code>--port</code> number The UDP port to listen on 9000 <code>--listenAddress6</code> string The IPv6 address to listen for discv5 connections <code>--port6</code> number The UDP port to listen on 9090 <code>--bootnodes</code> array Additional bootnodes for discv5 discovery [] <code>--bootnodesFile</code> string Additional bootnodes for discv5 discovery file path <code>--persistNetworkIdentity</code> boolean Whether to reuse the same peer-id across restarts true <code>--enr.ip</code> string Override ENR IP entry <code>--enr.udp</code> number Override ENR UDP entry <code>--enr.ip6</code> string Override ENR IPv6 entry <code>--enr.udp6</code> number Override ENR (IPv6-specific) UDP entry <code>--nat</code> boolean Allow ENR configuration of non-local addresses <code>--logLevel</code> string Logging verbosity level for emitting logs to terminal info <code>--logFile</code> string Path to output all logs to a persistent log file, use 'none' to disable <code>--logFileLevel</code> string Logging verbosity level for emitting logs to file debug <code>--logFileDailyRotate</code> number Daily rotate log files, set to an integer to limit the file count, set to 0 (zero) to disable rotation 5 <code>--metrics</code> boolean Enable the Prometheus metrics HTTP server <code>--metrics.port</code> number Listen TCP port for the Prometheus metrics HTTP server 8008 <code>--metrics.address</code> string Listen address for the Prometheus metrics HTTP server 127.0.0.1"},{"location":"tools/flamegraphs/","title":"Generating Flamegraphs for a Running Node Service on Linux","text":"<p>This guide assumes a running instance of Lodestar and will walk through how to generate a flamegraph for the process while running on Linux. While it is possible to run Lodestar in a number of ways, for performance profiling it is recommended to not use Dockerized implementations. It is best to run Lodestar as a service on a Linux machine. Follow the Lodestar docs to get the service installed and running. Then come back here when you are ready to generate the flamegraph.</p>"},{"location":"tools/flamegraphs/#modifying-linux-and-lodestar","title":"Modifying Linux and Lodestar","text":"<p>Use the following two commands to install <code>perf</code> for generating the stack traces. You may get a warning about needing to restart the VM due to kernel updates. This is nothing to be concerned with and if so, cancel out of the restart dialog.</p> <pre><code>sudo apt-get install linux-tools-common linux-tools-generic\nsudo apt-get install linux-tools-`uname -r`  # empirically this throws if run on the same line above\n</code></pre> <p>Next we need to update the Lodestar service by modifying the start script. We need to add a necessary flag <code>--perf-basic-prof</code> to allow the stack traces to be useful. Node is a virtual machine and <code>perf</code> is designed to capture host stack traces. In order to allow the JavaScript functions to be captured meaningfully, <code>v8</code> can provide some help. Generally Lodestar is started with a script like the following:</p>"},{"location":"tools/flamegraphs/#example-start_lodestarsh","title":"Example start_lodestar.sh","text":"<pre><code>node \\\n  --perf-basic-prof \\\n  --max-old-space-size=4096 \\\n  /usr/src/lodestar/packages/cli/bin/lodestar \\\n  beacon \\\n  --rcConfig /home/devops/beacon/rcconfig.yml\n</code></pre> <p>After updating the start script, restart the node process running the beacon service. Note in the command below, that the <code>beacon</code> service may have a different name or restart command, depending on your setup.</p> <pre><code>admin@12.34.56.78: sudo systemctl restart beacon\n</code></pre> <p>The flag that was added notifies <code>V8</code> to output a map of functions and their addresses. This is necessary for <code>perf</code> to generate the stack traces for the virtual machine in addition to the traditional host stack traces. There is a very small, performance overhead to output the maps. After a short while, once the process runs for a bit the functions will no longer be moving in memory and the overhead will be significantly reduced. The VM will still be moving objects around but this flag is generally safe to run in production. After a few minutes of running, listing the directory with the start script (<code>process.cwd()</code>) will look similar:</p> <pre><code>-rw-r--r--  1 admin admin   9701529 May 22 00:36 beacon-2023-05-22.log\n-rwxrwxr-x  1 admin root        421 May 22 00:31 beacon_run.sh\ndrwxr-xr-x  2 admin admin    917504 May 22 00:35 chain-db\n-rw-r--r--  1 admin admin   2861242 May 22 00:36 isolate-0x6761520-2085004-v8.log\n-rw-r--r--  1 admin admin    203172 May 22 00:36 isolate-0x7fa2f0001060-2085004-v8.log\n-rw-r--r--  1 admin admin     68044 May 22 00:36 isolate-0x7fcd80001060-2085004-v8.log\n-rw-r--r--  1 admin admin    420809 May 22 00:36 isolate-0x7fcd84001060-2085004-v8.log\n-rw-r--r--  1 admin admin    123919 May 22 00:36 isolate-0x7fcd88001060-2085004-v8.log\n-rw-r--r--  1 admin admin     94391 May 22 00:35 isolate-0x7fcd8c001060-2085004-v8.log\n-rw-r--r--  1 admin admin    183831 May 22 00:36 isolate-0x7fcd90000e60-2085004-v8.log\n-rw-r--r--  1 admin admin    152786 May 22 00:36 isolate-0x7fcd94000e60-2085004-v8.log\n-rw-r--r--  1 admin admin    262333 May 22 00:36 isolate-0x7fcd98000e60-2085004-v8.log\n-rw-r--r--  1 admin admin    218473 May 22 00:36 isolate-0x7fcd9c000e60-2085004-v8.log\n-rw-r--r--  1 admin admin    366788 May 22 00:36 isolate-0x7fcda0000e60-2085004-v8.log\n-rw-r--r--  1 admin admin    304917 May 22 00:36 isolate-0x7fcda4000e60-2085004-v8.log\n-rw-r--r--  1 admin admin    586238 May 22 00:36 isolate-0x7fcda8000e60-2085004-v8.log\n-rw-r--r--  1 admin admin    450675 May 22 00:36 isolate-0x7fcdac000e60-2085004-v8.log\n-rw-r--r--  1 admin admin    768470 May 22 00:36 isolate-0x7fcdb8000d60-2085004-v8.log\n-rw-r--r--  1 admin root        559 May 21 14:17 rcconfig.yml\n</code></pre> <p>The <code>isolate-*-v8.log</code> files are the maps that <code>v8</code> outputs for the <code>perf</code> command to reference. You are now ready to collect the stack traces.</p>"},{"location":"tools/flamegraphs/#capturing-stack-traces","title":"Capturing Stack Traces","text":"<p>The first command below will run <code>perf</code> for 60 seconds, and then save the output to a file named <code>perf.out</code>. The second one will merge the exported, unknown, tokens with the isolate maps and output full stack traces for the render. Running both <code>perf</code> commands in the folder with the <code>isolate</code> maps will allow the data to be seamlessly spliced. Once the output is saved, update the permissions so the file can be copied to your local machine via <code>scp</code>.</p> <p>You can modify the frequency of capture by changing <code>-F 99</code> to a different number. Try to stay away from whole numbers as they are more likely to cause interference with periodically scheduled tasks. As an example use <code>99Hz</code> or <code>997Hz</code> instead of <code>100Hz</code> or <code>1000Hz</code>. In testing neither seemed to have an appreciable affect on CPU usage when run for a short period of time.</p> <p>To change the period of capture adjust the sleep duration (which is in seconds).</p> <p>The <code>pgrep</code> command is used to find the process id to capture against. Feel free to pass a number to the <code>-p</code> flag if you know the process id, or adjust the file path if the executable is in a different location.</p> <pre><code>admin@12.34.56.78: sudo perf record -F 99 -p $(pgrep -f '/usr/src/lodestar/packages/cli/bin/lodestar beacon') -g -- sleep 60\nadmin@12.34.56.78: sudo perf script -f &gt; perf.out\nadmin@12.34.56.78: sudo chmod 777 ~/beacon/perf.out\n</code></pre> <p>And then copy the <code>perf.out</code> file to your local machine to render the flamegraph. Running at <code>99Hz</code> for 180 seconds results in a file size of about 3.5MB and <code>997Hz</code> for 60 seconds is roughly 4.4MB.</p> <pre><code>scp admin@12.34.56.78:/home/devops/beacon/out.perf /some_temp_dir/perf.out\n</code></pre>"},{"location":"tools/flamegraphs/#rendering-a-flamegraph","title":"Rendering a Flamegraph","text":"<p>By far the best tool to render flamegraphs is <code>flamescope</code> from Netflix. It allows for easy analysis and zooming into specific time periods. It also give a holistic view of how the process is performing over time.</p>"},{"location":"tools/flamegraphs/#installation","title":"Installation","text":"<p>Python3 is required. Clone the repository and install the dependencies:</p> <p>The original is no longer maintained and had a configuration bug. This is a fork that fixes the issue.</p> <pre><code>git clone https://github.com/matthewkeil/flamescope\ncd flamescope\npip3 install -r requirements.txt\nyarn\n</code></pre>"},{"location":"tools/flamegraphs/#usage","title":"Usage","text":"<pre><code>mv /some_temp_dir/perf.out /path/to/flamescope/examples\nyarn dev\n</code></pre> <p>Then navigate in a browser to <code>http://localhost:8080</code> and begin analyzing the data.</p> <p> </p>"},{"location":"tools/flamegraphs/#filtering-results","title":"Filtering Results","text":"<p>There can be a lot of \"noise\" in the stack traces with <code>libc</code>, <code>v8</code> and <code>libuv</code> calls. It is possible to filter the results to make it more useful, but note this will skew the results. Looking at the graph both filtered and unfiltered can be beneficial. The following <code>sed</code> command will remove the noise from the stack traces.</p> <pre><code>sed -r -e \"/( __libc_start| uv_| LazyCompile | v8::internal::| node::| Builtins_| Builtin:| Stub:| LoadIC:| \\\\[unknown\\\\]| LoadPolymorphicIC:)/d\" -e 's/ LazyCompile:[*~]?/ /'\n</code></pre>"},{"location":"tools/flamegraphs/#unfiltered","title":"Unfiltered","text":""},{"location":"tools/flamegraphs/#filtered","title":"Filtered","text":""},{"location":"tools/flamegraphs/#references","title":"References","text":""},{"location":"tools/flamegraphs/#list-of-web-references","title":"List of Web References","text":"<ul> <li>https://www.brendangregg.com/flamegraphs.html</li> <li>https://nodejs.org/en/docs/guides/diagnostics-flamegraph</li> <li>https://netflixtechblog.com/netflix-flamescope-a57ca19d47bb</li> <li>https://jaanhio.me/blog/nodejs-flamegraph-analysis/ (this was a great one about filtering methodology)</li> <li>https://medium.com/voodoo-engineering/node-js-and-cpu-profiling-on-production-in-real-time-without-downtime-d6e62af173e2</li> </ul>"},{"location":"tools/flamegraphs/#visualization-tools","title":"Visualization Tools","text":"<ul> <li><code>flamescope</code></li> </ul>"},{"location":"tools/flamegraphs/#collecting-on-linux","title":"Collecting on Linux","text":"<ul> <li>https://www.brendangregg.com/perf.html</li> <li>https://www.brendangregg.com/linuxperf.html</li> <li>https://www.brendangregg.com/blog/2014-09-17/node-flame-graphs-on-linux.html</li> <li>https://perf.wiki.kernel.org/index.php/Main_Page</li> </ul>"},{"location":"tools/flamegraphs/#collecting-on-macos","title":"Collecting on MacOS","text":"<ul> <li>https://gist.github.com/zeusdeux/aac6f8500917319213c5</li> <li>https://gist.github.com/loderunner/36724cc9ee8db66db305</li> <li>https://keith.github.io/xcode-man-pages/xctrace.1.html</li> </ul>"},{"location":"usage/beacon-management/","title":"Beacon management","text":"<p>The following instructions are required to setup and run a Lodestar beacon node.</p> <ul> <li>Beacon management<ul> <li>Connect to mainnet or a public testnet</li> <li>Configure the Lodestar JWT authentication token<ul> <li>Generate a secret key</li> <li>Configure Lodestar to locate the JWT secret</li> <li>Ensure JWT is configured with your execution node</li> </ul> </li> <li>Run a beacon node<ul> <li>Checkpoint Sync</li> <li>Guide to the sync logs</li> </ul> </li> </ul> </li> </ul>"},{"location":"usage/beacon-management/#connect-to-mainnet-or-a-public-testnet","title":"Connect to mainnet or a public testnet","text":"<p>Running a Lodestar node on mainnet or a testnet only requires basic familiarity with the terminal.</p> <p>Make sure Lodestar is installed in your local environment, following the chosen install method. The following command should return a non error message.</p> <pre><code>./lodestar --help\n</code></pre> <p>For a complete list of beacon node CLI commands and options, see the Command Line Reference</p> <p>To select a known testnet or mainnet, use the <code>--network</code> flag. <code>mainnet</code> is selected by default, and a list of available networks is listed with the <code>--help</code> flag. Setting the <code>--network</code> flag will conveniently configure the beacon node or validator client for the selected network. For power users, any configuration option should be able to be overridden.</p>"},{"location":"usage/beacon-management/#configure-the-lodestar-jwt-authentication-token","title":"Configure the Lodestar JWT authentication token","text":"<p>Post-Merge Ethereum will require secure authentication with the Engine API connection on your chosen Execution node.</p> <p>Info</p> <p>Post-Merge Ethereum requires a secure, authenticated connection to the Execution client on port 8551. We recommend setting this up now to ensure a proper configuration before the Merge.</p>"},{"location":"usage/beacon-management/#generate-a-secret-key","title":"Generate a secret key","text":"<p>You must generate a secret 32-byte (64 characters) hexadecimal string that will be used to authenticate with an execution node. You can use the following command in most terminals to generate a random secret: <code>openssl rand -hex 32</code>. Or you can use an online generator. Save this secret key into a text file and note where you store this file.</p>"},{"location":"usage/beacon-management/#configure-lodestar-to-locate-the-jwt-secret","title":"Configure Lodestar to locate the JWT secret","text":"<p>When starting up a Lodestar beacon node in any configuration, ensure you add the <code>--jwtSecret $JWT_SECRET_PATH</code> flag to point to the saved secret key file.</p>"},{"location":"usage/beacon-management/#ensure-jwt-is-configured-with-your-execution-node","title":"Ensure JWT is configured with your execution node","text":"<p>For Go Ethereum: Use the <code>--authrpc.jwtsecret /data/jwtsecret</code> flag to configure the secret. Use their documentation here.</p> <p>For Nethermind: Use the <code>--JsonRpc.JwtSecretFile /data/jwtsecret</code> flag to configure the secret. Use their documentation here.</p> <p>For Besu: Use the <code>--engine-jwt-secret=&lt;FILE&gt;</code> flag to configure the secret. Use their documentation here.</p> <p>For Erigon: Use the <code>--authrpc.jwtsecret</code> flag to configure the secret. Use their documentation here.</p>"},{"location":"usage/beacon-management/#run-a-beacon-node","title":"Run a beacon node","text":"<p>To start a Lodestar beacon run the command:</p> <pre><code>./lodestar beacon --network $NETWORK_NAME --jwtSecret $JWT_SECRET_PATH\n</code></pre> <p>This will assume an execution-layer client is available at the default location of <code>https://localhost:8545</code>.</p> <p>In case execution-layer clients are available at different locations, use <code>--execution.urls</code> to specify these locations in the command:</p> <pre><code>./lodestar beacon --network $NETWORK_NAME --jwtSecret $JWT_SECRET_PATH --execution.urls $EL_URL1 $EL_URL2\n</code></pre> <p>Immediately you should see confirmation that the node has started</p> <pre><code>pr-20 15:12:45.274[]                 info: Lodestar network=mainnet, version=v1.7.2, commit=\nApr-20 15:12:45.327[]                 info: Connected to LevelDB database path=/data/mt1/chain-db\nApr-20 15:12:57.747[]                 info: Initializing beacon from a valid db state slot=6264480, epoch=195765, stateRoot=0x8133cd4d0be59c3e94405f902fe0ad68ffaa5013b525dddb6285b91ad79716f6, isWithinWeakSubjectivityPeriod=true\nApr-20 15:13:18.077[network]          info: PeerId 16Uiu2HAmDsGet67va6VCnaW2Tu1Ae2yujiDMnmURMMWNvssER7ZQ, Multiaddrs /ip4/127.0.0.1/tcp/9000/p2p/16Uiu2HAmDsGet67va6VCnaW2Tu1Ae2yujiDMnmURMMWNvssER7ZQ,/ip4/10.244.0.199/tcp/9000/p2p/16Uiu2HAmDsGet67va6VCnaW2Tu1Ae2yujiDMnmURMMWNvssER7ZQ\nApr-20 15:13:18.270[rest]             info: Started REST API server address=http://127.0.0.1:9596\nApr-20 15:13:18.271[]                 warn: Low peer count peers=0\nApr-20 15:13:18.280[]                 info: Searching peers - peers: 0 - slot: 6264964 - head: (slot - 484) 0x7ee6\u20262a15 - exec-block: syncing(17088043 0x9442\u2026) - finalized: 0xe359\u20264d7e:195763\nApr-20 15:13:23.009[chain]            info: Validated transition configuration with execution client terminalTotalDifficulty=0xc70d808a128d7380000, terminalBlockHash=0x0000000000000000000000000000000000000000000000000000000000000000, terminalBlockNumber=0x0\nApr-20 15:13:29.287[]                 info: Syncing - ? left - 0.00 slots/s - slot: 6264965 - head: (slot - 485) 0x7ee6\u20262a15 - exec-block: syncing(17088043 0x9442\u2026) - finalized: 0xe359\u20264d7e:195763 - peers: 1\nApr-20 15:14:41.003[]                 info: Syncing - 22 seconds left - 4.92 slots/s - slot: 6264971 - head: (slot - 108) 0xd15f\u2026b605 - exec-block: valid(17088414 0x3dba\u2026) - finalized: 0x70fd\u20265157:195775 - peers: 4\nApr-20 15:14:53.001[]                 info: Syncing - 9 seconds left - 5.00 slots/s - slot: 6264972 - head: (slot - 45) 0x44e4\u202620a4 - exec-block: valid(17088475 0xca61\u2026) - finalized: 0x9cbd\u2026ba83:195776 - peers: 8\nApr-20 15:15:01.443[network]          info: Subscribed gossip core topics\nApr-20 15:15:01.446[sync]             info: Subscribed gossip core topics\nApr-20 15:15:05.000[]                 info: Synced - slot: 6264973 - head: 0x90ea\u2026c655 - exec-block: valid(17088521 0xca9b\u2026) - finalized: 0x6981\u2026682f:195778 - peers: 6\n</code></pre> <p>Info</p> <p>If your node is stuck with <code>Searching for peers</code> review your network configuration to make sure your ports are open.</p> <p>By default, Lodestar stores all configuration and chain data at the path <code>$XDG_DATA_HOME/lodestar/$NETWORK_NAME</code>.</p> <p>A young testnet should take a few hours to sync. If you see multiple or consistent errors in the logs, please open a Github issue or reach out to us in Discord. Just by reporting anomalies you are helping accelerate the progress of Ethereum Consensus, thanks for contributing!</p> <p>Warning</p> <p>It is dangerous to expose your Beacon APIs publicly as there is no default authentication mechanism provided. Ensure your beacon node host is not exposing ports 8545 or 9596 outside of your internal network.</p>"},{"location":"usage/beacon-management/#checkpoint-sync","title":"Checkpoint Sync","text":"<p>If you are starting your node from a blank db, like starting from genesis, or from the last saved state in db and the network is now far ahead, your node will be susceptible to \"long range attacks.\" Ethereum's solution to this is via something called weak subjectivity. Read Vitalik's illuminating post explaining weak subjectivity..</p> <p>If you have a synced beacon node available (e.g., your friend's node or an infrastructure provider) and a trusted checkpoint you can rely on, you can start off your beacon node in under a minute! And at the same time kicking the \"long range attack\" in its butt!</p> <p>Just supply these extra arguments to your beacon node command:</p> <pre><code>--checkpointSyncUrl &lt;synced node url&gt; [--wssCheckpoint &lt;trusted checkpoint in root:epoch format&gt;]\n</code></pre> <p>In case you really trust <code>checkpointSyncUrl</code> then you may skip providing <code>wssCheckpoint</code>, which will then result into your beacon node syncing and starting off the recently finalized state from the trusted URL.</p> <p>Warning</p> <p>Please use this option very carefully (and at your own risk), a malicious server URL can put you on the wrong chain with a danger of you losing your funds by social engineering.</p> <p>If possible, validate your <code>wssCheckpoint</code> from multiple places (e.g. different client distributions) or from other trusted sources. This will highly reduce the risk of starting off on a malicious chain.</p> <p>Taking too long to sync?</p> <p>After your node has been offline for a while, it might be the case that it takes a long time to sync even though a <code>checkpointSyncUrl</code> is specified. This is due to the fact that the last db state is still within the weak subjectivity period (~15 days on mainnet) which causes the node to sync from the db state instead of the checkpoint state.</p> <p>It is possible to force syncing from checkpoint state by supplying the <code>--forceCheckpointSync</code> flag. This option is only recommended if it is absolutely necessary for the node to be synced right away to fulfill its duties as there is an inherent risk each time the state is obtained from an external source.</p>"},{"location":"usage/beacon-management/#guide-to-the-sync-logs","title":"Guide to the sync logs","text":"<p>Lodestar beacon sync log aims to provide information of utmost importance about your node and yet be succinct at the same time. You may see the sync logs in the following format:</p> <p><code>[Sync status] - [ Slot info ] - [Head info] - [Exec block info] - [Finalized info] - [Peers info]</code></p> <p>See the following example of different kinds of sync log:</p> <pre><code>Apr-20 15:24:08.034[]                 info: Searching peers - peers: 0 - slot: 6265018 - head: 6264018 0xed93\u20267b0a - exec-block: syncing(17088476 0x9649\u2026) - finalized: 0xbf30\u20267e7c:195777\nApr-20 15:24:17.000[]                 info: Searching peers - peers: 0 - slot: 6265019 - head: 6264018 0xed93\u20267b0a - exec-block: syncing(17088476 0x9649\u2026) - finalized: 0xbf30\u20267e7c:195777\n</code></pre> <pre><code>Apr-20 15:13:41.298[]                 info: Syncing - 2.5 minutes left - 2.78 slots/s - slot: 6264966 - head: 6262966 0x5cec\u2026f5b8 - exec-block: valid(17088105 0x6f74\u2026) - finalized: 0x5cc0\u20263874:195764 - peers: 1\nApr-20 15:13:41.298[]                 info: Syncing - 2 minutes left - 2.78 slots/s - slot: 6264967 - head: 6263965 0x5cec\u2026f5b8 - exec-block: valid(17088105 0x6f74\u2026) - finalized: 0x5cc0\u20263874:195764 - peers: 1\n</code></pre> <pre><code>Apr-20 15:13:53.151[]                 info: Syncing - 1.6 minutes left - 3.82 slots/s - slot: 6264967 - head: (slot -360) 0xe0cf\u20269f3c - exec-block: valid(17088167 0x2d6a\u2026) - finalized: 0x8f3f\u20262f81:195766 - peers: 5\nApr-20 15:14:05.425[]                 info: Syncing - 1.1 minutes left - 4.33 slots/s - slot: 6264968 - head: (slot -297) 0x3655\u20261658 - exec-block: valid(17088231 0xdafd\u2026) - finalized: 0x9475\u2026425a:195769 - peers: 2\nApr-20 15:14:53.001[]                 info: Syncing - 9 seconds left - 5.00 slots/s - slot: 6264972 - head: (slot -45) 0x44e4\u202620a4 - exec-block: valid(17088475 0xca61\u2026) - finalized: 0x9cbd\u2026ba83:195776 - peers: 8\n</code></pre> <pre><code>Apr-20 15:15:01.443[network]          info: Subscribed gossip core topics\nApr-20 15:15:01.446[sync]             info: Subscribed gossip core topics\nApr-20 15:15:05.000[]                 info: Synced - slot: 6264973 - head: 0x90ea\u2026c655 - exec-block: valid(17088521 0xca9b\u2026) - finalized: 0x6981\u2026682f:195778 - peers: 6\nApr-20 15:15:17.003[]                 info: Synced - slot: 6264974 - head: 0x4f7e\u20260e3a - exec-block: valid(17088522 0x08b1\u2026) - finalized: 0x6981\u2026682f:195778 - peers: 6\n</code></pre> <pre><code>Apr-20 15:15:41.001[]                 info: Synced - slot: 6264976 - head: (slot -1) 0x17c6\u202671a7 - exec-block: valid(17088524 0x5bc1\u2026) - finalized: 0x6981\u2026682f:195778 - peers: 8\nApr-20 15:15:53.001[]                 info: Synced - slot: 6264977 - head: (slot -2) 0x17c6\u202671a7 - exec-block: valid(17088524 0x5bc1\u2026) - finalized: 0x6981\u2026682f:195778 - peers: 8\n</code></pre> <pre><code>Apr-20 15:16:05.000[]                 info: Synced - slot: 6264978 - head: 0xc9fd\u202628c5 - exec-block: valid(17088526 0xb5bf\u2026) - finalized: 0x6981\u2026682f:195778 - peers: 8\nApr-20 15:16:17.017[]                 info: Synced - slot: 6264979 - head: 0xde91\u2026d4cb - exec-block: valid(17088527 0xa488\u2026) - finalized: 0x6981\u2026682f:195778 - peers: 7\n</code></pre> <ol> <li> <p>Sync status: Takes three values : <code>Synced</code> or <code>Syncing</code> (along with sync speed info) or <code>Searching</code> if node is is still looking for viable peers from where it can download blocks.</p> </li> <li> <p>Slot (clock) info: What is the current ongoing slot as per the chain genesis</p> </li> <li> <p>Head info: It specifies where the local chain head hash is. In case its far behind the Slot (clock) then it independently shows the head slot else it show how far behind from the Slot it is if difference &lt; 1000.</p> </li> <li> <p>Execution block info: It provides the execution information about the head whether its confirmed <code>valid</code> or execution layer is still <code>syncing</code> to it, as well as its number and a short hash to easy identification.</p> </li> <li> <p>Finalized info: What is the current local <code>finalized</code> checkpoint in the format of <code>[checkpoint root]:[checkpoint epoch]</code>, for e.g.: <code>0xd7ba\u20268386:189636</code></p> </li> <li> <p>Peer info: Current total number of outbound or inbound peers, for e.g.: <code>peers: 27</code></p> </li> </ol> <p>For more insight into how a Lodestar beacon node is functioning, you may setup lodestar metrics and use the prepared Grafana dashboards that are found in the repository. Check out our section on Prometheus and Grafana for more details.</p>"},{"location":"usage/client-monitoring/","title":"Client monitoring","text":"<p>Lodestar has the ability to send client stats to a remote service for collection. At the moment, the main service offering remote monitoring is beaconcha.in.</p> <p>Instructions for setting up client monitoring with beaconcha.in can be found in their docs about Mobile App &lt;&gt; Node Monitoring and in your account settings.</p>"},{"location":"usage/client-monitoring/#configuration","title":"Configuration","text":"<p>Lodestar provides CLI options to configure monitoring on both the beacon node and validator client.</p>"},{"location":"usage/client-monitoring/#remote-endpoint-url","title":"Remote endpoint URL","text":"<p>Client monitoring can be enabled by setting the <code>--monitoring.endpoint</code> flag to a remote service endpoint URL.</p> <pre><code>--monitoring.endpoint \"https://beaconcha.in/api/v1/client/metrics?apikey={apikey}&amp;machine={machineName}\"\n</code></pre> <p>In case of beaconcha.in, the API key can be found in your account settings. Setting the machine is optional but it is especially useful if you are monitoring multiple nodes.</p> <p>Note</p> <p>When sending data to a remote service you should be conscious about security:</p> <ul> <li>Only use a service that you trust as this will send information which may identify you   and associate your validators, IP address and other personal information.</li> <li>Always use a HTTPS connection (i.e. a URL starting with <code>https://</code>) to prevent the traffic   from being intercepted in transit and leaking information.</li> </ul> <p>More details about the data sent to the remote service can be found in the specification.</p> <p>It is also possible to print out the data sent to the remote service by enabling debug logs which can be done by supplying the <code>--logLevel debug</code> flag.</p>"},{"location":"usage/client-monitoring/#monitoring-interval","title":"Monitoring interval","text":"<p>It is possible to adjust the interval between sending client stats to the remote service by setting the <code>--monitoring.interval</code> flag. It takes an integer value in milliseconds, the default is <code>60000</code> which means data is sent once a minute.</p> <p>For example, setting an interval of <code>300000</code> would mean the data is only sent every 5 minutes.</p> <pre><code>--monitoring.interval 300000\n</code></pre> <p>Increasing the monitoring interval can be useful if you are running into rate limit errors when posting large amounts of data for multiple nodes.</p>"},{"location":"usage/local/","title":"Local testnet","text":"<p>To quickly test and run Lodestar we recommend starting a local testnet. We recommend a simple configuration of two beacon nodes with multiple validators</p> <p>Terminal 1</p> <p>Run a beacon node as a bootnode, with 8 validators with the following command.</p> <pre><code>./lodestar dev \\\n  --genesisValidators 8 \\\n  --genesisTime 1669713528 \\\n  --startValidators 0..7 \\\n  --enr.ip 127.0.0.1 \\\n  --enr.udp 9000 \\\n  --dataDir &lt;/path/to/node1&gt; \\\n  --reset\n</code></pre> <p><code>--genesisValidators</code> and <code>--genesisTime</code> define the genesis state of the beacon chain. <code>--dataDir</code> defines a path where lodestar should store the beacon state. <code>--enr.ip</code> sets the ENR IP entry for the node (essential for second node to connect via <code>enr</code>) and <code>--enr.udp</code> exposes the <code>discv5</code> discovery service (if you want to connect more than 1 node and enable discovery amongst them via bootnode). Lastly the <code>--reset</code> flag ensures the state is cleared on each restart - which is useful when testing locally.</p> <p>Once the node has started, make a request to <code>curl http://localhost:9596/eth/v1/node/identity</code> and copy the <code>enr</code> value.</p> <p>This would be used to connect from the second node.</p> <p>ENR stands for Ethereum node records, which is a format for conveying p2p connectivity information for Ethereum nodes. For more info see EIP-778.</p> <p>Terminal 2</p> <p>Start the second node without starting any validators and connect to the first node by supplying the copied <code>enr</code> value:</p> <pre><code>./lodestar dev \\\n  --genesisValidators 8 \\\n  --genesisTime 1669713528 \\\n  --dataDir &lt;/path/to/node2&gt; \\\n  --port 9001 \\\n  --rest.port 9597 \\\n  --network.connectToDiscv5Bootnodes true \\\n  --bootnodes &lt;enr value&gt; \\\n  --reset\n</code></pre> <p>By default, lodestar starts as many validators as the number supplied by <code>--genesisValidators</code>. In order to not start any validator, this is overridden by the <code>--startValidators</code> option. Passing a value of <code>0..0</code> means no validators should be started.</p> <p>Also, take note that the values of <code>--genesisValidators</code> and <code>--genesisTime</code> must be the same as the ones passed to the first node in order for the two nodes to have the same beacon chain.</p> <p>Also <code>--port</code> and <code>--rest.port</code> are supplied since the default values will already be in use by the first node.</p> <p>The <code>--network.connectToDiscv5Bootnodes</code> flags needs to be set to true as this is needed to allow connection to boot ENRs on local devnet. The exact ENR of node to connect to is then supplied via the <code>--bootnodes</code> flag.</p> <p>Once the second node starts, you should see an output similar to the following in either of the terminals:</p> <pre><code>Eph 167991/6 6.007 []  info: Searching peers - peers: 1 - slot: 5375718 (skipped 5375718) - head: 0 0xcc67\u20263345 - finalized: 0x0000\u20260000:0\n</code></pre> <p>For further confirmation that both nodes are connected as peers, make a request to the <code>/eth/v1/node/peers</code> endpoint.</p> <p>For example, making the request on the first node via the following command:</p> <p><code>curl http://localhost:9596/eth/v1/node/peers | jq</code></p> <p>will give a result similar to the following:</p> <pre><code>{\n  \"data\": [\n    {\n      \"peer_id\": \"...\",\n      \"enr\": \"\",\n      \"last_seen_p2p_address\": \"....\",\n      \"direction\": \"inbound\",\n      \"state\": \"connected\"\n    }\n  ],\n  \"meta\": {\n    \"count\": 1\n  }\n}\n</code></pre>"},{"location":"usage/local/#post-merge-local-testnet","title":"Post-Merge local testnet","text":"<p>To set up a local testnet with a Post-Merge configuration, you may need to add the following parameters (in addition to the parameters described above) to your <code>lodestar dev</code> command:</p> <ul> <li><code>--params.ALTAIR_FORK_EPOCH 0</code></li> <li><code>--params.BELLATRIX_FORK_EPOCH 0</code></li> <li><code>--terminal-total-difficulty-override 0</code></li> </ul>"},{"location":"usage/mev-integration/","title":"MEV &amp; Merge","text":"<p>MEV is a term that refers to the bundling of transactions in one particular order to extract (mostly) arbitrage opportunities on the dApps and decentralized exchanges.</p> <p>And the ones who gets to include these execution payloads (miners before the merge, validators after the merge) in the canonical chain get paid a per-block reward which essentially should be higher than the normal payload inclusion reward (including transactions tips).</p> <p>Currently these happen with miners running forked versions of their favorite execution client, integrating with these \"builders\" but in the post-merge world they get a more native and standard integration with the CL.</p> <p>This is what we in CL land refer to as Builder Api.</p>"},{"location":"usage/mev-integration/#lodestar-and-builder-api","title":"Lodestar and Builder API","text":"<p>Lodestar offers builder integration through the spec-ed builder API.</p> <p>This sits in parallel with the execution engine so when enabled, lodestar validator run both flows in parallel when its time to propose for a validator key and currently (naively) picks the builder block in preference to execution if a builder block is fetched (else just proceeds with the execution block).</p>"},{"location":"usage/mev-integration/#configure-lodestar-setup-for-mev","title":"Configure Lodestar setup for MEV","text":"<p>All you have to do is:</p> <ol> <li>Provide lodestar beacon node with a Builder endpoint (which corresponds to the network you are running) via these additional flags:    <pre><code>--builder --builder.urls &lt;builder/relay/boost url&gt;\n</code></pre></li> <li>Run lodestar validator client with these additional flags    <pre><code>--builder --suggestedFeeRecipient &lt;your ethereum address&gt;\n</code></pre></li> </ol> <p>There are some more builder flags available in lodestar cli (for both beacon and validator) which you may inspect and use.</p> <p>Even though its possible to directly hook lodestar with an external Builder/Relay, its recommended to interface it with the MEV world via local MEV-BOOST multiplexer which can integrate multiple builder/relays for you and provide some payload verification on top, as currently Lodestar assumes this to be a trusted endpoint.</p>"},{"location":"usage/prometheus-grafana/","title":"Prometheus and Grafana","text":"<p>Prometheus is an open-source monitoring system with efficient time series database and a modern alerting approach. Together with Grafana it's the recommended way to make sure that your node and validator(s) are performing correctly.</p>"},{"location":"usage/prometheus-grafana/#prometheus","title":"Prometheus","text":"<p>To start, download Prometheus from https://prometheus.io/download/. Unzip the downloaded .zip file and run Prometheus from its installed location with the lodestar <code>prometheus.yml</code> passed in as the configuration file</p> <pre><code>./prometheus --config.file=$dataDir/prometheus.yml\n</code></pre> <p>Info</p> <p>8008 is also the default port specified in the <code>prometheus.yml</code> in the lodestar repository</p> <p>Then run the Lodestar beacon node with</p> <pre><code>lodestar --metrics=true --metrics.port=8008\n</code></pre> <p>Navigate to http://localhost:9090/ in your browser to verify that Prometheus is monitoring Lodestar</p>"},{"location":"usage/prometheus-grafana/#grafana","title":"Grafana","text":"<p>Download and install Grafana from its official repository https://grafana.com/docs/grafana/latest/installation/debian/</p> <p>Add Prometheus as a data source to Grafana https://prometheus.io/docs/visualization/grafana/#installing</p> <p>An example of relevant metrics of interest to monitor are:</p> <ul> <li><code>nodejs_heap_space_size_used_bytes</code></li> <li><code>nodejs_eventloop_lag_seconds</code></li> <li><code>beaconchain_peers</code></li> <li><code>beaconchain_current_slot</code></li> <li><code>beaconchain_current_finalized_epoch</code></li> </ul>"},{"location":"usage/validator-management/","title":"Validator management","text":"<p>The following instructions are required for stakers utilizing Lodestar.</p> <ul> <li>Validator management<ul> <li>Wallet configuration<ul> <li>Create a wallet</li> </ul> </li> <li>Setup your validator<ul> <li>Import a validator keystore from your wallet to Lodestar<ul> <li>Option 1: Import Keys To Lodestar's Keystores Folder</li> <li>Option 2: Import Keys When Starting the Validator</li> </ul> </li> <li>Configuring the fee recipient address</li> <li>Submit a validator deposit</li> </ul> </li> <li>Run the validator</li> </ul> </li> </ul>"},{"location":"usage/validator-management/#wallet-configuration","title":"Wallet configuration","text":"<p>A wallet helps to manage many validators from a group of 12/24 words (also known as a \"mnemonic\" or \"recovery phrase\"). All validators and withdrawal keys can be re-generated from a backed-up mnemonic.</p> <p>The mnemonic is randomly generated during wallet creation and printed out to the terminal. It's important to make one or more backups of the mnemonic to ensure your ETH wallets are not lost in the case of data loss.</p> <p>Danger</p> <p>It is very important to keep your mnemonic private as it represents the ultimate control of your ETH wallets.</p>"},{"location":"usage/validator-management/#create-a-wallet","title":"Create a wallet","text":"<p>Lodestar is deprecating its functionality to create wallets.</p> <p>To create a wallet, we recommend using the official <code>staking-deposit-cli</code> from the Ethereum Foundation for users comfortable with command line interfaces.</p> <p>Alternatively, for a graphical user interface, you can use the Stakehouse Wagyu Key Generator developed by members of the EthStaker community.</p> <p>Info</p> <p>These tools will generate files for staking validators as well as the important mnemonic. This mnemonic must be handled and stored securely.</p>"},{"location":"usage/validator-management/#setup-your-validator","title":"Setup your validator","text":"<p>Validators are represented by a BLS keypair. Use your generated mnemonic from one of the tools above to generate the keystore files required for validator duties on Lodestar.</p>"},{"location":"usage/validator-management/#import-a-validator-keystore-from-your-wallet-to-lodestar","title":"Import a validator keystore from your wallet to Lodestar","text":"<p>To import a validator keystore that was created via one of the methods described above, you must locate the validator JSON keystores exported by those tools (ex. <code>keystore-m_12381_3600_0_0_0-1654128694.json</code>).</p> <p>Inside the keystore JSON file, you should have an EIP-2335 keystore file.</p> <p>You will also need the passphrase used the encrypt the keystore. This can be specified interactively, or provided in a plaintext file.</p>"},{"location":"usage/validator-management/#option-1-import-keys-to-lodestars-keystores-folder","title":"Option 1: Import Keys To Lodestar's Keystores Folder","text":"<p>You can load the keys into the keystore folder using the <code>validator import</code> command. There are two methods for importing keystores:</p> <p>Interactive passphrase import</p> <pre><code>./lodestar validator import --importKeystores ./validator_keys\n</code></pre> <p>Plaintext passphrase file import</p> <pre><code>./lodestar validator import --importKeystores ./validator_keys --importKeystoresPassword ./password.txt\n</code></pre> <p>Info</p> <p>The interactive passphrase import method will prompt every keystore in the <code>validator_keys</code> folder for import and will ask for the individual password for each keystore. This method will allow you to import multiple keystores with different passwords.</p> <p>The plaintext passphrase file import method will allow  to import all keystores in the <code>validator_keys</code> folder with the same password contained in <code>password.txt</code> for efficiency. </p> <p>Once imported with either method, these keystores will be automatically loaded when you start the validator. To list the imported keystores, use the <code>validator list</code> command.</p>"},{"location":"usage/validator-management/#option-2-import-keys-when-starting-the-validator","title":"Option 2: Import Keys When Starting the Validator","text":"<p>To import keys when you start the validator specify the <code>--importKeystores</code> and <code>--importKeystoresPassword</code> flags with the <code>validator</code> command:</p> <pre><code>./lodestar validator --importKeystores ./validator_keys --importKeystoresPassword ./password.txt\n</code></pre> <p>Warning</p> <p>If you import keys using <code>--importKeystores</code> at runtime (Option 2) any keys loaded to the keystores folder from Option 1 will be ignored.</p>"},{"location":"usage/validator-management/#configuring-the-fee-recipient-address","title":"Configuring the fee recipient address","text":"<p>Post-Merge Ethereum requires validators to set a Fee Recipient which allows you to receive priority fees when proposing blocks. If you do not set this address, your priority fees will be sent to the burn address.</p> <p>Configure your validator client's fee recipient address by using the <code>--suggestedFeeRecipient</code> flag. Ensure you specify an Ethereum address you control. An example of a fee recipient set with the address <code>0xB7576e9d314Df41EC5506494293Afb1bd5D3f65d</code> would add the following flag to their configuration: <code>--suggestedFeeRecipient 0xB7576e9d314Df41EC5506494293Afb1bd5D3f65d</code>.</p> <p>You may choose to use the <code>--strictFeeRecipientCheck</code> flag to enable a strict check of the fee recipient address with the one returned by the beacon node for added reassurance.</p>"},{"location":"usage/validator-management/#submit-a-validator-deposit","title":"Submit a validator deposit","text":"<p>Please use the official tools to perform your deposits</p> <ul> <li><code>staking-deposit-cli</code>: https://github.com/ethereum/staking-deposit-cli</li> <li>Ethereum Foundation launchpad: https://launchpad.ethereum.org</li> </ul>"},{"location":"usage/validator-management/#run-the-validator","title":"Run the validator","text":"<p>To start a Lodestar validator run the command:</p> <pre><code>./lodestar validator --network $NETWORK_NAME\n</code></pre> <p>You should see confirmation that modules have started.</p> <pre><code>Nov-29 10:47:13.647[]                 info: Lodestar network=sepolia, version=v1.2.2/f093b46, commit=f093b468ec3ab0dbbe8e2d2c8175f52ad88aa35f\nNov-29 10:47:13.649[]                 info: Connecting to LevelDB database path=/home/user/.local/share/lodestar/sepolia/validator-db\nNov-29 10:47:51.732[]                 info: 3 local keystores\nNov-29 10:47:51.735[]                 info: 0x800f6be579b31ea950a50be65f7de8f678b23b7466579c01ac26ebf9c19599fb2b446da40ad4fc92c6109fcd6793303f\nNov-29 10:47:51.735[]                 info: 0x81337ebe90d6942d8b61922ea880c4d28ebc745ddc10a1acc85b745a15c6c8754af1a73b1b3483b6a5024b783510b35c\nNov-29 10:47:51.757[]                 info: 0xb95fc0ec39596deee2c4363f57bb4786f5bb8dfb345c1e5b14e2927be482615971d0d81f9a88b3389fac7079b3cb2f46\nNov-29 10:47:51.776[]                 info: Genesis fetched from the beacon node\nNov-29 10:47:51.781[]                 info: Verified connected beacon node and validator have same the config\nNov-29 10:47:51.837[]                 info: Verified connected beacon node and validator have the same genesisValidatorRoot\nNov-29 10:47:51.914[]                 info: Discovered new validators count=100\nNov-29 10:48:00.197[]                 info: Published SyncCommitteeMessage slot=1165140, count=27\nNov-29 10:48:02.296[]                 info: Published attestations slot=1165140, count=6\nNov-29 10:48:08.122[]                 info: Published aggregateAndProofs slot=1165140, index=0, count=2\nNov-29 10:48:12.102[]                 info: Published SyncCommitteeMessage slot=1165141, count=27\nNov-29 10:48:14.236[]                 info: Published attestations slot=1165141, count=4\n</code></pre>"}]}