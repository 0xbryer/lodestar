{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-the-lodestar-documentation","title":"Welcome to the Lodestar documentation","text":"<p>Lodestar is an open-source Ethereum Consensus client and Typescript ecosystem, maintained by ChainSafe Systems</p>"},{"location":"#getting-started","title":"Getting started","text":"<ul> <li>Follow the installation method for source install or Docker install to install Lodestar. Or use our Lodestar Quickstart scripts.</li> <li>Use Lodestar libraries in your next Ethereum Typescript project.</li> <li>Run a beacon node on mainnet or a public testnet.</li> <li>Utilize the whole stack by starting a local testnet.</li> <li>View the Lodestar CLI commands and options</li> <li>Prospective contributors can read the contributing section to understand how we develop and test on Lodestar.</li> <li>If you have questions submit an issue or join us on Discord!</li> <li>Please note our security policy.</li> <li>Sign up to our mailing list for announcements and any critical information about Lodestar.</li> </ul>"},{"location":"#specifications","title":"Specifications","text":"<p>Hardware specifications minimum / recommended, to run the Lodestar client.</p> Minimum Recommended Processor Intel Core i5\u2013760 or AMD FX-8100 Intel Core i7\u20134770 or AMD FX-8310 Memory 4GB RAM 8GB RAM Storage 20GB available space SSD 100GB available space SSD Internet Broadband connection Broadband connection"},{"location":"#about-these-docs","title":"About these docs","text":"<p>This documentation is open source, contribute at Github Lodestar repository /docs.</p>"},{"location":"#need-assistance","title":"Need assistance?","text":"<p>If you have questions about this documentation, feel free to talk to us on our ChainSafe Discord or open an issue and a member of the team or our community will be happy to assist you.</p>"},{"location":"data-retention/","title":"Data Retention","text":"<p>There are two components for an ethereum node database, the execution client and the beacon node. Both need to hold data for a full node to work correctly. In particular the execution node holds state such as wallet information and smart contract code. It also holds the execution blocks with the transaction record. The beacon node is responsible for holding beacon node blocks and state. The beacon state is responsible primarily for the validator information.</p> <p>There are several processes that need to store data for Lodestar. These data sets can grow quite large over time so it is important to understand how to manage them so the host machine can support operations effectively.</p> <pre><code>$executionDir # this changes depending on the execution client\n    \u2514\u2500\u2500 execution-db\n\n$dataDir # specified by --dataDir on the beacon command\n\u251c\u2500\u2500 .log_rotate_audit.json\n\u251c\u2500\u2500 beacon.log # there can be many of these\n\u251c\u2500\u2500 enr\n\u251c\u2500\u2500 peer-id.json\n\u251c\u2500\u2500 chain-db # default if --dbDir not specified\n\u2502   \u2514\u2500\u2500 (db files)\n\u2514\u2500\u2500 peerstore # default if --peerStoreDir not specified\n    \u2514\u2500\u2500 (peerstore files)\n\n$dataDir # specified by --dataDir on the validator command\n\u251c\u2500\u2500 .log_rotate_audit.json\n\u251c\u2500\u2500 validator.log # there can be many of these\n\u251c\u2500\u2500 validator-db # default if --validatorsDbDir not specified\n\u2502   \u2514\u2500\u2500 (db files)\n\u251c\u2500\u2500 proposerConfigs # default if --proposerDir not specified\n\u2502   \u2514\u2500\u2500 (config files)\n\u251c\u2500\u2500 cache # default if --cacheDir not specified\n\u2502   \u2514\u2500\u2500 (cache files)\n\u251c\u2500\u2500 secrets # default if --secretsDir not specified\n\u2502   \u251c\u2500\u2500 0x8e41b969493454318c27ec6fac90645769331c07ebc8db5037...\n\u2502   \u2514\u2500\u2500 0xa329f988c16993768299643d918a2694892c012765d896a16f...\n\u251c\u2500\u2500 keystores # default if --keystoresDir not specified\n\u2502   \u251c\u2500\u2500 0x8e41b969493454318c27ec6fac90645769331c07ebc8db5037...\n\u2502   \u2502   \u2514\u2500\u2500 voting-keystore.json\n\u2502   \u2514\u2500\u2500 0xa329f988c16993768299643d918a2694892c012765d896a16f...\n\u2502       \u2514\u2500\u2500 voting-keystore.json\n\u2514\u2500\u2500 remoteKeys # default if --remoteKeysDir not specified\n    \u2514\u2500\u2500 0xa329f988c16993768299643d918a2694892c012765d896a16f.json\n</code></pre>"},{"location":"data-retention/#data-management","title":"Data Management","text":"<p>Configuring your node to store and prune data is key to success. On average you can expect for the database to grow by the follow amounts:</p> <ul> <li><code>execution-db</code> grows at 2-30GB per week</li> <li><code>chain-db</code> grows at 1GB per month</li> <li><code>validator-db</code> grows at less than 2MB per year, per key (2000 keys = 4GB per year)</li> </ul> <p><code>keystores</code>, <code>keystore-cache</code> and <code>peerstore</code> are not usually very large and are not expected to grow much during normal operation.</p> <p>Logs can also become quite large so please check out the section on log management for more information.</p> <p>There is really only one flag that is needed to manage the data for Lodestar, <code>--dataDir</code>. Other than that handling log management is really the heart of the data management story. Beacon node data is what it is. Depending on the execution client that is chosen, there may be flags to help with data storage growth but that is outside the scope of this document.</p>"},{"location":"introduction/","title":"Introduction","text":"<p>Ethereum is one of the most profoundly important inventions in recent history. It is a decentralized, open-source blockchain featuring smart contract functionality. It is the second-largest cryptocurrency by market capitalization, after Bitcoin, and is the most actively used blockchain. Ethereum was proposed in 2013 by programmer Vitalik Buterin. Development was crowdfunded in 2014, and the network went live on 30 July 2015, with 72 million coins premined. ChainSafe was founded not too long afterwards and has been actively working in the Ethereum space ever since. We are proud to develop Lodestar and to present this documentation as a resource for the Ethereum community.</p>"},{"location":"introduction/#proof-of-stake","title":"Proof of Stake","text":"<p>In Ethereum's Proof of Stake (PoS) model, validators replace miners from the Proof of Work (PoW) system. Validators are Ethereum stakeholders who lock up a portion of their Ether as a stake. The protocol randomly selects these validators to propose new blocks. The chance of being chosen is tied to the size of their stake: the more Ether staked, the higher the probability of being selected to propose the block. Proposers receive transaction fees and block rewards as incentives. Validators are also responsible for voting on the validity of blocks proposed by other validators. However, they face penalties, known as slashing, for actions like double-signing, votes on a block that is not in the majority or going offline, ensuring network integrity and reliability. The PoS mechanism significantly reduces energy consumption compared to PoW, because it does not require extensive computational power. Moreover, PoS tends to facilitate faster transaction validations and block creations, enhancing the overall performance and scalability of the network.</p>"},{"location":"introduction/#consensus-clients","title":"Consensus Clients","text":"<p>In an effort to promote client diversity there are several beacon-nodes being developed. Each is programmed in a different language and by a different team. The following is a list of the current beacon-node clients:</p> <ul> <li>Lodestar</li> <li>Prysm</li> <li>Lighthouse</li> <li>Teku</li> <li>Nimbus</li> </ul>"},{"location":"introduction/#why-client-diversity","title":"Why Client Diversity?","text":"<p>The Ethereum network's robustness is significantly enhanced by its client diversity, whereby multiple, independently-developed clients conforming to a common specification facilitate seamless interaction and function equivalently across nodes. This client variety not only fosters a rich ecosystem but also provides a buffer against network-wide issues stemming from bugs or malicious attacks targeted at particular clients. For instance, during the Shanghai denial-of-service attack in 2016, the diversified client structure enabled the network to withstand the assault, underscoring the resilience afforded by multiple client configurations.</p> <p>On the consensus layer, client distribution is crucial for maintaining network integrity and finality, ensuring transactions are irreversible once validated. A balanced spread of nodes across various clients helps mitigate risks associated with potential bugs or attacks that could, in extreme cases, derail the consensus process or lead to incorrect chain splits, thereby jeopardizing the network's stability and trust. While the data suggests a dominance of Prysm client on the consensus layer, efforts are ongoing to promote a more even distribution among others like Lighthouse, Teku, and Nimbus. Encouraging the adoption of minority clients, bolstering their documentation, and leveraging real-time client diversity dashboards are among the strategies being employed to enhance client diversity, which in turn fortifies the Ethereum consensus layer against adversities and fosters a healthier decentralized network ecosystem.</p> <p>The non-finality event in May 2023 on the Ethereum network posed a significant challenge. The issue arose from attestations for a fork, which necessitated state replays to validate the attestations, causing a notable strain on system resources. As a result, nodes fell out of sync, which deterred the accurate tracking of the actual head of the chain. This situation was exacerbated by a decline in attestations during specific epochs, further hampering the consensus mechanism. The Lodestar team noticed late attestations several weeks prior to the event and implemented a feature that attempted to address such challenges by not processing untimely attestations, and thus not requiring expensive state replays\u200b. While it was done for slightly different reasons, the result was the same. Lodestar was able to follow the chain correctly and helped to stabilize the network. This example underscored the importance of client diversity and network resilience against potential forks and replay attacks. These are considered realistic threats, especially in the context of system complexity like in Ethereum's consensus mechanism.</p>"},{"location":"introduction/#ethereum-reading-list","title":"Ethereum Reading List","text":"<ul> <li>Ethereum Docs</li> <li>Upgrading Ethereum by Ben Edgington</li> <li>Ethereum Book by Andreas M. Antonopoulos and Gavin Wood</li> <li>Ethereum Consensus Specification</li> <li>Casper the Friendly Finality Gadget by Vitalik Buterin and Virgil Griffith</li> <li>LMD Ghost by protolambda</li> </ul>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#supported-versions","title":"Supported Versions","text":"<ul> <li> Lodestar currently undergoes a quick release cycle with regular minor releases published roughly fortnightly.</li> <li> We encourage using the most recently released version before reporting an issue.</li> </ul>"},{"location":"security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<ul> <li> Please, send vulnerability reports to <code>security@chainsafe.io</code>.</li> <li> Please do not file a public ticket mentioning the vulnerability, as doing so could increase the likelihood of the vulnerability being used before a fix has been created, released and installed on the network.</li> </ul>"},{"location":"trouble-shooting/","title":"Trouble Shooting","text":""},{"location":"advanced-topics/block-exploration/","title":"Block Exploration","text":""},{"location":"advanced-topics/doppelganger-detection/","title":"Doppelganger Detection","text":""},{"location":"advanced-topics/migrating-from-other-clients/","title":"Migration From Other Clients","text":""},{"location":"advanced-topics/setting-up-a-testnet/","title":"Setting-Up a Testnet","text":"<p>To quickly test and run Lodestar we recommend starting a local testnet. We recommend a simple configuration of two beacon nodes with multiple validators</p> <p>Terminal 1</p> <p>Run a beacon node as a bootnode, with 8 validators with the following command.</p> <pre><code>./lodestar dev \\\n  --genesisValidators 8 \\\n  --genesisTime 1669713528 \\\n  --startValidators 0..7 \\\n  --enr.ip 127.0.0.1 \\\n  --enr.udp 9000 \\\n  --dataDir &lt;/path/to/node1&gt; \\\n  --reset\n</code></pre> <p><code>--genesisValidators</code> and <code>--genesisTime</code> define the genesis state of the beacon chain. <code>--dataDir</code> defines a path where lodestar should store the beacon state. <code>--enr.ip</code> sets the ENR IP entry for the node (essential for second node to connect via <code>enr</code>) and <code>--enr.udp</code> exposes the <code>discv5</code> discovery service (if you want to connect more than 1 node and enable discovery amongst them via bootnode). Lastly the <code>--reset</code> flag ensures the state is cleared on each restart - which is useful when testing locally.</p> <p>Once the node has started, make a request to <code>curl http://localhost:9596/eth/v1/node/identity</code> and copy the <code>enr</code> value.</p> <p>This would be used to connect from the second node.</p> <p>ENR stands for Ethereum node records, which is a format for conveying p2p connectivity information for Ethereum nodes. For more info see EIP-778.</p> <p>Terminal 2</p> <p>Start the second node without starting any validators and connect to the first node by supplying the copied <code>enr</code> value:</p> <pre><code>./lodestar dev \\\n  --genesisValidators 8 \\\n  --genesisTime 1669713528 \\\n  --dataDir &lt;/path/to/node2&gt; \\\n  --port 9001 \\\n  --rest.port 9597 \\\n  --network.connectToDiscv5Bootnodes true \\\n  --bootnodes &lt;enr value&gt; \\\n  --reset\n</code></pre> <p>By default, lodestar starts as many validators as the number supplied by <code>--genesisValidators</code>. In order to not start any validator, this is overridden by the <code>--startValidators</code> option. Passing a value of <code>0..0</code> means no validators should be started.</p> <p>Also, take note that the values of <code>--genesisValidators</code> and <code>--genesisTime</code> must be the same as the ones passed to the first node in order for the two nodes to have the same beacon chain.</p> <p>Also <code>--port</code> and <code>--rest.port</code> are supplied since the default values will already be in use by the first node.</p> <p>The <code>--network.connectToDiscv5Bootnodes</code> flags needs to be set to true as this is needed to allow connection to boot ENRs on local devnet. The exact ENR of node to connect to is then supplied via the <code>--bootnodes</code> flag.</p> <p>Once the second node starts, you should see an output similar to the following in either of the terminals:</p> <pre><code>Eph 167991/6 6.007 []  info: Searching peers - peers: 1 - slot: 5375718 (skipped 5375718) - head: 0 0xcc67\u20263345 - finalized: 0x0000\u20260000:0\n</code></pre> <p>For further confirmation that both nodes are connected as peers, make a request to the <code>/eth/v1/node/peers</code> endpoint.</p> <p>For example, making the request on the first node via the following command:</p> <p><code>curl http://localhost:9596/eth/v1/node/peers | jq</code></p> <p>will give a result similar to the following:</p> <pre><code>{\n  \"data\": [\n    {\n      \"peer_id\": \"...\",\n      \"enr\": \"\",\n      \"last_seen_p2p_address\": \"....\",\n      \"direction\": \"inbound\",\n      \"state\": \"connected\"\n    }\n  ],\n  \"meta\": {\n    \"count\": 1\n  }\n}\n</code></pre>"},{"location":"advanced-topics/setting-up-a-testnet/#post-merge-local-testnet","title":"Post-Merge local testnet","text":"<p>To set up a local testnet with a Post-Merge configuration, you may need to add the following parameters (in addition to the parameters described above) to your <code>lodestar dev</code> command:</p> <ul> <li><code>--params.ALTAIR_FORK_EPOCH 0</code></li> <li><code>--params.BELLATRIX_FORK_EPOCH 0</code></li> <li><code>--terminal-total-difficulty-override 0</code></li> </ul>"},{"location":"advanced-topics/slashing-protection/","title":"Slashing Protection","text":""},{"location":"beacon-management/beacon-cli/","title":"<code>beacon</code> CLI Command","text":"<p>Run a beacon chain node</p> <p></p>"},{"location":"beacon-management/beacon-cli/#examples","title":"Examples","text":"<p>Run a beacon chain node and connect to the goerli testnet</p> <pre><code>./lodestar beacon --network goerli\n</code></pre> <p></p>"},{"location":"beacon-management/beacon-cli/#beacon-options","title":"<code>beacon</code> Options","text":""},{"location":"beacon-management/beacon-cli/#-datadir","title":"<code>--dataDir</code>","text":"<p>description: Lodestar root data directory</p> <p>type: <code>string</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-network","title":"<code>--network</code>","text":"<p>description: Name of the Ethereum Consensus chain network to join</p> <p>type: <code>string</code></p> <p>choices: \"mainnet\", \"gnosis\", \"goerli\", \"ropsten\", \"sepolia\", \"holesky\", \"chiado\", \"ephemery\", \"dev\"</p> <p>default: <code>\"mainnet\"</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-paramsfile","title":"<code>--paramsFile</code>","text":"<p>description: Network configuration file</p> <p>type: <code>string</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-terminal-total-difficulty-override","title":"<code>--terminal-total-difficulty-override</code>","text":"<p>description: Terminal PoW block TTD override</p> <p>type: <code>string</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-terminal-block-hash-override","title":"<code>--terminal-block-hash-override</code>","text":"<p>description: Terminal PoW block hash override</p> <p>type: <code>string</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-terminal-block-hash-epoch-override","title":"<code>--terminal-block-hash-epoch-override</code>","text":"<p>description: Terminal PoW block hash override activation epoch</p> <p>type: <code>string</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-checkpointsyncurl","title":"<code>--checkpointSyncUrl</code>","text":"<p>description: Server url hosting Beacon Node APIs to fetch weak subjectivity state. Fetch latest finalized by default, else set --wssCheckpoint</p> <p>type: <code>string</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-checkpointstate","title":"<code>--checkpointState</code>","text":"<p>description: Set a checkpoint state to start syncing from</p> <p>type: <code>string</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-wsscheckpoint","title":"<code>--wssCheckpoint</code>","text":"<p>description: Start beacon node off a state at the provided weak subjectivity checkpoint, to be supplied in : format. For example, 0x1234:100 will sync and start off from the weak subjectivity state at checkpoint of epoch 100 with block root 0x1234. <p>type: <code>string</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-forcecheckpointsync","title":"<code>--forceCheckpointSync</code>","text":"<p>description: Force syncing from checkpoint state even if db state is within weak subjectivity period. This helps to avoid long sync times after node has been offline for a while.</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-private","title":"<code>--private</code>","text":"<p>description: Do not send implementation details over p2p identify protocol and in builder, execution engine and eth1 requests</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-validatormonitorlogs","title":"<code>--validatorMonitorLogs</code>","text":"<p>description: Log validator monitor events as info. This requires metrics to be enabled.</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-loglevel","title":"<code>--logLevel</code>","text":"<p>description: Logging verbosity level for emitting logs to terminal</p> <p>type: <code>string</code></p> <p>choices: \"error\", \"warn\", \"info\", \"verbose\", \"debug\", \"trace\"</p> <p>default: <code>\"info\"</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-logfile","title":"<code>--logFile</code>","text":"<p>description: Path to output all logs to a persistent log file, use 'none' to disable</p> <p>type: <code>string</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-logfilelevel","title":"<code>--logFileLevel</code>","text":"<p>description: Logging verbosity level for emitting logs to file</p> <p>type: <code>string</code></p> <p>choices: \"error\", \"warn\", \"info\", \"verbose\", \"debug\", \"trace\"</p> <p>default: <code>\"debug\"</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-logfiledailyrotate","title":"<code>--logFileDailyRotate</code>","text":"<p>description: Daily rotate log files, set to an integer to limit the file count, set to 0 (zero) to disable rotation</p> <p>type: <code>number</code></p> <p>default: <code>5</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-rest","title":"<code>--rest</code>","text":"<p>description: Enable/disable HTTP API</p> <p>type: <code>boolean</code></p> <p>default: <code>true</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-restnamespace","title":"<code>--rest.namespace</code>","text":"<p>description: Pick namespaces to expose for HTTP API. Set to '*' to enable all namespaces</p> <p>type: <code>string[]</code></p> <p>choices: \"beacon\", \"config\", \"debug\", \"events\", \"lightclient\", \"lodestar\", \"node\", \"proof\", \"validator\", \"*\"</p> <p>default: <code>[ [\"beacon\",\"config\",\"events\",\"node\",\"validator\",\"lightclient\"] ]</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-restcors","title":"<code>--rest.cors</code>","text":"<p>description: Configures the Access-Control-Allow-Origin CORS header for HTTP API</p> <p>type: <code>string</code></p> <p>default: <code>\"*\"</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-restaddress","title":"<code>--rest.address</code>","text":"<p>description: Set host for HTTP API</p> <p>type: <code>string</code></p> <p>default: <code>\"127.0.0.1\"</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-restport","title":"<code>--rest.port</code>","text":"<p>description: Set port for HTTP API</p> <p>type: <code>number</code></p> <p>default: <code>9596</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-restswaggerui","title":"<code>--rest.swaggerUI</code>","text":"<p>description: Enable Swagger UI for API exploration at http://{address}:{port}/documentation</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-suggestedfeerecipient","title":"<code>--suggestedFeeRecipient</code>","text":"<p>description: Specify fee recipient default for collecting the EL block fees and rewards (a hex string representing 20 bytes address: ^0x[a-fA-F0-9]{40}$) in case validator fails to update for a validator index before calling <code>produceBlock</code>.</p> <p>type: <code>string</code></p> <p>default: <code>\"0x0000000000000000000000000000000000000000\"</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-emitpayloadattributes","title":"<code>--emitPayloadAttributes</code>","text":"<p>description: Flag to SSE emit execution <code>payloadAttributes</code> before every slot</p> <p>type: <code>boolean</code></p> <p>default: <code>false</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-eth1","title":"<code>--eth1</code>","text":"<p>description: Whether to follow the eth1 chain</p> <p>type: <code>boolean</code></p> <p>default: <code>true</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-eth1providerurls","title":"<code>--eth1.providerUrls</code>","text":"<p>description: Urls to Eth1 node with enabled rpc. If not explicitly provided and execution endpoint provided via execution.urls, it will use execution.urls. Otherwise will try connecting on the specified default(s)</p> <p>type: <code>string[]</code></p> <p>default: <code>[ \"http://localhost:8545\" ]</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-executionurls","title":"<code>--execution.urls</code>","text":"<p>description: Urls to execution client engine API</p> <p>type: <code>string[]</code></p> <p>default: <code>[ \"http://localhost:8551\" ]</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-executiontimeout","title":"<code>--execution.timeout</code>","text":"<p>description: Timeout in milliseconds for execution engine API HTTP client</p> <p>type: <code>number</code></p> <p>default: <code>12000</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-executionretryattempts","title":"<code>--execution.retryAttempts</code>","text":"<p>description: Number of retry attempts when calling execution engine API</p> <p>type: <code>number</code></p> <p>default: <code>3</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-executionretrydelay","title":"<code>--execution.retryDelay</code>","text":"<p>description: Delay time in milliseconds between retries when retrying calls to the execution engine API</p> <p>type: <code>number</code></p> <p>default: <code>2000</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-jwtsecret","title":"<code>--jwtSecret</code>","text":"<p>description: File path to a shared hex-encoded jwt secret which will be used to generate and bundle HS256 encoded jwt tokens for authentication with the EL client's rpc server hosting engine apis. Secret to be exactly same as the one used by the corresponding EL client.</p> <p>type: <code>string</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-jwtid","title":"<code>--jwtId</code>","text":"<p>description: An optional identifier to be set in the id field of the claims included in jwt tokens used for authentication with EL client's rpc server hosting engine apis</p> <p>type: <code>string</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-builder","title":"<code>--builder</code>","text":"<p>description: Enable builder interface</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-builderurl","title":"<code>--builder.url</code>","text":"<p>description: Url hosting the builder API</p> <p>type: <code>string</code></p> <p>default: <code>\"http://localhost:8661\"</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-buildertimeout","title":"<code>--builder.timeout</code>","text":"<p>description: Timeout in milliseconds for builder API HTTP client</p> <p>type: <code>number</code></p> <p>default: <code>12000</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-builderfaultinspectionwindow","title":"<code>--builder.faultInspectionWindow</code>","text":"<p>description: Window to inspect missed slots for enabling/disabling builder circuit breaker</p> <p>type: <code>number</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-builderallowedfaults","title":"<code>--builder.allowedFaults</code>","text":"<p>description: Number of missed slots allowed in the <code>faultInspectionWindow</code> for builder circuit</p> <p>type: <code>number</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-metrics","title":"<code>--metrics</code>","text":"<p>description: Enable the Prometheus metrics HTTP server</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-metricsport","title":"<code>--metrics.port</code>","text":"<p>description: Listen TCP port for the Prometheus metrics HTTP server</p> <p>type: <code>number</code></p> <p>default: <code>8008</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-metricsaddress","title":"<code>--metrics.address</code>","text":"<p>description: Listen address for the Prometheus metrics HTTP server</p> <p>type: <code>string</code></p> <p>default: <code>\"127.0.0.1\"</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-monitoringendpoint","title":"<code>--monitoring.endpoint</code>","text":"<p>description: Enables monitoring service for sending clients stats to the specified endpoint of a remote service (e.g. beaconcha.in)</p> <p>type: <code>string</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-monitoringinterval","title":"<code>--monitoring.interval</code>","text":"<p>description: Interval in milliseconds between sending client stats to the remote service</p> <p>type: <code>number</code></p> <p>default: <code>60000</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-discv5","title":"<code>--discv5</code>","text":"<p>description: Enable discv5</p> <p>type: <code>boolean</code></p> <p>default: <code>true</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-listenaddress","title":"<code>--listenAddress</code>","text":"<p>description: The IPv4 address to listen for p2p UDP and TCP connections</p> <p>type: <code>string</code></p> <p>default: <code>\"0.0.0.0\"</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-port","title":"<code>--port</code>","text":"<p>description: The TCP/UDP port to listen on. The UDP port can be modified by the --discoveryPort flag.</p> <p>type: <code>number</code></p> <p>default: <code>9000</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-discoveryport","title":"<code>--discoveryPort</code>","text":"<p>description: The UDP port that discovery will listen on. Defaults to <code>port</code></p> <p>type: <code>number</code></p> <p>default: <code>port</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-listenaddress6","title":"<code>--listenAddress6</code>","text":"<p>description: The IPv6 address to listen for p2p UDP and TCP connections</p> <p>type: <code>string</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-port6","title":"<code>--port6</code>","text":"<p>description: The TCP/UDP port to listen on. The UDP port can be modified by the --discoveryPort6 flag.</p> <p>type: <code>number</code></p> <p>default: <code>9090</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-discoveryport6","title":"<code>--discoveryPort6</code>","text":"<p>description: The UDP port that discovery will listen on. Defaults to <code>port6</code></p> <p>type: <code>number</code></p> <p>default: <code>port6</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-bootnodes","title":"<code>--bootnodes</code>","text":"<p>description: Bootnodes for discv5 discovery</p> <p>type: <code>string[]</code></p> <p>default: <code>[ \"[]\" ]</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-targetpeers","title":"<code>--targetPeers</code>","text":"<p>description: The target connected peers. Above this number peers will be disconnected</p> <p>type: <code>number</code></p> <p>default: <code>50</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-deterministiclonglivedattnets","title":"<code>--deterministicLongLivedAttnets</code>","text":"<p>description: Use deterministic subnet selection for long-lived subnet subscriptions</p> <p>type: <code>boolean</code></p> <p>default: <code>true</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-subscribeallsubnets","title":"<code>--subscribeAllSubnets</code>","text":"<p>description: Subscribe to all subnets regardless of validator count</p> <p>type: <code>boolean</code></p> <p>default: <code>false</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-disablepeerscoring","title":"<code>--disablePeerScoring</code>","text":"<p>description: Disable peer scoring, used for testing on devnets</p> <p>type: <code>boolean</code></p> <p>default: <code>false</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-mdns","title":"<code>--mdns</code>","text":"<p>description: Enable mdns local peer discovery</p> <p>type: <code>boolean</code></p> <p>default: <code>false</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-enrip","title":"<code>--enr.ip</code>","text":"<p>description: Override ENR IP entry</p> <p>type: <code>string</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-enrtcp","title":"<code>--enr.tcp</code>","text":"<p>description: Override ENR TCP entry</p> <p>type: <code>number</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-enrudp","title":"<code>--enr.udp</code>","text":"<p>description: Override ENR UDP entry</p> <p>type: <code>number</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-enrip6","title":"<code>--enr.ip6</code>","text":"<p>description: Override ENR IPv6 entry</p> <p>type: <code>string</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-enrtcp6","title":"<code>--enr.tcp6</code>","text":"<p>description: Override ENR (IPv6-specific) TCP entry</p> <p>type: <code>number</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-enrudp6","title":"<code>--enr.udp6</code>","text":"<p>description: Override ENR (IPv6-specific) UDP entry</p> <p>type: <code>number</code></p> <p></p>"},{"location":"beacon-management/beacon-cli/#-nat","title":"<code>--nat</code>","text":"<p>description: Allow configuration of non-local addresses</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"beacon-management/mev-and-builder-integration/","title":"MEV &amp; Merge","text":"<p>MEV is a term that refers to the bundling of transactions in one particular order to extract (mostly) arbitrage opportunities on the dApps and decentralized exchanges.</p> <p>And the ones who gets to include these execution payloads (miners before the merge, validators after the merge) in the canonical chain get paid a per-block reward which essentially should be higher than the normal payload inclusion reward (including transactions tips).</p> <p>Currently these happen with miners running forked versions of their favorite execution client, integrating with these \"builders\" but in the post-merge world they get a more native and standard integration with the CL.</p> <p>This is what we in CL land refer to as Builder Api.</p>"},{"location":"beacon-management/mev-and-builder-integration/#lodestar-and-builder-api","title":"Lodestar and Builder API","text":"<p>Lodestar offers builder integration through the spec-ed builder API.</p> <p>This sits in parallel with the execution engine so when enabled, lodestar validator run both flows in parallel when its time to propose for a validator key and currently (naively) picks the builder block in preference to execution if a builder block is fetched (else just proceeds with the execution block).</p>"},{"location":"beacon-management/mev-and-builder-integration/#configure-lodestar-setup-for-mev","title":"Configure Lodestar setup for MEV","text":"<p>All you have to do is:</p> <ol> <li>Provide lodestar beacon node with a Builder endpoint (which corresponds to the network you are running) via these additional flags:    <pre><code>--builder --builder.url &lt;builder/relay/boost url&gt;\n</code></pre></li> <li>Run lodestar validator client with these additional flags    <pre><code>--builder --suggestedFeeRecipient &lt;your ethereum address&gt;\n</code></pre></li> </ol> <p>There are some more builder flags available in lodestar cli (for both beacon and validator) which you may inspect and use.</p> <p>Even though its possible to directly hook lodestar with an external Builder/Relay, its recommended to interface it with the MEV world via local MEV-BOOST multiplexer which can integrate multiple builder/relays for you and provide some payload verification on top, as currently Lodestar assumes this to be a trusted endpoint.</p>"},{"location":"beacon-management/networking/","title":"Networking","text":"<p>Starting up Lodestar will automatically connect it to peers on the network. Peers are found through the discv5 protocol and once peers are established communications happen via gossipsub over libp2p. While not necessary, having a basic understanding of how the various protocols and transport work will help with debugging and troubleshooting as some of the more common challenges come up with firewalls and NAT traversal.</p>"},{"location":"beacon-management/networking/#networking-flags","title":"Networking Flags","text":"<p>Some of the important Lodestar flags related to networking are:</p> <ul> <li><code>--discv5</code></li> <li><code>--listenAddress</code></li> <li><code>--port</code></li> <li><code>--discoveryPort</code></li> <li><code>--listenAddress6</code></li> <li><code>--port6</code></li> <li><code>--discoveryPort6</code></li> <li><code>--bootnodes</code></li> <li><code>--deterministicLongLivedAttnets</code></li> <li><code>--subscribeAllSubnets</code></li> <li><code>--disablePeerScoring</code></li> <li><code>--enr.ip</code></li> <li><code>--enr.tcp</code></li> <li><code>--enr.udp</code></li> <li><code>--enr.ip6</code></li> <li><code>--enr.tcp6</code></li> <li><code>--enr.udp6</code></li> <li><code>--nat</code></li> <li><code>--private</code></li> </ul>"},{"location":"beacon-management/networking/#peer-discovery-discv5","title":"Peer Discovery (Discv5)","text":"<p>In Ethereum, discv5 plays a pivotal role in the peer discovery process, facilitating nodes to find and locate each other in order to form the peer-to-peer network\u200b. The process begins with an interaction between new nodes and bootnodes at start-up. Bootnodes are nodes with hard-coded addresses, or can be overridden via the cli flag <code>--bootnodes</code>, to bootstrap the discovery process\u200b. Through a method called FINDNODE-NODES, a new node establishes a bond with each bootnode, and it returns a list of peers for the new node to connect to. Following this trail, the new node engages through FINDNODE-NODES with the provided peers to further establish a web of connections\u200b.</p> <p>Discv5 operates as a peer advertisement medium in this network, where nodes can act as both providers and consumers of data. Every participating node in the Discv5 protocol discovers peer data from other nodes and later relays it, making the discovery process dynamic and efficient\u200b.</p> <p>Discv5 is designed to be a standalone protocol running via UDP on a dedicated port solely for peer discovery. Peer data is exchanged via self-certified, flexible peer records (ENRs). These key features cater to the Ethereum network\u200b and being a good peer often means running a discv5 worker\u200b. Lodestar offers simple configuration to setup and run a bootnode independently of a beacon node. See the bootnode cli page for more information and configuration options.</p>"},{"location":"beacon-management/networking/#enr","title":"ENR","text":"<p>Ethereum Node Records (ENRs) are a standardized format utilized for peer discovery - see EIP-778 for the specification. An ENR consists of a set of key-value pairs. These pairs include crucial information such as the node's ID, IP address, the port on which it's listening, and the protocols it supports. This information helps other nodes in the network locate and connect to the node.</p> <p>The primary purpose of ENRs is to facilitate node discovery and connectivity in the Ethereum network. Nodes use ENRs to announce their presence and capabilities to other nodes, making it easier to establish and maintain a robust, interconnected network.</p> <p>Note that bootnodes are announced via ENR.</p>"},{"location":"beacon-management/networking/#peer-communication-gossipsub-and-reqresp","title":"Peer Communication (gossipsub and ReqResp)","text":"<p>Gossipsub and ReqResp are the two mechanisms that beacon nodes use to exchange chain data. Gossipsub is used disseminate the most recent relevant data proactively throughout the network. ReqResp is used to directly ask specific peers for specific information (eg: during syncing).</p>"},{"location":"beacon-management/networking/#gossipsub","title":"Gossipsub","text":"<p>GossipSub is a foundational protocol in peer-to-peer (P2P) communication, particularly decentralized networks like Ethereum and IPFS. At its core, GossipSub efficiently propagates data, filtered by topic, through a P2P network. It organizes peers into a collection of overlay networks, each associated with a distinct topic. By routing data through relevant overlay networks based on topics of interest, large amounts of data can be efficiently disseminated without excessive bandwidth, latency, etc.</p> <p>In GossipSub, nodes can subscribe to topics, effectively joining the corresponding overlay to receive messages published to a specific topic. This topic-based structure enables nodes to congregate around shared interests, ensuring that relevant messages are delivered to all interested parties. Each message published to a topic gets disseminated and relayed to all subscribed peers, similar to a chat room.</p> <p>Messages are propagated through a blend of eager-push and lazy-pull models. Specifically, the protocol employs \"mesh links\" to carry full messages actively and \"gossip links\" to carry only message identifiers (lazy-pull propagation model). This hybrid approach allows for both active message propagation and reactive message retrieval\u200b which is an extension of the traditional hub-and-spoke pub/sub model.</p>"},{"location":"beacon-management/networking/#reqresp","title":"ReqResp","text":"<p>ReqResp is the domain of protocols that establish a flexible, on-demand mechanism to retrieve historical data and data missed by gossip. This family of methods, implemented as separate libp2p protocols, operate between a single requester and responder. A method is initiated via a libp2p protocol ID, with the initiator sending a request message and the responder sending a response message. Every method defines a specific request and response message type, and a specific protocol ID. This framework also facilitates streaming responses and robust error handling.</p>"},{"location":"beacon-management/networking/#data-transport-libp2p","title":"Data Transport (libp2p)","text":"<p>Libp2p is a modular and extensible network stack that serves as the data transport layer below both gossipsub and ReqResp and facilitates the lower-level peer-to-peer communications. It provides a suite of protocols for various networking functionalities including network transports, connection encryption and protocol multiplexing. Its modular design allows for the easy addition, replacement, or upgrading of protocols, ensuring an adaptable and evolving networking stack.</p> <p>Libp2p operates at the lower levels of the OSI model, particularly at the Transport and Network layers. Libp2p supports both TCP and UDP protocols for establishing connections and data transmission. Combined with libp2p's modular design it can integrate with various networking technologies to facilitating both routing and addressing.</p>"},{"location":"beacon-management/networking/#firewall-management","title":"Firewall Management","text":"<p>If your setup is behind a firewall there are a few ports that will need to be opened to allow for P2P discovery and communication. There are also some ports that need to be protected to prevent unwanted access or DDOS attacks on your node.</p> <p>Ports that should be opened:</p> <ul> <li>30303/TCP+UDP - Execution layer p2p communication port</li> <li>9000/TCP+UDP - Beacon Node P2P communication port</li> <li>9090/TCP - Lodestar IPv6 P2P communication port</li> <li>13000/TCP - Prysm P2P communication port</li> <li>12000/UDP - Prysm P2P communication port</li> </ul> <p>Ports that should be inbound protected:</p> <ul> <li>9596/TCP - Lodestar Beacon-Node JSON RPC api calls</li> <li>5062/TCP - Lodestar validator key manager api calls</li> <li>18550/TCP - Lodestar MEV Boost/Builder port</li> <li>8008/TCP - Lodestar Metrics</li> <li>5064/TCP - Validator Metrics</li> <li>8545/TCP - Execution client JSON RPC port api calls</li> <li>8551/TCP - Execution engine port for Lodestar to communicate with the execution client</li> </ul>"},{"location":"beacon-management/networking/#nat-traversal","title":"NAT Traversal","text":"<p>Lodestar does not support UPnP. If you are behind a NAT you will need to manually forward the ports listed above.</p>"},{"location":"beacon-management/syncing/","title":"Syncing","text":"<p>Syncing an Ethereum node involves obtaining a copy of the blockchain data from other peers in the network to reach a consistent state. This process is crucial for new nodes or nodes that have been offline and need to catch up with the network's current state. Syncing can be performed for both the execution layer and the beacon chain, although the focus here will be primarily on the beacon chain.</p> <p>Lodestar allows for several methods of syncing however the recommended method is <code>checkpoint sync</code> as it is the fastest and least resource intensive. It is generally a good idea to sync via a <code>--checkpointSyncUrl</code>. If starting at a specific point is necessary specify the <code>--checkpointState</code> that should be where the sync begins.</p>"},{"location":"beacon-management/syncing/#weak-subjectivity","title":"Weak Subjectivity","text":"<p>Weak subjectivity is a concept specific to Proof of Stake (PoS) systems, addressing how new nodes can safely join the network and synchronize with the correct blockchain history. Unlike in Proof of Work (PoW) systems, where a node can trust the longest chain due to the significant computational effort required to forge it, PoS systems present different challenges. In PoS, the cost of creating or altering blockchain history is lower, as it is not based on computational work but on the stake held by validators. This difference raises the possibility that an attacker, if possessing sufficient stake, could feasibly create a misleading version of the blockchain history.</p> <p>The concept of weak subjectivity becomes particularly crucial in two scenarios: when new nodes join the network and when existing nodes reconnect after a significant period of being offline. During these times, the 'weak subjectivity period' defines a time frame within which a client, upon rejoining, can reliably process blocks to reach the consensus chain head. This approach is essential for mitigating the risks associated with long-range attacks, which could occur if nodes relied solely on the longest chain principle without any initial trust in a specific network state.</p> <p>To counter these risks, weak subjectivity requires new nodes to obtain a recent, trusted state of the blockchain from a reliable source upon joining the network. This state includes vital information about the current set of validators and their stakes. Starting from this trusted state helps new nodes avoid being misled by false histories, as any attempt to rewrite history beyond this point would require an unrealistically large portion of the total stake.</p>"},{"location":"beacon-management/syncing/#syncing-methods","title":"Syncing Methods","text":""},{"location":"beacon-management/syncing/#checkpoint-sync","title":"Checkpoint Sync","text":"<p>Checkpoint sync, also known as state sync, allows a node to sync to a specific state checkpoint without having to process all historical data leading up to that point. In the context of a beacon node, this involves syncing to a recent finalized checkpoint, allowing the node to quickly join the network and participate in consensus activities. This is especially beneficial for new nodes or nodes that have been offline for a considerable duration.</p>"},{"location":"beacon-management/syncing/#historical-sync","title":"Historical Sync","text":"<p>Historical sync involves processing all blocks from the genesis block or from a specified starting point to the current block. This is the most comprehensive sync method but also the most resource and time-intensive. For beacon nodes, historical sync is crucial for nodes that aim to maintain a complete history of the beacon chain, facilitating a deeper understanding and analysis of the network's history. In the execution layer, it ensures a complete historical record of the execution layer data.</p>"},{"location":"beacon-management/syncing/#range-sync","title":"Range Sync","text":"<p>Range sync involves syncing blocks within a specified range, beneficial when a node is only temporarily offline and needs to catch up over a short range. In the beacon node context, this entails requesting and processing blocks within a defined range, ensuring the node quickly gets updated to the current network state.</p>"},{"location":"beacon-management/syncing/#backfill-sync","title":"Backfill Sync","text":"<p>This is another version of checkpoint sync that allows a node that has not been historically synchronized to verify data prior to the checkpoint. It is done via downloading a checkpoint and then fetch blocks backwards from that point until the desired data can be verified. It is a relatively inexpensive sync from a cpu perspective because it only checks the block hashes and verifies the proposer signatures along the way.</p>"},{"location":"beacon-management/syncing/#syncing-lodestar","title":"Syncing Lodestar","text":"<p>The implementation of the different syncing styles in Lodestar are actually one of two types under the hood, range sync and unknown-parent sync. Range sync is used when the start point of syncing is known. In the case of historical and checkpoint sync the starting points are well defined, genesis and the last finalized epoch boundary. Snapshot sync is not supported by Lodestar. If the starting point for sync is not known Lodestar must first determine where the starting point is. While the discussion about how that happens is out of scope for this document, the gist is that the beacon node will listen to gossipsub for blocks being broadcast on the network. It will also request <code>MetaData</code> from its peers and use that to start requesting the correct blocks from the network.</p> <p>There are several flags that can be used to configure the sync process.</p> <ul> <li><code>--checkpointSyncUrl</code></li> <li><code>--checkpointState</code></li> <li><code>--wssCheckpoint</code></li> <li><code>--forceCheckpointSync</code></li> </ul>"},{"location":"bootnode/bootnode-cli/","title":"<code>bootnode</code> CLI Command","text":"<p>Run a discv5 bootnode. This will NOT perform any beacon node functions, rather, it will run a discv5 service that allows nodes on the network to discover one another.</p> <p></p>"},{"location":"bootnode/bootnode-cli/#bootnode-options","title":"<code>bootnode</code> Options","text":""},{"location":"bootnode/bootnode-cli/#-datadir","title":"<code>--dataDir</code>","text":"<p>description: Lodestar root data directory</p> <p>type: <code>string</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-network","title":"<code>--network</code>","text":"<p>description: Name of the Ethereum Consensus chain network to join</p> <p>type: <code>string</code></p> <p>choices: \"mainnet\", \"gnosis\", \"goerli\", \"ropsten\", \"sepolia\", \"holesky\", \"chiado\", \"ephemery\", \"dev\"</p> <p>default: <code>\"mainnet\"</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-paramsfile","title":"<code>--paramsFile</code>","text":"<p>description: Network configuration file</p> <p>type: <code>string</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-terminal-total-difficulty-override","title":"<code>--terminal-total-difficulty-override</code>","text":"<p>description: Terminal PoW block TTD override</p> <p>type: <code>string</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-terminal-block-hash-override","title":"<code>--terminal-block-hash-override</code>","text":"<p>description: Terminal PoW block hash override</p> <p>type: <code>string</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-terminal-block-hash-epoch-override","title":"<code>--terminal-block-hash-epoch-override</code>","text":"<p>description: Terminal PoW block hash override activation epoch</p> <p>type: <code>string</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-listenaddress","title":"<code>--listenAddress</code>","text":"<p>description: The IPv4 address to listen for discv5 connections</p> <p>type: <code>string</code></p> <p>default: <code>\"0.0.0.0\"</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-port","title":"<code>--port</code>","text":"<p>description: The UDP port to listen on</p> <p>type: <code>number</code></p> <p>default: <code>9000</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-listenaddress6","title":"<code>--listenAddress6</code>","text":"<p>description: The IPv6 address to listen for discv5 connections</p> <p>type: <code>string</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-port6","title":"<code>--port6</code>","text":"<p>description: The UDP port to listen on</p> <p>type: <code>number</code></p> <p>default: <code>9090</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-bootnodes","title":"<code>--bootnodes</code>","text":"<p>description: Additional bootnodes for discv5 discovery</p> <p>type: <code>string[]</code></p> <p>default: <code>[ \"[]\" ]</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-bootnodesfile","title":"<code>--bootnodesFile</code>","text":"<p>description: Additional bootnodes for discv5 discovery file path</p> <p>type: <code>string</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-persistnetworkidentity","title":"<code>--persistNetworkIdentity</code>","text":"<p>description: Whether to reuse the same peer-id across restarts</p> <p>type: <code>boolean</code></p> <p>default: <code>true</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-enrip","title":"<code>--enr.ip</code>","text":"<p>description: Override ENR IP entry</p> <p>type: <code>string</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-enrudp","title":"<code>--enr.udp</code>","text":"<p>description: Override ENR UDP entry</p> <p>type: <code>number</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-enrip6","title":"<code>--enr.ip6</code>","text":"<p>description: Override ENR IPv6 entry</p> <p>type: <code>string</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-enrudp6","title":"<code>--enr.udp6</code>","text":"<p>description: Override ENR (IPv6-specific) UDP entry</p> <p>type: <code>number</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-nat","title":"<code>--nat</code>","text":"<p>description: Allow ENR configuration of non-local addresses</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-loglevel","title":"<code>--logLevel</code>","text":"<p>description: Logging verbosity level for emitting logs to terminal</p> <p>type: <code>string</code></p> <p>choices: \"error\", \"warn\", \"info\", \"verbose\", \"debug\", \"trace\"</p> <p>default: <code>\"info\"</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-logfile","title":"<code>--logFile</code>","text":"<p>description: Path to output all logs to a persistent log file, use 'none' to disable</p> <p>type: <code>string</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-logfilelevel","title":"<code>--logFileLevel</code>","text":"<p>description: Logging verbosity level for emitting logs to file</p> <p>type: <code>string</code></p> <p>choices: \"error\", \"warn\", \"info\", \"verbose\", \"debug\", \"trace\"</p> <p>default: <code>\"debug\"</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-logfiledailyrotate","title":"<code>--logFileDailyRotate</code>","text":"<p>description: Daily rotate log files, set to an integer to limit the file count, set to 0 (zero) to disable rotation</p> <p>type: <code>number</code></p> <p>default: <code>5</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-metrics","title":"<code>--metrics</code>","text":"<p>description: Enable the Prometheus metrics HTTP server</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-metricsport","title":"<code>--metrics.port</code>","text":"<p>description: Listen TCP port for the Prometheus metrics HTTP server</p> <p>type: <code>number</code></p> <p>default: <code>8008</code></p> <p></p>"},{"location":"bootnode/bootnode-cli/#-metricsaddress","title":"<code>--metrics.address</code>","text":"<p>description: Listen address for the Prometheus metrics HTTP server</p> <p>type: <code>string</code></p> <p>default: <code>\"127.0.0.1\"</code></p> <p></p>"},{"location":"contribution/depgraph/","title":"Dependency Graph","text":""},{"location":"contribution/depgraph/#lodestar-monorepo-dependency-graph","title":"Lodestar monorepo dependency graph","text":"<p>This is a diagram of the various <code>lodestar-*</code> packages in the Lodestar monorepo and how they fit together:</p> <p>Info</p> <p>note: this dependency graph only applies to dependencies as they are used in the <code>src/</code> folders of each package, not in <code>test/</code></p> graph TD     lodestar[\"lodestar\"]:::nodemodule     cli[\"lodestar-cli\"]:::nodemodule     config[\"lodestar-config\"]:::nodemodule     db[\"lodestar-db\"]:::nodemodule     fork-choice[\"lodestar-fork-choice\"]:::nodemodule     params[\"lodestar-params\"]:::nodemodule     types[\"lodestar-types\"]:::nodemodule     utils[\"lodestar-utils\"]:::nodemodule     validator[\"lodestar-validator\"]:::nodemodule     state-trans[\"lodestar-state-transition\"]:::nodemodule      params--&gt;config     params--&gt;types      types--&gt;lodestar     types--&gt;cli     types--&gt;config     types--&gt;validator     types--&gt;fork-choice      config--&gt;lodestar     config--&gt;cli     config--&gt;validator     config--&gt;fork-choice     config--&gt;state-trans     config--&gt;db      utils--&gt;lodestar     utils--&gt;db     utils--&gt;cli     utils--&gt;validator     utils--&gt;fork-choice     utils--&gt;state-trans      state-trans--&gt;lodestar     state-trans--&gt;validator     state-trans--&gt;fork-choice      db--&gt;lodestar     db--&gt;validator      fork-choice--&gt;lodestar      lodestar--&gt;cli     validator--&gt;cli      click cli \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/cli\"     click lodestar \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/beacon-node\"     click validator \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/validator\"     click db \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/db\"     click params \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/params\"     click state-trans \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/state-transition\"     click fork-choice \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/fork-choice\"     click types \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/types\"     click utils \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/utils\"     click config \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/config\"      classDef nodemodule fill:grey,stroke-width:2px,stroke:black,color:white;     linkStyle default stroke:grey, fill:none,stroke-width:1.5px;  <p>For a list of all the packages in the monorepo and a description for each, click here.</p> <p>Let's talk about how each package fits together in finer detail, from top to bottom, following the chart.</p>"},{"location":"contribution/depgraph/#lodestarparams","title":"<code>@lodestar/params</code>","text":"<p>@lodestar/params contains the parameters for configuring an Ethereum Consensus network. For example, the mainnet params</p>"},{"location":"contribution/depgraph/#lodestartypes","title":"<code>@lodestar/types</code>","text":"<p>@lodestar/types contains Ethereum Consensus ssz types and data structures.</p>"},{"location":"contribution/depgraph/#lodestarconfig","title":"<code>@lodestar/config</code>","text":"<p>@lodestar/config combines <code>@lodestar/params</code> and <code>@lodestar/types</code> together to be used as a single config object across the other Lodestar packages.</p>"},{"location":"contribution/depgraph/#lodestarutils","title":"<code>@lodestar/utils</code>","text":"<p>@lodestar/utils contains various utilities that are common among the various Lodestar monorepo packages.</p>"},{"location":"contribution/depgraph/#lodestarstate-transition","title":"<code>@lodestar/state-transition</code>","text":"<p>@lodestar/state-transition contains the Lodestar implementation of the beacon state transition function, which is used by <code>@lodestar/beacon-node</code> to perform the actual beacon state transition. This package also contains various functions used to calculate info about the beacon chain (such as <code>computeEpochAtSlot</code>) which are used by <code>@lodestar/fork-choice</code> and <code>@lodestar/validator</code></p>"},{"location":"contribution/depgraph/#lodestardb","title":"<code>@lodestar/db</code>","text":"<p>@lodestar/db is where all persistent data about the beacon node is stored. Any package that needs to read or write persistent beacon node data depends on <code>lodestar-db</code>.</p>"},{"location":"contribution/depgraph/#lodestarfork-choice","title":"<code>@lodestar/fork-choice</code>","text":"<p>@lodestar/fork-choice holds the methods for reading/writing the fork choice DAG. The <code>@lodestar/beacon-node</code> package is the sole consumer of this package because the beacon node itself is what controls when the fork choice DAG is updated. For a good explanation on how the fork choice itself works, see the annotated fork choice spec. This is an annotated version of the Ethereum Consensus fork choice spec which <code>lodestar-fork-choice</code> is based on.</p>"},{"location":"contribution/depgraph/#lodestarvalidator","title":"<code>@lodestar/validator</code>","text":"<p>@lodestar/validator contains the validator client. The sole consumer of this package is <code>@chainsafe/lodestar</code>, which provides CLI access to run and configure the validator client. However, the validator client communicates to a REST API that is contained in <code>@lodestar/beacon-node</code> (specifically in the <code>api</code> module) to perform the validator duties.</p>"},{"location":"contribution/depgraph/#lodestarbeacon-node","title":"<code>@lodestar/beacon-node</code>","text":"<p>@lodestar/beacon-node contains the actual beacon node process itself, which is the aggregate of all the above packages and the \"brain\" of the Lodestar beacon chain implementation. All of the node modules live in this package as well.</p>"},{"location":"contribution/depgraph/#chainsafelodestar","title":"<code>@chainsafe/lodestar</code>","text":"<p>@chainsafe/lodestar combines everything together for CLI usage and configuration of the beacon node and validator.</p>"},{"location":"contribution/dev-cli/","title":"<code>dev</code> CLI Command","text":"<p>Quickly bootstrap a beacon node and multiple validators. Use for development and testing</p> <p></p>"},{"location":"contribution/dev-cli/#examples","title":"Examples","text":"<p>Start a single beacon node with 8 interop validators</p> <pre><code>./lodestar dev --genesisValidators 8 --reset\n</code></pre> <p></p>"},{"location":"contribution/dev-cli/#dev-options","title":"<code>dev</code> Options","text":""},{"location":"contribution/dev-cli/#-datadir","title":"<code>--dataDir</code>","text":"<p>description: Lodestar root data directory</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-network","title":"<code>--network</code>","text":"<p>description: Name of the Ethereum Consensus chain network to join</p> <p>type: <code>string</code></p> <p>choices: \"mainnet\", \"gnosis\", \"goerli\", \"ropsten\", \"sepolia\", \"holesky\", \"chiado\", \"ephemery\", \"dev\"</p> <p>default: <code>\"mainnet\"</code></p> <p></p>"},{"location":"contribution/dev-cli/#-paramsfile","title":"<code>--paramsFile</code>","text":"<p>description: Network configuration file</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-terminal-total-difficulty-override","title":"<code>--terminal-total-difficulty-override</code>","text":"<p>description: Terminal PoW block TTD override</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-terminal-block-hash-override","title":"<code>--terminal-block-hash-override</code>","text":"<p>description: Terminal PoW block hash override</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-terminal-block-hash-epoch-override","title":"<code>--terminal-block-hash-epoch-override</code>","text":"<p>description: Terminal PoW block hash override activation epoch</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-checkpointsyncurl","title":"<code>--checkpointSyncUrl</code>","text":"<p>description: Server url hosting Beacon Node APIs to fetch weak subjectivity state. Fetch latest finalized by default, else set --wssCheckpoint</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-checkpointstate","title":"<code>--checkpointState</code>","text":"<p>description: Set a checkpoint state to start syncing from</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-wsscheckpoint","title":"<code>--wssCheckpoint</code>","text":"<p>description: Start beacon node off a state at the provided weak subjectivity checkpoint, to be supplied in : format. For example, 0x1234:100 will sync and start off from the weak subjectivity state at checkpoint of epoch 100 with block root 0x1234. <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-forcecheckpointsync","title":"<code>--forceCheckpointSync</code>","text":"<p>description: Force syncing from checkpoint state even if db state is within weak subjectivity period. This helps to avoid long sync times after node has been offline for a while.</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"contribution/dev-cli/#-private","title":"<code>--private</code>","text":"<p>description: Do not send implementation details over p2p identify protocol and in builder, execution engine and eth1 requests</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"contribution/dev-cli/#-validatormonitorlogs","title":"<code>--validatorMonitorLogs</code>","text":"<p>description: Log validator monitor events as info. This requires metrics to be enabled.</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"contribution/dev-cli/#-loglevel","title":"<code>--logLevel</code>","text":"<p>description: Logging verbosity level for emitting logs to terminal</p> <p>type: <code>string</code></p> <p>choices: \"error\", \"warn\", \"info\", \"verbose\", \"debug\", \"trace\"</p> <p>default: <code>\"info\"</code></p> <p></p>"},{"location":"contribution/dev-cli/#-logfile","title":"<code>--logFile</code>","text":"<p>description: Path to output all logs to a persistent log file, use 'none' to disable</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-logfilelevel","title":"<code>--logFileLevel</code>","text":"<p>description: Logging verbosity level for emitting logs to file</p> <p>type: <code>string</code></p> <p>choices: \"error\", \"warn\", \"info\", \"verbose\", \"debug\", \"trace\"</p> <p>default: <code>\"debug\"</code></p> <p></p>"},{"location":"contribution/dev-cli/#-logfiledailyrotate","title":"<code>--logFileDailyRotate</code>","text":"<p>description: Daily rotate log files, set to an integer to limit the file count, set to 0 (zero) to disable rotation</p> <p>type: <code>number</code></p> <p>default: <code>5</code></p> <p></p>"},{"location":"contribution/dev-cli/#-rest","title":"<code>--rest</code>","text":"<p>description: Enable/disable HTTP API</p> <p>type: <code>boolean</code></p> <p>default: <code>true</code></p> <p></p>"},{"location":"contribution/dev-cli/#-restnamespace","title":"<code>--rest.namespace</code>","text":"<p>description: Pick namespaces to expose for HTTP API. Set to '*' to enable all namespaces</p> <p>type: <code>string[]</code></p> <p>choices: \"beacon\", \"config\", \"debug\", \"events\", \"lightclient\", \"lodestar\", \"node\", \"proof\", \"validator\", \"*\"</p> <p>default: <code>[ [\"beacon\",\"config\",\"events\",\"node\",\"validator\",\"lightclient\"] ]</code></p> <p></p>"},{"location":"contribution/dev-cli/#-restcors","title":"<code>--rest.cors</code>","text":"<p>description: Configures the Access-Control-Allow-Origin CORS header for HTTP API</p> <p>type: <code>string</code></p> <p>default: <code>\"*\"</code></p> <p></p>"},{"location":"contribution/dev-cli/#-restaddress","title":"<code>--rest.address</code>","text":"<p>description: Set host for HTTP API</p> <p>type: <code>string</code></p> <p>default: <code>\"127.0.0.1\"</code></p> <p></p>"},{"location":"contribution/dev-cli/#-restport","title":"<code>--rest.port</code>","text":"<p>description: Set port for HTTP API</p> <p>type: <code>number</code></p> <p>default: <code>9596</code></p> <p></p>"},{"location":"contribution/dev-cli/#-restswaggerui","title":"<code>--rest.swaggerUI</code>","text":"<p>description: Enable Swagger UI for API exploration at http://{address}:{port}/documentation</p> <p>type: <code>boolean</code></p> <p>default: <code>true</code></p> <p></p>"},{"location":"contribution/dev-cli/#-suggestedfeerecipient","title":"<code>--suggestedFeeRecipient</code>","text":"<p>description: Specify fee recipient default for collecting the EL block fees and rewards (a hex string representing 20 bytes address: ^0x[a-fA-F0-9]{40}$). It would be possible (WIP) to override this per validator key using config or key manager API. Only used post merge.</p> <p>type: <code>string</code></p> <p>default: <code>\"0x0000000000000000000000000000000000000000\"</code></p> <p></p>"},{"location":"contribution/dev-cli/#-emitpayloadattributes","title":"<code>--emitPayloadAttributes</code>","text":"<p>description: Flag to SSE emit execution <code>payloadAttributes</code> before every slot</p> <p>type: <code>boolean</code></p> <p>default: <code>false</code></p> <p></p>"},{"location":"contribution/dev-cli/#-eth1","title":"<code>--eth1</code>","text":"<p>description: Whether to follow the eth1 chain</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"contribution/dev-cli/#-eth1providerurls","title":"<code>--eth1.providerUrls</code>","text":"<p>description: Urls to Eth1 node with enabled rpc. If not explicitly provided and execution endpoint provided via execution.urls, it will use execution.urls. Otherwise will try connecting on the specified default(s)</p> <p>type: <code>string[]</code></p> <p>default: <code>[ \"http://localhost:8545\" ]</code></p> <p></p>"},{"location":"contribution/dev-cli/#-executionurls","title":"<code>--execution.urls</code>","text":"<p>description: Urls to execution client engine API</p> <p>type: <code>string[]</code></p> <p>default: <code>[ \"http://localhost:8551\" ]</code></p> <p></p>"},{"location":"contribution/dev-cli/#-executiontimeout","title":"<code>--execution.timeout</code>","text":"<p>description: Timeout in milliseconds for execution engine API HTTP client</p> <p>type: <code>number</code></p> <p>default: <code>12000</code></p> <p></p>"},{"location":"contribution/dev-cli/#-executionretryattempts","title":"<code>--execution.retryAttempts</code>","text":"<p>description: Number of retry attempts when calling execution engine API</p> <p>type: <code>number</code></p> <p>default: <code>3</code></p> <p></p>"},{"location":"contribution/dev-cli/#-executionretrydelay","title":"<code>--execution.retryDelay</code>","text":"<p>description: Delay time in milliseconds between retries when retrying calls to the execution engine API</p> <p>type: <code>number</code></p> <p>default: <code>2000</code></p> <p></p>"},{"location":"contribution/dev-cli/#-jwtsecret","title":"<code>--jwtSecret</code>","text":"<p>description: File path to a shared hex-encoded jwt secret which will be used to generate and bundle HS256 encoded jwt tokens for authentication with the EL client's rpc server hosting engine apis. Secret to be exactly same as the one used by the corresponding EL client.</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-jwtid","title":"<code>--jwtId</code>","text":"<p>description: An optional identifier to be set in the id field of the claims included in jwt tokens used for authentication with EL client's rpc server hosting engine apis</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-builder","title":"<code>--builder</code>","text":"<p>description: An alias for <code>--builder.selection maxprofit</code> for the builder flow, ignored if <code>--builder.selection</code> is explicitly provided</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"contribution/dev-cli/#-builderurl","title":"<code>--builder.url</code>","text":"<p>description: Url hosting the builder API</p> <p>type: <code>string</code></p> <p>default: <code>\"http://localhost:8661\"</code></p> <p></p>"},{"location":"contribution/dev-cli/#-buildertimeout","title":"<code>--builder.timeout</code>","text":"<p>description: Timeout in milliseconds for builder API HTTP client</p> <p>type: <code>number</code></p> <p>default: <code>12000</code></p> <p></p>"},{"location":"contribution/dev-cli/#-builderfaultinspectionwindow","title":"<code>--builder.faultInspectionWindow</code>","text":"<p>description: Window to inspect missed slots for enabling/disabling builder circuit breaker</p> <p>type: <code>number</code></p> <p></p>"},{"location":"contribution/dev-cli/#-builderallowedfaults","title":"<code>--builder.allowedFaults</code>","text":"<p>description: Number of missed slots allowed in the <code>faultInspectionWindow</code> for builder circuit</p> <p>type: <code>number</code></p> <p></p>"},{"location":"contribution/dev-cli/#-metrics","title":"<code>--metrics</code>","text":"<p>description: Enable the Prometheus metrics HTTP server</p> <p>type: <code>boolean</code></p> <p>default: <code>false</code></p> <p></p>"},{"location":"contribution/dev-cli/#-metricsport","title":"<code>--metrics.port</code>","text":"<p>description: Listen TCP port for the Prometheus metrics HTTP server</p> <p>type: <code>number</code></p> <p>default: <code>5064</code></p> <p></p>"},{"location":"contribution/dev-cli/#-metricsaddress","title":"<code>--metrics.address</code>","text":"<p>description: Listen address for the Prometheus metrics HTTP server</p> <p>type: <code>string</code></p> <p>default: <code>\"127.0.0.1\"</code></p> <p></p>"},{"location":"contribution/dev-cli/#-monitoringendpoint","title":"<code>--monitoring.endpoint</code>","text":"<p>description: Enables monitoring service for sending clients stats to the specified endpoint of a remote service (e.g. beaconcha.in)</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-monitoringinterval","title":"<code>--monitoring.interval</code>","text":"<p>description: Interval in milliseconds between sending client stats to the remote service</p> <p>type: <code>number</code></p> <p>default: <code>60000</code></p> <p></p>"},{"location":"contribution/dev-cli/#-discv5","title":"<code>--discv5</code>","text":"<p>description: Enable discv5</p> <p>type: <code>boolean</code></p> <p>default: <code>true</code></p> <p></p>"},{"location":"contribution/dev-cli/#-listenaddress","title":"<code>--listenAddress</code>","text":"<p>description: The IPv4 address to listen for p2p UDP and TCP connections</p> <p>type: <code>string</code></p> <p>default: <code>\"0.0.0.0\"</code></p> <p></p>"},{"location":"contribution/dev-cli/#-port","title":"<code>--port</code>","text":"<p>description: The TCP/UDP port to listen on. The UDP port can be modified by the --discoveryPort flag.</p> <p>type: <code>number</code></p> <p>default: <code>9000</code></p> <p></p>"},{"location":"contribution/dev-cli/#-discoveryport","title":"<code>--discoveryPort</code>","text":"<p>description: The UDP port that discovery will listen on. Defaults to <code>port</code></p> <p>type: <code>number</code></p> <p>default: <code>port</code></p> <p></p>"},{"location":"contribution/dev-cli/#-listenaddress6","title":"<code>--listenAddress6</code>","text":"<p>description: The IPv6 address to listen for p2p UDP and TCP connections</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-port6","title":"<code>--port6</code>","text":"<p>description: The TCP/UDP port to listen on. The UDP port can be modified by the --discoveryPort6 flag.</p> <p>type: <code>number</code></p> <p>default: <code>9090</code></p> <p></p>"},{"location":"contribution/dev-cli/#-discoveryport6","title":"<code>--discoveryPort6</code>","text":"<p>description: The UDP port that discovery will listen on. Defaults to <code>port6</code></p> <p>type: <code>number</code></p> <p>default: <code>port6</code></p> <p></p>"},{"location":"contribution/dev-cli/#-bootnodes","title":"<code>--bootnodes</code>","text":"<p>description: Bootnodes for discv5 discovery</p> <p>type: <code>string[]</code></p> <p>default: <code>[ \"[]\" ]</code></p> <p></p>"},{"location":"contribution/dev-cli/#-targetpeers","title":"<code>--targetPeers</code>","text":"<p>description: The target connected peers. Above this number peers will be disconnected</p> <p>type: <code>number</code></p> <p>default: <code>50</code></p> <p></p>"},{"location":"contribution/dev-cli/#-deterministiclonglivedattnets","title":"<code>--deterministicLongLivedAttnets</code>","text":"<p>description: Use deterministic subnet selection for long-lived subnet subscriptions</p> <p>type: <code>boolean</code></p> <p>default: <code>true</code></p> <p></p>"},{"location":"contribution/dev-cli/#-subscribeallsubnets","title":"<code>--subscribeAllSubnets</code>","text":"<p>description: Subscribe to all subnets regardless of validator count</p> <p>type: <code>boolean</code></p> <p>default: <code>false</code></p> <p></p>"},{"location":"contribution/dev-cli/#-disablepeerscoring","title":"<code>--disablePeerScoring</code>","text":"<p>description: Disable peer scoring, used for testing on devnets</p> <p>type: <code>boolean</code></p> <p>default: <code>false</code></p> <p></p>"},{"location":"contribution/dev-cli/#-mdns","title":"<code>--mdns</code>","text":"<p>description: Enable mdns local peer discovery</p> <p>type: <code>boolean</code></p> <p>default: <code>false</code></p> <p></p>"},{"location":"contribution/dev-cli/#-enrip","title":"<code>--enr.ip</code>","text":"<p>description: Override ENR IP entry</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-enrtcp","title":"<code>--enr.tcp</code>","text":"<p>description: Override ENR TCP entry</p> <p>type: <code>number</code></p> <p></p>"},{"location":"contribution/dev-cli/#-enrudp","title":"<code>--enr.udp</code>","text":"<p>description: Override ENR UDP entry</p> <p>type: <code>number</code></p> <p></p>"},{"location":"contribution/dev-cli/#-enrip6","title":"<code>--enr.ip6</code>","text":"<p>description: Override ENR IPv6 entry</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-enrtcp6","title":"<code>--enr.tcp6</code>","text":"<p>description: Override ENR (IPv6-specific) TCP entry</p> <p>type: <code>number</code></p> <p></p>"},{"location":"contribution/dev-cli/#-enrudp6","title":"<code>--enr.udp6</code>","text":"<p>description: Override ENR (IPv6-specific) UDP entry</p> <p>type: <code>number</code></p> <p></p>"},{"location":"contribution/dev-cli/#-nat","title":"<code>--nat</code>","text":"<p>description: Allow configuration of non-local addresses</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"contribution/dev-cli/#-keymanager","title":"<code>--keymanager</code>","text":"<p>description: Enable key manager API server</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"contribution/dev-cli/#-keymanagerauthenabled","title":"<code>--keymanager.authEnabled</code>","text":"<p>description: Enable token bearer authentication for key manager API server</p> <p>type: <code>boolean</code></p> <p>default: <code>true</code></p> <p></p>"},{"location":"contribution/dev-cli/#-keymanagerport","title":"<code>--keymanager.port</code>","text":"<p>description: Set port for key manager API</p> <p>type: <code>number</code></p> <p>default: <code>5062</code></p> <p></p>"},{"location":"contribution/dev-cli/#-keymanageraddress","title":"<code>--keymanager.address</code>","text":"<p>description: Set host for key manager API</p> <p>type: <code>string</code></p> <p>default: <code>\"127.0.0.1\"</code></p> <p></p>"},{"location":"contribution/dev-cli/#-keymanagercors","title":"<code>--keymanager.cors</code>","text":"<p>description: Configures the Access-Control-Allow-Origin CORS header for key manager API</p> <p>type: <code>string</code></p> <p>default: <code>\"*\"</code></p> <p></p>"},{"location":"contribution/dev-cli/#-beaconnodes","title":"<code>--beaconNodes</code>","text":"<p>description: Addresses to connect to BeaconNode</p> <p>type: <code>string[]</code></p> <p>default: <code>[ \"http://127.0.0.1:9596\" ]</code></p> <p></p>"},{"location":"contribution/dev-cli/#-force","title":"<code>--force</code>","text":"<p>description: Open validators even if there's a lockfile. Use with caution</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"contribution/dev-cli/#-graffiti","title":"<code>--graffiti</code>","text":"<p>description: Specify your custom graffiti to be included in blocks (plain UTF8 text, 32 characters max)</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-proposersettingsfile","title":"<code>--proposerSettingsFile</code>","text":"<p>description: A yaml file to specify detailed default and per validator public key customized proposer configs. PS: This feature and its format is in alpha and subject to change</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-strictfeerecipientcheck","title":"<code>--strictFeeRecipientCheck</code>","text":"<p>description: Enable strict checking of the validator's <code>feeRecipient</code> with the one returned by engine</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"contribution/dev-cli/#-defaultgaslimit","title":"<code>--defaultGasLimit</code>","text":"<p>description: Suggested gas limit to the engine/builder for building execution payloads. Only used post merge.</p> <p>type: <code>number</code></p> <p>default: <code>30000000</code></p> <p></p>"},{"location":"contribution/dev-cli/#-builderselection","title":"<code>--builder.selection</code>","text":"<p>description: Builder block selection strategy <code>maxprofit</code>, <code>builderalways</code>, <code>builderonly</code> or <code>executiononly</code></p> <p>type: <code>string</code></p> <p>default: <code>\"executiononly\"</code></p> <p></p>"},{"location":"contribution/dev-cli/#-builderboostfactor","title":"<code>--builder.boostFactor</code>","text":"<p>description: Percentage multiplier the block producing beacon node must apply to boost (&gt;100) or dampen (&lt;100) builder block value for selection against execution block. The multiplier is ignored if <code>--builder.selection</code> is set to anything other than <code>maxprofit</code></p> <p>type: <code>string</code></p> <p>default: <code>\"100\"</code></p> <p></p>"},{"location":"contribution/dev-cli/#-useproduceblockv3","title":"<code>--useProduceBlockV3</code>","text":"<p>description: Enable/disable usage of produceBlockV3 for block production, is auto enabled on deneb+ blocks</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"contribution/dev-cli/#-broadcastvalidation","title":"<code>--broadcastValidation</code>","text":"<p>description: Validations to be run by beacon node for the signed block prior to publishing</p> <p>type: <code>string</code></p> <p>default: <code>\"gossip\"</code></p> <p></p>"},{"location":"contribution/dev-cli/#-blindedlocal","title":"<code>--blindedLocal</code>","text":"<p>description: Request fetching local block in blinded format for produceBlockV3</p> <p>type: <code>string</code></p> <p>default: <code>\"false\"</code></p> <p></p>"},{"location":"contribution/dev-cli/#-importkeystores","title":"<code>--importKeystores</code>","text":"<p>description: Path(s) to a directory or single file path to validator keystores, i.e. Launchpad validators</p> <p>type: <code>string[]</code></p> <p>default: <code>[ \"./keystores/*.json\" ]</code></p> <p></p>"},{"location":"contribution/dev-cli/#-importkeystorespassword","title":"<code>--importKeystoresPassword</code>","text":"<p>description: Path to a file with password to decrypt all keystores from <code>importKeystores</code> option</p> <p>type: <code>string</code></p> <p>default: <code>\"./password.txt\"</code></p> <p></p>"},{"location":"contribution/dev-cli/#-doppelgangerprotection","title":"<code>--doppelgangerProtection</code>","text":"<p>description: Enables Doppelganger protection</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"contribution/dev-cli/#-externalsignerurl","title":"<code>--externalSigner.url</code>","text":"<p>description: URL to connect to an external signing server</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-externalsignerpubkeys","title":"<code>--externalSigner.pubkeys</code>","text":"<p>description: List of validator public keys used by an external signer. May also provide a single string of comma-separated public keys</p> <p>type: <code>string[]</code></p> <p></p>"},{"location":"contribution/dev-cli/#-externalsignerfetch","title":"<code>--externalSigner.fetch</code>","text":"<p>description: Fetch the list of public keys to validate from an external signer. Cannot be used in combination with <code>--externalSigner.pubkeys</code></p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"contribution/dev-cli/#-distributed","title":"<code>--distributed</code>","text":"<p>description: Enables specific features required to run as part of a distributed validator cluster</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"contribution/dev-cli/#-genesiseth1hash","title":"<code>--genesisEth1Hash</code>","text":"<p>description: If present it will create genesis with this eth1 hash.</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-genesisvalidators","title":"<code>--genesisValidators</code>","text":"<p>description: If present it will create genesis with interop validators and start chain.</p> <p>type: <code>number</code></p> <p>default: <code>8</code></p> <p></p>"},{"location":"contribution/dev-cli/#-startvalidators","title":"<code>--startValidators</code>","text":"<p>description: Start interop validators in inclusive range with notation '0..7'</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/dev-cli/#-genesistime","title":"<code>--genesisTime</code>","text":"<p>description: genesis_time to initialize interop genesis state</p> <p>type: <code>number</code></p> <p>default: <code>now</code></p> <p></p>"},{"location":"contribution/dev-cli/#-reset","title":"<code>--reset</code>","text":"<p>description: To delete chain and validator directories</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"contribution/dev-cli/#-dumptestnetfiles","title":"<code>--dumpTestnetFiles</code>","text":"<p>description: Dump testnet files and exit</p> <p>type: <code>string</code></p> <p></p>"},{"location":"contribution/getting-started/","title":"Contribution Guidelines","text":"<p>Thanks for your interest in contributing to Lodestar. It's people like you that push the Ethereum ecosystem forward.</p>"},{"location":"contribution/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li> NodeJS (LTS)</li> <li> Yarn</li> </ul>"},{"location":"contribution/getting-started/#macos-specifics","title":"MacOS Specifics","text":"<p>When using MacOS, there are a couple of extra prerequisites that are required.</p> <ul> <li>python</li> <li>coreutils (e.g. via <code>brew install coreutils</code>)</li> </ul>"},{"location":"contribution/getting-started/#getting-started","title":"Getting Started","text":"<ul> <li> Run <code>yarn</code> to install dependencies.</li> <li> Run <code>yarn build</code> to build lib from source.</li> <li> A <code>lodestar</code> binary will be bundled in <code>./packages/cli/bin</code>.</li> <li> Run <code>./lodestar --help</code> to get a list of available commands and arguments.</li> </ul>"},{"location":"contribution/getting-started/#tests","title":"Tests","text":"<p>To run tests:</p> <ul> <li> Run <code>yarn test:unit</code> for unit tests.</li> <li> Run <code>yarn test:e2e</code> for end-to-end tests.</li> <li> Run <code>yarn test:spec</code> for spec tests.</li> <li> Run <code>yarn test</code> to run all tests.</li> <li> Run <code>yarn check-types</code> to check TypeScript types.</li> <li> Run <code>yarn lint</code> to run the linter (ESLint).</li> </ul> <p>Contributing to tests:</p> <ul> <li>Test must not depend on external live resources, such that running tests for a commit must be deterministic:</li> <li>Do not pull data from external APIs like execution JSON RPC (instead run a local node).</li> <li>Do not pull unpinned versions from DockerHub (use deterministic tag) or Github (checkout commit not branch).</li> <li>Carefully design tests that depend on timing sensitive events like p2p network e2e tests. Consider that Github runners are significantly less powerful than your development environment.</li> </ul>"},{"location":"contribution/getting-started/#debugging-spec-tests","title":"Debugging Spec Tests","text":"<ul> <li>To fix errors always focus on passing all minimal tests first without running mainnet tests.</li> <li>Spec tests often compare full expected vs actual states in JSON format. To better understand the diff it's convenient to use mocha's option <code>--inline-diffs</code>.</li> <li>A single logical error can cause many spec tests to fail. To focus on a single test at a time you can use mocha's option <code>--bail</code> to stop at the first failed test</li> <li>To then run only that failed test you can run against a specific file as use mocha's option <code>--grep</code> to run only one case</li> </ul> <pre><code>LODESTAR_PRESET=minimal ../../node_modules/.bin/mocha --config .mocharc.spec.yml test/spec/phase0/sanity.test.ts --inline-diffs --bail --grep \"attestation\"\n</code></pre>"},{"location":"contribution/getting-started/#docker","title":"Docker","text":"<p>The docker-compose file requires that a <code>.env</code> file be present in this directory. The <code>default.env</code> file provides a template and can be copied <code>.env</code>:</p> <pre><code>cp default.env .env\n</code></pre>"},{"location":"contribution/getting-started/#beacon-node-only","title":"Beacon node only","text":"<pre><code>docker-compose up -d\n</code></pre>"},{"location":"contribution/getting-started/#beacon-node-and-validator","title":"Beacon node and validator","text":"<p>First, you must have keystores and their secrets available locally at <code>./keystores</code> and your <code>password.txt</code> in <code>./secrets</code></p> <pre><code>docker-compose -f docker-compose.yml -f docker-compose.validator.yml up -d\n</code></pre>"},{"location":"contribution/getting-started/#dockerized-metrics-local-beacon-node","title":"Dockerized metrics + local beacon node","text":"<p>Run a local beacon with <code>--metrics</code> enabled. Then start Prometheus + Grafana with all dashboards in <code>./dashboards</code> automatically loaded running:</p> <pre><code>./docker/docker-compose.local_dev.sh\n</code></pre>"},{"location":"contribution/getting-started/#first-time-contributor","title":"First Time Contributor?","text":"<p>Unsure where to begin contributing to Lodestar? Here are some ideas!</p> <ul> <li> See any typos? See any verbiage that should be changed or updated? Go for it! Github makes it easy to make contributions right from the browser.</li> <li> Look through our outstanding unassigned issues. (Hint: look for issues labeled <code>good first issue</code> or <code>help-wanted</code>!)</li> <li> Join our Discord chat!   </li> </ul>"},{"location":"contribution/getting-started/#reporting-a-bug","title":"Reporting A Bug?","text":"<ul> <li>:spiral_notepad: Create a new issue! Select the type of issue that best fits, and please fill out as much of the information as you can.</li> </ul>"},{"location":"contribution/getting-started/#contribution-process","title":"Contribution Process","text":"<ol> <li>Make sure you're familiar with our contribution guidelines (this document)!</li> <li>Create your own fork of this repository.</li> <li>Make your changes in your local fork.</li> <li>If you've made a code change, make sure to lint and test your changes (<code>yarn lint</code> and <code>yarn test:unit</code>).</li> <li>Make an open pull request when you're ready for it to be reviewed. We review PRs on a regular basis. See Pull request etiquette for more information.</li> <li>You may be asked to sign a Contributor License Agreement (CLA). We make it relatively painless with CLA-bot.</li> </ol>"},{"location":"contribution/getting-started/#github-style-guide","title":"Github Style Guide","text":"<p>Branch Naming</p> <p>If you are contributing from this repository prefix the branch name with your Github username (i.e. <code>myusername/short-description</code>)</p> <p>Pull Request Naming</p> <p>Pull request titles must be:</p> <ul> <li>Adhering to the conventional commits spec</li> <li>Short and descriptive summary</li> <li>Written in imperative present tense</li> <li>Not end with a period</li> </ul> <p>For example:</p> <ul> <li>feat: add lodestar prover for execution api</li> <li>fix: ignore known block in publish blinded block flow</li> <li>refactor(reqresp)!: support byte based handlers</li> </ul> <p>Pull Request Etiquette</p> <ul> <li>Pull requests should remain as drafts when they are not ready for review by maintainers. Open pull requests signal to the maintainers that it's ready for review.</li> <li>If your pull request is no longer applicable or validated to fix an issue, close your pull request.</li> <li>If your pull request is fixable and needs additional changes or commits within a short period of time, switch your pull request into a draft until it's ready.</li> <li>Otherwise, close your pull request and create a new issue instead.</li> </ul>"},{"location":"contribution/getting-started/#lodestar-monorepo","title":"Lodestar Monorepo","text":"<p>We're currently experimenting with hosting the majority of lodestar packages and support packages in this repository as a monorepo. We're using Lerna to manage the packages. See packages/ for a list of packages hosted in this repository.</p>"},{"location":"contribution/getting-started/#style-guide","title":"Style Guide","text":"<ul> <li>Lodestar has migrated to using ES modules.</li> <li>Many module class constructors have the following signature: <code>(options, dependencies)</code></li> <li>e.g.: <code>public constructor(opts: IExampleOptions, {db, logger}: IExampleModules)</code></li> <li>Modules should be designed to \"do one thing and do it well!\"</li> <li>Consider the interface of a module -- events included, and make sure it is coherent</li> <li>Make sure your code is properly linted</li> <li>use an IDE that will show linter errors/warnings</li> <li>run <code>yarn lint</code> from the command line</li> <li>common rules:<ul> <li>Functions and variables should be <code>camelCase</code>, classes should be <code>PascalCase</code>, constants should be <code>UPPERCASE_WITH_UNDERSCORES</code>.</li> <li>Use <code>\"</code> instead of <code>'</code></li> <li>All functions should have types declared for all parameters and return value</li> <li>You shouldn't be using TypeScript type <code>any</code></li> <li>Private class properties should not be prefixed with a <code>_</code></li> <li>e.g.: <code>private dirty;</code>, not <code>private _dirty;</code></li> </ul> </li> <li>Make sure that your code is properly type checked:</li> <li>use an IDE that will show type errors</li> <li>run <code>yarn check-types</code> from the command line</li> <li>Make sure that the tests are still passing:</li> <li>run <code>yarn test:unit</code> from the command line</li> <li>Commenting: If your code does something that is not obvious or deviates from standards, leave a comment for other developers to explain your logic and reasoning.</li> <li>Use <code>//</code> commenting format unless it's a comment you want people to see in their IDE.</li> <li>Use <code>/** */</code> commenting format for documenting a function/variable.</li> <li>Code white space can be helpful for reading complex code, please add some.</li> <li>For unit tests, we forbid import stubbing when other approaches are feasible.</li> <li>Metrics are a critical part of Lodestar, every large feature should be documented with metrics</li> <li>Metrics need to follow the Prometheus Best Practices</li> <li>For metric names, make sure to add the unit as suffix, e.g. <code>_seconds</code> or <code>_bytes</code></li> <li>Metric code variables on the other hand should not be suffixed, i.e. <code>Sec</code>-suffix should be omitted</li> <li>Time-based metrics must use seconds as the unit</li> </ul>"},{"location":"contribution/getting-started/#tests-style-guide","title":"Tests style guide","text":"<p>Test must not depend on external live resources, such that running tests for a commit must be deterministic:</p> <ul> <li>Do not pull data from external APIs like execution JSON RPC (instead run a local node).</li> <li>Do not pull unpinned versions from dockerhub (use deterministic tag) or Github (checkout commit not branch).</li> <li>Carefully design tests that depend on timing sensitive events like p2p network e2e tests. Consider that Github runners are significantly less powerful than your development environment.</li> </ul> <p>Add assertion messages where possible to ease fixing tests if they fail. If an assertion message is called from multiple times with the same stack trace, you MUST include an assertion message. For example, if an assertion is inside a for loop add some metadata to be able to locate the error source:</p> <pre><code>for (const blockResult of blocksResult) {\n  expect(blockResult.status).equals(\"processed\", `wrong block ${blockResult.id} result status`);\n}\n</code></pre>"},{"location":"contribution/getting-started/#logging-policy","title":"Logging policy","text":""},{"location":"contribution/getting-started/#logging-levels","title":"Logging Levels","text":"<p>Contributors must choose the log level carefully to ensure a consistent experience for every type of user:</p> <ul> <li><code>error</code>: Critical issues that prevent the application from functioning correctly or cause significant disruption to users. Examples include failed network connections, crashes, or data corruption.</li> <li><code>warn</code>: Situations that may lead to critical issues if not addressed but do not prevent the application from functioning. Examples include configuration issues, deprecated features, or temporary network disruptions.</li> <li><code>info</code>: General sporadic informational about the node's state. Examples include initialization messages, infrequent periodic status updates, or high-level progress reports.</li> <li><code>debug</code>: Detailed diagnostic information that can help developers or users troubleshoot specific issues. Examples include individual request logs for every REST API, networking interactions, or internal components status changes. Alias to <code>verbose</code>.</li> </ul>"},{"location":"contribution/getting-started/#logging-guidelines","title":"Logging guidelines","text":"<ul> <li>Avoid excessive logging. Log messages should be clear and concise, providing enough information to understand the context and severity of the issue.</li> <li>Do not log sensitive data, such as private keys, user credentials, or personal information.</li> <li>Do not log arbitrary data from the network as ASCII or UTF8 at levels higher or equal to <code>info</code>.</li> <li>Use clear and concise language. Prefer to log variables in JSON format <code>log.debug(\"Action\", {slot})</code> instead of formatting the text yourself <code>log.debug('slot=${slot}')</code>.</li> <li>Include only relevant context in log messages, sufficient to debug the issue or action it refers to.</li> </ul>"},{"location":"contribution/getting-started/#contributing-to-grafana-dashboards","title":"Contributing to Grafana dashboards","text":"<p>To edit or extend an existing Grafana dashboard with minimal diff:</p> <ol> <li>Grab the <code>.json</code> dashboard file from current unstable</li> <li>Import the file to Grafana via the web UI at <code>/dashboard/import</code> without modifying the UID of the dashboard</li> <li>Visually edit the dashboard</li> <li>Once done make sure to leave the exact same visual aspect as before: same refresh interval, time range, etc.</li> <li>Save the dashboard (CTRL+S)</li> <li>Run download script, see below on how to use it</li> <li>Check git diff of updated dashboards, commit, push and open your PR</li> </ol>"},{"location":"contribution/getting-started/#using-download-script","title":"Using Download Script","text":"<p>Create a file <code>.secrets.env</code> with envs</p> <pre><code>GRAFANA_API_KEY=$token\nGRAFANA_URL=https://yourgrafanaapi.io\n</code></pre> <p>Run script to download dashboards to <code>./dashboards</code> folder</p> <pre><code>node scripts/download_dashboards.mjs\n</code></pre>"},{"location":"contribution/getting-started/#label-guide","title":"Label Guide","text":"<p>Issues and pull requests are subject to the following labeling guidelines.</p> <ul> <li>PRs may have a status label to indicate deviation from the normal process such as <code>status-blocked</code> or <code>status-do-not-merge</code></li> <li>Issues and PRs will be tagged with a <code>scope</code> and <code>prio</code> to indicate type and priority for triage.</li> <li>All other labels allow for further evaluation and organization.</li> </ul> <p>Label descriptions can be found below.</p>"},{"location":"contribution/getting-started/#status-issues-and-pull-request-status","title":"<code>status.*</code> Issues and Pull Request Status","text":"<p>Status labels apply to issues and pull requests which deviate from normal processes.</p>"},{"location":"contribution/getting-started/#scope-scope-indicator","title":"<code>scope.*</code> Scope Indicator","text":"<p>Scope is comparable to Module labels but less strict with the definition of components. It applies to both, issues and pull requests.</p>"},{"location":"contribution/getting-started/#prio-prioritization-indicator","title":"<code>prio.*</code> Prioritization Indicator","text":"<p>A simple indicator of issue prioritization. It mainly applies to issues.</p>"},{"location":"contribution/getting-started/#spec-ethereum-consensus-spec-version-target","title":"<code>spec.*</code> Ethereum Consensus Spec Version Target","text":"<p>Issues that target a specific version of the Ethereum consensus spec, shall be tagged accordingly.</p>"},{"location":"contribution/getting-started/#community","title":"Community","text":"<p>Come chat with us on Discord and join our public weekly planning meetings!</p>"},{"location":"contribution/testing/","title":"Testing","text":"<p>Testing is critical to the Lodestar project and there are many types of tests that are run to build a product that is both effective AND efficient. This page will help to break down the different types of tests you will find in the Lodestar repo.</p>"},{"location":"contribution/testing/#unit-tests","title":"Unit Tests","text":"<p>This is the most fundamental type of test in most code bases. In all instances mocks, stubs and other forms of isolation are used to test code on a functional, unit level. See the Unit Tests page for more information.</p>"},{"location":"contribution/testing/#spec-tests","title":"Spec Tests","text":"<p>The Ethereum Consensus Specifications are what ensure that the various consensus clients do not diverge on critical computations and will work harmoniously on the network. See the Spec Tests page for more information.</p>"},{"location":"contribution/testing/#performance-tests","title":"Performance Tests","text":"<p>Node.js is an unforgiving virtual machine when it comes to high performance, multi-threaded applications. In order to ensure that Lodestar can not only keep up with the chain, but to push the boundary of what is possible, there are lots of performance tests that benchmark programming paradigms and prevent regression. See the Performance Testing page for more information.</p>"},{"location":"contribution/testing/#end-to-end-tests","title":"End-To-End Tests","text":"<p>E2E test are where Lodestar is run in its full form, often from the CLI as a user would to check that the system as a whole works as expected. These tests are meant to exercise the entire system in isolation and there is no network interaction, nor interaction with any other code outside of Lodestar. See the End-To-End Testing page for more information.</p>"},{"location":"contribution/testing/#integration-tests","title":"Integration Tests","text":"<p>Integration tests are meant to test how Lodestar interacts with other clients, but are not considered full simulations. This is where Lodestar may make API calls or otherwise work across the process boundary, but there is required mocking, stubbing, or class isolation. An example of this is using the <code>ExecutionEngine</code> class to make API calls to a Geth instance to check that the http requests are properly formatted.</p>"},{"location":"contribution/testing/#simulation-tests","title":"Simulation Tests","text":"<p>These are the most comprehensive types of tests. They aim to test Lodestar in a fully functioning ephemeral devnet environment. See the Simulation Testing page for more information.</p>"},{"location":"contribution/testing/end-to-end-tests/","title":"End-To-End Tests","text":"<p>Check back soon for more information!! We are in the process of updating our docs.</p>"},{"location":"contribution/testing/integration-tests/","title":"Integration Tests","text":"<p>The following tests are found in <code>packages/beacon-node</code></p>"},{"location":"contribution/testing/integration-tests/#testsimwithdrawals","title":"<code>test:sim:withdrawals</code>","text":"<p>This test simulates capella blocks with withdrawals. It tests lodestar against Geth and EthereumJS.</p> <p>There are two ENV variables that are required to run this test:</p> <ul> <li><code>EL_BINARY_DIR</code>: the docker image setup to handle the test case</li> <li><code>EL_SCRIPT_DIR</code>: the script that will be used to start the EL client. All of the scripts can be found in <code>packages/beacon-node/test/scripts/el-interop</code> and the <code>EL_SCRIPT_DIR</code> is the sub-directory name in that root that should be used to run the test.</li> </ul> <p>The command to run this test is:</p> <p><code>EL_BINARY_DIR=g11tech/geth:withdrawals EL_SCRIPT_DIR=gethdocker yarn mocha test/sim/withdrawal-interop.test.ts</code></p> <p>The images used by this test during CI are:</p> <ul> <li><code>GETH_WITHDRAWALS_IMAGE: g11tech/geth:withdrawalsfeb8</code></li> <li><code>ETHEREUMJS_WITHDRAWALS_IMAGE: g11tech/ethereumjs:blobs-b6b63</code></li> </ul>"},{"location":"contribution/testing/integration-tests/#testsimmerge-interop","title":"<code>test:sim:merge-interop</code>","text":""},{"location":"contribution/testing/integration-tests/#testsimmergemock","title":"<code>test:sim:mergemock</code>","text":""},{"location":"contribution/testing/integration-tests/#yarn-testsimblobs","title":"<code>yarn test:sim:blobs</code>","text":""},{"location":"contribution/testing/performance-tests/","title":"Performance Tests","text":"<p>Check back soon for more information!! We are in the process of updating our docs.</p>"},{"location":"contribution/testing/simulation-tests/","title":"Simulation Tests","text":"<p>\"Sim\" testing for Lodestar is the most comprehensive, and complex, testing that is run. The goal is to fully simulate a testnet and to actuate the code in a way that closely mimics what will happen when turning on Lodestar in the wild. This is a very complex task and requires a lot of moving parts to work together. The following sections will describe the various components and how they work together.</p> <p>At a very high level, simulation testing will setup a testnet from genesis and let proceed through \"normal\" execution exactly as the nodes would under production circumstances. To get feedback there are regular checks along the way to asses how the testnet nodes are working. These \"assertions\" can be added and removed at will to allow developers to check for specific conditions in a tightly controlled, reproducible, environment to get high quality and actionable feedback on how Lodestar performs. The end goal of these tests is to to run a full Lodestar client in an environment that is as close to what an end user would experience.</p> <p>These tests usually setup full testnets with multiple consensus clients and their paired execution node. In many instance we are looking to just exercise the Lodestar code but there are some places where there is also testing to see how Lodestar works in relation to the other consensus clients, like Lighthouse. As you can imagine, there is quite a bit of machinery that is responsible for setting up and managing the simulations and assertions. This section will help to go over those bits and pieces. Many, but not all, of these classes can be found in <code>packages/cli/test/utils/simulation</code>.</p>"},{"location":"contribution/testing/simulation-tests/#running-sim-tests","title":"Running Sim Tests","text":"<p>There are a number of sim tests that are available and each has a slightly different purpose. All are run by CI and must pass for a PR to be valid for merging. Most tests require a couple of environment variables to be set.</p>"},{"location":"contribution/testing/simulation-tests/#environment-variables","title":"Environment Variables","text":"<p>To see what typical values for these are check out the <code>test-sim.yaml</code> workflow file in the <code>.github/workflows</code> directory.</p> <ul> <li><code>GETH_DOCKER_IMAGE</code>: The geth docker image that will be used</li> <li><code>NETHERMIND_IMAGE</code>: The nethermind docker image that will be used</li> <li><code>LIGHTHOUSE_IMAGE</code>: The lighthouse docker image that will be used</li> </ul>"},{"location":"contribution/testing/simulation-tests/#testsimmultifork","title":"<code>test:sim:multifork</code>","text":"<p>The multi-fork sim test checks most of the functionality Lodestar provides. Is verifies that Lodestar is capable of peering, moving through all of the forks and using various sync methods in a testnet environment. Lodestar is tested with both Geth and Nethermind as the execution client. It also checks a Lighthouse/Geth node for cross client compatibility.</p> <pre><code>GETH_DOCKER_IMAGE=ethereum/client-go:v1.11.6 \\\n    LIGHTHOUSE_DOCKER_IMAGE=sigp/lighthouse:latest-amd64-modern-dev \\\n    NETHERMIND_DOCKER_IMAGE=nethermind/nethermind:1.18.0 \\\n    yarn workspace @chainsafe/lodestar test:sim:multifork\n</code></pre>"},{"location":"contribution/testing/simulation-tests/#testsimendpoints","title":"<code>test:sim:endpoints</code>","text":"<p>This tests that various endpoints of the beacon node and validator client are working as expected.</p> <pre><code>GETH_DOCKER_IMAGE=ethereum/client-go:v1.11.6 \\\n    yarn workspace @chainsafe/lodestar test:sim:endpoints\n</code></pre>"},{"location":"contribution/testing/simulation-tests/#testsimdeneb","title":"<code>test:sim:deneb</code>","text":"<p>This test is still included in our CI but is no longer as important as it once was. Lodestar is often the first client to implement new features and this test was created before geth was upgraded with the features required to support the Deneb fork. To test that Lodestar was ready this test uses mocked geth instances. It is left as a placeholder for when the next fork comes along that requires a similar approach.</p>"},{"location":"contribution/testing/simulation-tests/#testsimmixedcleint","title":"<code>test:sim:mixedcleint</code>","text":"<p>Checks that Lodestar is compatible with other consensus validators and vice-versa. All tests use Geth as the EL.</p> <pre><code>GETH_DOCKER_IMAGE=ethereum/client-go:v1.11.6 \\\n    LIGHTHOUSE_DOCKER_IMAGE=sigp/lighthouse:latest-amd64-modern-dev \\\n    yarn workspace @chainsafe/lodestar test:sim:mixedclient\n</code></pre>"},{"location":"contribution/testing/simulation-tests/#sim-test-infrastructure","title":"Sim Test Infrastructure","text":"<p>When setting up and running the simulations, interactions with the nodes is through the published node API's. All functionality is actuated via http request and by \"plugging in\" this way it is possible to run the nodes in a stand-alone fashion, as they would be run in production, but to still achieve a tightly monitored and controlled environment. If code needs to be executed on a \"class by class\" basis or with mocking involved then the test is not a simulation test and would fall into one of the other testing categories. See the Testing Overview page for more information on the other types of tests available for Lodestar.</p>"},{"location":"contribution/testing/simulation-tests/#simulation-environment","title":"Simulation Environment","text":"<p>The simulation environment has many pieces and those are orchestrated by the <code>SimulationEnvironment</code> class. The testnet nodes will be run as a mixture of Docker containers and bare metal code execution via Node.js. In order to monitor the various clients there is a <code>SimulationTracker</code> that's primary function is to <code>register</code> assertions that will track and gauge how the nodes are doing during the simulation. See the section on Simulation Assertions below for more information on them. There is an <code>EpochClock</code> that has helper functions related to timing of slots and epochs and there is also a <code>Runner</code> that will help to start/stop the various Docker container and spawn the Node.js child processes as necessary.</p> <p>The <code>SimulationEnvironment</code> is the orchestrator for all the various functions to great the test net and start it from genesis. It is also how the various forks are configured to exercise code through various fork transitions.</p>"},{"location":"contribution/testing/simulation-tests/#simulation-assertions","title":"Simulation Assertions","text":"<p>These are the secret sauce for making the simulation tests meaningful. There are several predefined assertions that can be added to a simulation tracker and one can also create custom assertions and add them to the environment. Assertions can be added per slot, per epoch, per fork or per node. They can even be added to check conditions across nodes.</p> <p>Assertions are added to the <code>SimulationTracker</code> with the <code>register</code> method and the tracker follows the environment to make sure that assertions are run at the appropriate times, and on the correct targets.</p> <p>Assertions are implemented via API calls to the various targets and meta from the API calls is stored and used to assert that the desired conditions were met. Any information that can be retrieved via API call can be added to the assertion <code>stores</code> for validation, and validations can be asserted at a specific time or on an interval.</p> <p>There are a number of assertions that are added to simulations by default. They are:</p> <ul> <li><code>inclusionDelayAssertion</code></li> <li><code>attestationsCountAssertion</code></li> <li><code>attestationParticipationAssertion</code></li> <li><code>connectedPeerCountAssertion</code></li> <li><code>finalizedAssertion</code></li> <li><code>headAssertion</code></li> <li><code>missedBlocksAssertion</code></li> <li><code>syncCommitteeParticipationAssertion</code></li> </ul> <p>Because of the flexibility, and complexity, there is a section specifically for how to create custom assertions below. See custom assertions for more info.</p>"},{"location":"contribution/testing/simulation-tests/#custom-assertions","title":"Custom Assertions","text":"<p>Check back soon for more information on how to create custom assertions.</p>"},{"location":"contribution/testing/simulation-tests/#simulation-reports","title":"Simulation Reports","text":"<p>Sim tests that are run using the simulation framework output a table of information to the console. The table summarizes the state of all of the nodes and the network at each slot.</p> <p>Here is an example of the table and how to interpret it:</p> <pre><code>\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2502 fork       \u2502 eph   \u2502 slot \u2502 head       \u2502 finzed   \u2502 peers    \u2502 attCount \u2502 incDelay \u2502 errors     \u2502\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2502 capella    \u2502 9/0   \u2502 72   \u2502 0x95c4..   \u2502 56       \u2502 3        \u2502 16       \u2502 1.00     \u2502 0          \u2502\n\u2502 capella    \u2502 9/1   \u2502 73   \u2502 0x9dfc..   \u2502 56       \u2502 3        \u2502 16       \u2502 1.00     \u2502 0          \u2502\n\u2502 capella    \u2502 9/2   \u2502 74   \u2502 0xdf3f..   \u2502 56       \u2502 3        \u2502 16       \u2502 1.00     \u2502 0          \u2502\n\u2502 capella    \u2502 9/3   \u2502 75   \u2502 0xbeae..   \u2502 56       \u2502 3        \u2502 16       \u2502 1.00     \u2502 0          \u2502\n\u2502 capella    \u2502 9/4   \u2502 76   \u2502 0x15fa..   \u2502 56       \u2502 3        \u2502 16       \u2502 1.00     \u2502 0          \u2502\n\u2502 capella    \u2502 9/5   \u2502 77   \u2502 0xf8ff..   \u2502 56       \u2502 2,3,3,2  \u2502 16       \u2502 1.00     \u2502 0          \u2502\n\u2502 capella    \u2502 9/6   \u2502 78   \u2502 0x8199..   \u2502 56       \u2502 2,3,3,2  \u2502 16       \u2502 1.20     \u2502 0          \u2502\n\u2502 capella    \u2502 9/7   \u2502 79   \u2502 different  \u2502 56       \u2502 2,3,3,2  \u2502 16       \u2502 1.50     \u2502 2          \u2502\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n\u2502 Att Participation: H: 0.75, S: 1.00, T: 0.75 - SC Participation: 1.00                           \u2502\n\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\n</code></pre>"},{"location":"contribution/testing/simulation-tests/#slot-information","title":"Slot Information","text":"<ul> <li><code>fork</code>: shows what fork is currently being tested</li> <li><code>eph</code>: During simulation tests the Lodestar repo is setup to use 8 slot per epoch so what is shown is the epoch number and the slot number within that epoch as <code>epoch/slot</code></li> <li><code>slot</code>: The slot number that is currently being processed</li> <li><code>head</code>: If all clients have the the same head the first couple of bytes of the hash are shown. If all clients do not have the same head <code>different</code> is reported.</li> <li><code>finzed</code>: Shows the number of the last finalized slot</li> <li><code>peers</code>: The number of peers that each node is connected to. If all have the same number then only a single value is shown. If they do not have the same number of peers count for each node is reported in a comma-separated list</li> <li><code>attCount</code>: The number of attestations that the node has seen.</li> <li><code>incDelay</code>: The average number of slots inclusion delay was experienced for the attestations. Often attestations for the current head arrive more than one slot behind and this value tracks that</li> <li><code>errors</code>: The number of errors that were encountered during the slot</li> </ul>"},{"location":"contribution/testing/simulation-tests/#epoch-information","title":"Epoch Information","text":"<ul> <li><code>H</code>: The percentage of nodes, at epoch transition, that voted for the head block</li> <li><code>S</code>: The percentage of nodes, at epoch transition, that voted for the source block</li> <li><code>T</code>: The percentage of nodes, at epoch transition, that voted for the target block</li> <li><code>SC Participation</code>: The sync committee participation rate</li> </ul>"},{"location":"contribution/testing/simulation-tests/#simulation-logging","title":"Simulation Logging","text":"<p>The simulation environment will capture all of the logs from all nodes that are running. The logs can be found in the <code>packages/cli/test-logs</code> directory. The logs are named with the following convention:</p> <p><code>&lt;PURPOSE&gt;-&lt;TYPE&gt;_&lt;CLIENT&gt;.log</code></p> <p>Some examples are:</p> <ul> <li><code>node-1-beacon_lodestar.log</code>: The is the first node in the simulation. It is the consensus layer. It is running the lodestar validator client.</li> <li><code>range-sync-execution_geth.log</code>: This is the node that was added to test pulling history in range sync mode. It was the execution layer and was running the geth execution client.</li> </ul>"},{"location":"contribution/testing/spec-tests/","title":"Specification Tests","text":"<p>Check back soon for more information!! We are in the process of updating our docs.</p>"},{"location":"contribution/testing/unit-tests/","title":"Unit Tests","text":"<p>Check back soon for more information!! We are in the process of updating our docs.</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#docker-installation","title":"Docker Installation","text":"<p>The <code>chainsafe/lodestar</code> Docker Hub repository is maintained actively. It contains the <code>lodestar</code> CLI preinstalled.</p> <p>Info</p> <p>The Docker Hub image tagged as <code>chainsafe/lodestar:next</code> is run on CI every commit on our <code>unstable</code> branch. For <code>stable</code> releases, the image is tagged as <code>chainsafe/lodestar:latest</code>.</p> <p>Ensure you have Docker installed by issuing the command:</p> <pre><code>docker -v\n</code></pre> <p>It should return a non error message such as <code>Docker version xxxx, build xxxx</code>.</p> <p>Pull, run the image and Lodestar should now be ready to use</p> <pre><code>docker pull chainsafe/lodestar\ndocker run chainsafe/lodestar --help\n</code></pre> <p>Info</p> <p>Docker is the recommended setup for Lodestar. Use our Lodestar Quickstart scripts with Docker for detailed instructions.</p>"},{"location":"getting-started/installation/#build-from-source","title":"Build from Source","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Make sure to have Yarn installed. It is also recommended to install NVM (Node Version Manager) and use the LTS version (currently v20) of NodeJS.</p> <p>Info</p> <p>NodeJS versions older than the current LTS are not supported by Lodestar. We recommend running the latest Node LTS. It is important to make sure the NodeJS version is not changed after reboot by setting a default <code>nvm alias default &lt;version&gt; &amp;&amp; nvm use default</code>.</p> <p>Note</p> <p>Node Version Manager (NVM) will only install NodeJS for use with the active user. If you intend on setting up Lodestar to run under another user, we recommend using NodeSource's source for NodeJS so you can install NodeJS globally.</p>"},{"location":"getting-started/installation/#clone-repository","title":"Clone repository","text":"<p>Clone the repository locally and build from the stable release branch.</p> <pre><code>git clone -b stable https://github.com/chainsafe/lodestar.git\n</code></pre> <p>Switch to created directory.</p> <pre><code>cd lodestar\n</code></pre>"},{"location":"getting-started/installation/#install-packages","title":"Install packages","text":"<p>Install across all packages. Lodestar follows a monorepo structure, so all commands below must be run in the project root.</p> <pre><code>yarn install\n</code></pre>"},{"location":"getting-started/installation/#build-source-code","title":"Build source code","text":"<p>Build across all packages.</p> <pre><code>yarn run build\n</code></pre>"},{"location":"getting-started/installation/#lodestar-cli","title":"Lodestar CLI","text":"<p>Lodestar should now be ready for use.</p> <pre><code>./lodestar --help\n</code></pre> <p>See Command Line Reference for further information.</p>"},{"location":"getting-started/installation/#install-from-npm-not-recommended","title":"Install from NPM [not recommended]","text":"<p>Danger</p> <p>For mainnet (production) usage, we only recommend installing with docker due to NPM supply chain attacks. Until a safer installation method has been found, do not use this install method except for experimental purposes only.</p>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":""},{"location":"getting-started/quick-start/#lodestar-quickstart","title":"Lodestar Quickstart","text":"<p>In order to make things easy for users to onboard and try the Ethereum Proof of Stake we have come up with Lodestar quick start scripts!</p> <p>\u2705 Zero Configuration \u2705 All testnets supported along with <code>mainnet</code> \u2705 All mainstream Execution Clients integrated</p> <p>With just single command you can run lodestar with various execution engines, switch them up to see the Optimistic sync work its magic and eventually brings lodestar and the execution engine in sync</p>"},{"location":"getting-started/quick-start/#customizations","title":"Customizations","text":"<p>You can adapt them to your production setups with ease! Here is a simple guide for you to follow along:</p> <p>\ud83d\udc49 Lodestar Quick Setup Guide</p>"},{"location":"getting-started/quick-start/#support","title":"Support","text":"<p>We actively maintain and update the configurations of running lodestar with the top of the line execution engines for various PoS networks so you have the minimum possible figuring out to do.</p> <p>In case you are facing any issues with the quick start guide, do reach us out on lodestar discord! Happy to help! \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f</p>"},{"location":"getting-started/starting-a-node/","title":"Beacon management","text":"<p>The following instructions are required to setup and run a Lodestar beacon node.</p> <ul> <li>Beacon management<ul> <li>Connect to mainnet or a public testnet</li> <li>Configure the Lodestar JWT authentication token<ul> <li>Generate a secret key</li> <li>Configure Lodestar to locate the JWT secret</li> <li>Ensure JWT is configured with your execution node</li> </ul> </li> <li>Run a beacon node<ul> <li>Checkpoint Sync</li> <li>Guide to the sync logs</li> </ul> </li> </ul> </li> </ul>"},{"location":"getting-started/starting-a-node/#connect-to-mainnet-or-a-public-testnet","title":"Connect to mainnet or a public testnet","text":"<p>Running a Lodestar node on mainnet or a testnet only requires basic familiarity with the terminal.</p> <p>Make sure Lodestar is installed in your local environment, following the chosen install method. The following command should return a non error message.</p> <pre><code>./lodestar --help\n</code></pre> <p>For a complete list of beacon node CLI commands and options, see the <code>beacon</code> CLI Command section.</p> <p>To select a known testnet or mainnet, use the <code>--network</code> flag. <code>mainnet</code> is selected by default, and a list of available networks is listed with the <code>--help</code> flag. Setting the <code>--network</code> flag will conveniently configure the beacon node or validator client for the selected network. For power users, any configuration option should be able to be overridden.</p>"},{"location":"getting-started/starting-a-node/#configure-the-lodestar-jwt-authentication-token","title":"Configure the Lodestar JWT authentication token","text":"<p>Post-Merge Ethereum will require secure authentication with the Engine API connection on your chosen Execution node.</p> <p>Info</p> <p>Post-Merge Ethereum requires a secure, authenticated connection to the Execution client on port 8551. We recommend setting this up now to ensure a proper configuration before the Merge.</p>"},{"location":"getting-started/starting-a-node/#generate-a-secret-key","title":"Generate a secret key","text":"<p>You must generate a secret 32-byte (64 characters) hexadecimal string that will be used to authenticate with an execution node. You can use the following command in most terminals to generate a random secret: <code>openssl rand -hex 32</code>. Or you can use an online generator. Save this secret key into a text file and note where you store this file.</p>"},{"location":"getting-started/starting-a-node/#configure-lodestar-to-locate-the-jwt-secret","title":"Configure Lodestar to locate the JWT secret","text":"<p>When starting up a Lodestar beacon node in any configuration, ensure you add the <code>--jwtSecret $JWT_SECRET_PATH</code> flag to point to the saved secret key file.</p>"},{"location":"getting-started/starting-a-node/#ensure-jwt-is-configured-with-your-execution-node","title":"Ensure JWT is configured with your execution node","text":"<p>For Go Ethereum: Use the <code>--authrpc.jwtsecret /data/jwtsecret</code> flag to configure the secret. Use their documentation here.</p> <p>For Nethermind: Use the <code>--JsonRpc.JwtSecretFile /data/jwtsecret</code> flag to configure the secret. Use their documentation here.</p> <p>For Besu: Use the <code>--engine-jwt-secret=&lt;FILE&gt;</code> flag to configure the secret. Use their documentation here.</p> <p>For Erigon: Use the <code>--authrpc.jwtsecret</code> flag to configure the secret. Use their documentation here.</p>"},{"location":"getting-started/starting-a-node/#run-a-beacon-node","title":"Run a beacon node","text":"<p>To start a Lodestar beacon run the command:</p> <pre><code>./lodestar beacon --network $NETWORK_NAME --jwtSecret $JWT_SECRET_PATH\n</code></pre> <p>This will assume an execution-layer client is available at the default location of <code>https://localhost:8545</code>.</p> <p>In case execution-layer clients are available at different locations, use <code>--execution.urls</code> to specify these locations in the command:</p> <pre><code>./lodestar beacon --network $NETWORK_NAME --jwtSecret $JWT_SECRET_PATH --execution.urls $EL_URL1 $EL_URL2\n</code></pre> <p>Immediately you should see confirmation that the node has started</p> <pre><code>pr-20 15:12:45.274[]                 info: Lodestar network=mainnet, version=v1.7.2, commit=\nApr-20 15:12:45.327[]                 info: Connected to LevelDB database path=/data/mt1/chain-db\nApr-20 15:12:57.747[]                 info: Initializing beacon from a valid db state slot=6264480, epoch=195765, stateRoot=0x8133cd4d0be59c3e94405f902fe0ad68ffaa5013b525dddb6285b91ad79716f6, isWithinWeakSubjectivityPeriod=true\nApr-20 15:13:18.077[network]          info: PeerId 16Uiu2HAmDsGet67va6VCnaW2Tu1Ae2yujiDMnmURMMWNvssER7ZQ, Multiaddrs /ip4/127.0.0.1/tcp/9000/p2p/16Uiu2HAmDsGet67va6VCnaW2Tu1Ae2yujiDMnmURMMWNvssER7ZQ,/ip4/10.244.0.199/tcp/9000/p2p/16Uiu2HAmDsGet67va6VCnaW2Tu1Ae2yujiDMnmURMMWNvssER7ZQ\nApr-20 15:13:18.270[rest]             info: Started REST API server address=http://127.0.0.1:9596\nApr-20 15:13:18.271[]                 warn: Low peer count peers=0\nApr-20 15:13:18.280[]                 info: Searching peers - peers: 0 - slot: 6264964 - head: (slot - 484) 0x7ee6\u20262a15 - exec-block: syncing(17088043 0x9442\u2026) - finalized: 0xe359\u20264d7e:195763\nApr-20 15:13:23.009[chain]            info: Validated transition configuration with execution client terminalTotalDifficulty=0xc70d808a128d7380000, terminalBlockHash=0x0000000000000000000000000000000000000000000000000000000000000000, terminalBlockNumber=0x0\nApr-20 15:13:29.287[]                 info: Syncing - ? left - 0.00 slots/s - slot: 6264965 - head: (slot - 485) 0x7ee6\u20262a15 - exec-block: syncing(17088043 0x9442\u2026) - finalized: 0xe359\u20264d7e:195763 - peers: 1\nApr-20 15:14:41.003[]                 info: Syncing - 22 seconds left - 4.92 slots/s - slot: 6264971 - head: (slot - 108) 0xd15f\u2026b605 - exec-block: valid(17088414 0x3dba\u2026) - finalized: 0x70fd\u20265157:195775 - peers: 4\nApr-20 15:14:53.001[]                 info: Syncing - 9 seconds left - 5.00 slots/s - slot: 6264972 - head: (slot - 45) 0x44e4\u202620a4 - exec-block: valid(17088475 0xca61\u2026) - finalized: 0x9cbd\u2026ba83:195776 - peers: 8\nApr-20 15:15:01.443[network]          info: Subscribed gossip core topics\nApr-20 15:15:01.446[sync]             info: Subscribed gossip core topics\nApr-20 15:15:05.000[]                 info: Synced - slot: 6264973 - head: 0x90ea\u2026c655 - exec-block: valid(17088521 0xca9b\u2026) - finalized: 0x6981\u2026682f:195778 - peers: 6\n</code></pre> <p>Info</p> <p>If your node is stuck with <code>Searching for peers</code> review your network configuration to make sure your ports are open.</p> <p>By default, Lodestar stores all configuration and chain data at the path <code>$XDG_DATA_HOME/lodestar/$NETWORK_NAME</code>.</p> <p>A young testnet should take a few hours to sync. If you see multiple or consistent errors in the logs, please open a Github issue or reach out to us in Discord. Just by reporting anomalies you are helping accelerate the progress of Ethereum Consensus, thanks for contributing!</p> <p>Warning</p> <p>It is dangerous to expose your Beacon APIs publicly as there is no default authentication mechanism provided. Ensure your beacon node host is not exposing ports 8545 or 9596 outside of your internal network.</p>"},{"location":"getting-started/starting-a-node/#checkpoint-sync","title":"Checkpoint Sync","text":"<p>If you are starting your node from a blank db, like starting from genesis, or from the last saved state in db and the network is now far ahead, your node will be susceptible to \"long range attacks.\" Ethereum's solution to this is via something called weak subjectivity. Read Vitalik's illuminating post explaining weak subjectivity..</p> <p>If you have a synced beacon node available (e.g., your friend's node or an infrastructure provider) and a trusted checkpoint you can rely on, you can start off your beacon node in under a minute! And at the same time kicking the \"long range attack\" in its butt!</p> <p>Just supply these extra arguments to your beacon node command:</p> <pre><code>--checkpointSyncUrl &lt;synced node url&gt; [--wssCheckpoint &lt;trusted checkpoint in root:epoch format&gt;]\n</code></pre> <p>In case you really trust <code>checkpointSyncUrl</code> then you may skip providing <code>wssCheckpoint</code>, which will then result into your beacon node syncing and starting off the recently finalized state from the trusted URL.</p> <p>Warning</p> <p>Please use this option very carefully (and at your own risk), a malicious server URL can put you on the wrong chain with a danger of you losing your funds by social engineering.</p> <p>If possible, validate your <code>wssCheckpoint</code> from multiple places (e.g. different client distributions) or from other trusted sources. This will highly reduce the risk of starting off on a malicious chain.</p> <p>Taking too long to sync?</p> <p>After your node has been offline for a while, it might be the case that it takes a long time to sync even though a <code>checkpointSyncUrl</code> is specified. This is due to the fact that the last db state is still within the weak subjectivity period (~15 days on mainnet) which causes the node to sync from the db state instead of the checkpoint state.</p> <p>It is possible to force syncing from checkpoint state by supplying the <code>--forceCheckpointSync</code> flag. This option is only recommended if it is absolutely necessary for the node to be synced right away to fulfill its duties as there is an inherent risk each time the state is obtained from an external source.</p>"},{"location":"getting-started/starting-a-node/#guide-to-the-sync-logs","title":"Guide to the sync logs","text":"<p>Lodestar beacon sync log aims to provide information of utmost importance about your node and yet be succinct at the same time. You may see the sync logs in the following format:</p> <p><code>[Sync status] - [ Slot info ] - [Head info] - [Exec block info] - [Finalized info] - [Peers info]</code></p> <p>See the following example of different kinds of sync log:</p> <pre><code>Apr-20 15:24:08.034[]                 info: Searching peers - peers: 0 - slot: 6265018 - head: 6264018 0xed93\u20267b0a - exec-block: syncing(17088476 0x9649\u2026) - finalized: 0xbf30\u20267e7c:195777\nApr-20 15:24:17.000[]                 info: Searching peers - peers: 0 - slot: 6265019 - head: 6264018 0xed93\u20267b0a - exec-block: syncing(17088476 0x9649\u2026) - finalized: 0xbf30\u20267e7c:195777\n</code></pre> <pre><code>Apr-20 15:13:41.298[]                 info: Syncing - 2.5 minutes left - 2.78 slots/s - slot: 6264966 - head: 6262966 0x5cec\u2026f5b8 - exec-block: valid(17088105 0x6f74\u2026) - finalized: 0x5cc0\u20263874:195764 - peers: 1\nApr-20 15:13:41.298[]                 info: Syncing - 2 minutes left - 2.78 slots/s - slot: 6264967 - head: 6263965 0x5cec\u2026f5b8 - exec-block: valid(17088105 0x6f74\u2026) - finalized: 0x5cc0\u20263874:195764 - peers: 1\n</code></pre> <pre><code>Apr-20 15:13:53.151[]                 info: Syncing - 1.6 minutes left - 3.82 slots/s - slot: 6264967 - head: (slot -360) 0xe0cf\u20269f3c - exec-block: valid(17088167 0x2d6a\u2026) - finalized: 0x8f3f\u20262f81:195766 - peers: 5\nApr-20 15:14:05.425[]                 info: Syncing - 1.1 minutes left - 4.33 slots/s - slot: 6264968 - head: (slot -297) 0x3655\u20261658 - exec-block: valid(17088231 0xdafd\u2026) - finalized: 0x9475\u2026425a:195769 - peers: 2\nApr-20 15:14:53.001[]                 info: Syncing - 9 seconds left - 5.00 slots/s - slot: 6264972 - head: (slot -45) 0x44e4\u202620a4 - exec-block: valid(17088475 0xca61\u2026) - finalized: 0x9cbd\u2026ba83:195776 - peers: 8\n</code></pre> <pre><code>Apr-20 15:15:01.443[network]          info: Subscribed gossip core topics\nApr-20 15:15:01.446[sync]             info: Subscribed gossip core topics\nApr-20 15:15:05.000[]                 info: Synced - slot: 6264973 - head: 0x90ea\u2026c655 - exec-block: valid(17088521 0xca9b\u2026) - finalized: 0x6981\u2026682f:195778 - peers: 6\nApr-20 15:15:17.003[]                 info: Synced - slot: 6264974 - head: 0x4f7e\u20260e3a - exec-block: valid(17088522 0x08b1\u2026) - finalized: 0x6981\u2026682f:195778 - peers: 6\n</code></pre> <pre><code>Apr-20 15:15:41.001[]                 info: Synced - slot: 6264976 - head: (slot -1) 0x17c6\u202671a7 - exec-block: valid(17088524 0x5bc1\u2026) - finalized: 0x6981\u2026682f:195778 - peers: 8\nApr-20 15:15:53.001[]                 info: Synced - slot: 6264977 - head: (slot -2) 0x17c6\u202671a7 - exec-block: valid(17088524 0x5bc1\u2026) - finalized: 0x6981\u2026682f:195778 - peers: 8\n</code></pre> <pre><code>Apr-20 15:16:05.000[]                 info: Synced - slot: 6264978 - head: 0xc9fd\u202628c5 - exec-block: valid(17088526 0xb5bf\u2026) - finalized: 0x6981\u2026682f:195778 - peers: 8\nApr-20 15:16:17.017[]                 info: Synced - slot: 6264979 - head: 0xde91\u2026d4cb - exec-block: valid(17088527 0xa488\u2026) - finalized: 0x6981\u2026682f:195778 - peers: 7\n</code></pre> <ol> <li> <p>Sync status: Takes three values : <code>Synced</code> or <code>Syncing</code> (along with sync speed info) or <code>Searching</code> if node is is still looking for viable peers from where it can download blocks.</p> </li> <li> <p>Slot (clock) info: What is the current ongoing slot as per the chain genesis</p> </li> <li> <p>Head info: It specifies where the local chain head hash is. In case its far behind the Slot (clock) then it independently shows the head slot else it show how far behind from the Slot it is if difference &lt; 1000.</p> </li> <li> <p>Execution block info: It provides the execution information about the head whether its confirmed <code>valid</code> or execution layer is still <code>syncing</code> to it, as well as its number and a short hash to easy identification.</p> </li> <li> <p>Finalized info: What is the current local <code>finalized</code> checkpoint in the format of <code>[checkpoint root]:[checkpoint epoch]</code>, for e.g.: <code>0xd7ba\u20268386:189636</code></p> </li> <li> <p>Peer info: Current total number of outbound or inbound peers, for e.g.: <code>peers: 27</code></p> </li> </ol> <p>For more insight into how a Lodestar beacon node is functioning, you may setup lodestar metrics and use the prepared Grafana dashboards that are found in the repository. Check out our section on Prometheus and Grafana for more details.</p>"},{"location":"getting-started/starting-a-node.new/","title":"Starting a Node","text":""},{"location":"getting-started/starting-a-node.new/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/starting-a-node.new/#creating-a-client-communication-jwt","title":"Creating a Client Communication JWT","text":""},{"location":"getting-started/starting-a-node.new/#creating-a-validator-keystore","title":"Creating a Validator Keystore","text":""},{"location":"getting-started/starting-a-node.new/#base-considerations","title":"Base Considerations","text":""},{"location":"getting-started/starting-a-node.new/#execution-client","title":"Execution Client","text":""},{"location":"getting-started/starting-a-node.new/#beacon-node","title":"Beacon Node","text":""},{"location":"getting-started/starting-a-node.new/#validator-client","title":"Validator Client","text":""},{"location":"getting-started/starting-a-node.new/#production-considerations","title":"Production Considerations","text":""},{"location":"getting-started/starting-a-node.new/#ingressegress","title":"Ingress/Egress","text":""},{"location":"getting-started/starting-a-node.new/#fail-over","title":"Fail-Over","text":""},{"location":"lightclient-prover/lightclient-cli/","title":"<code>lightclient</code> CLI Command","text":"<p>Run lightclient</p> <p></p>"},{"location":"lightclient-prover/lightclient-cli/#examples","title":"Examples","text":"<p>Run lightclient with goerli network</p> <pre><code>./lodestar lightclient --network goerli\n</code></pre> <p></p>"},{"location":"lightclient-prover/lightclient-cli/#lightclient-options","title":"<code>lightclient</code> Options","text":""},{"location":"lightclient-prover/lightclient-cli/#-datadir","title":"<code>--dataDir</code>","text":"<p>description: Lodestar root data directory</p> <p>type: <code>string</code></p> <p></p>"},{"location":"lightclient-prover/lightclient-cli/#-network","title":"<code>--network</code>","text":"<p>description: Name of the Ethereum Consensus chain network to join</p> <p>type: <code>string</code></p> <p>choices: \"mainnet\", \"gnosis\", \"goerli\", \"ropsten\", \"sepolia\", \"holesky\", \"chiado\", \"ephemery\", \"dev\"</p> <p>default: <code>\"mainnet\"</code></p> <p></p>"},{"location":"lightclient-prover/lightclient-cli/#-paramsfile","title":"<code>--paramsFile</code>","text":"<p>description: Network configuration file</p> <p>type: <code>string</code></p> <p></p>"},{"location":"lightclient-prover/lightclient-cli/#-terminal-total-difficulty-override","title":"<code>--terminal-total-difficulty-override</code>","text":"<p>description: Terminal PoW block TTD override</p> <p>type: <code>string</code></p> <p></p>"},{"location":"lightclient-prover/lightclient-cli/#-terminal-block-hash-override","title":"<code>--terminal-block-hash-override</code>","text":"<p>description: Terminal PoW block hash override</p> <p>type: <code>string</code></p> <p></p>"},{"location":"lightclient-prover/lightclient-cli/#-terminal-block-hash-epoch-override","title":"<code>--terminal-block-hash-epoch-override</code>","text":"<p>description: Terminal PoW block hash override activation epoch</p> <p>type: <code>string</code></p> <p></p>"},{"location":"lightclient-prover/lightclient-cli/#-loglevel","title":"<code>--logLevel</code>","text":"<p>description: Logging verbosity level for emitting logs to terminal</p> <p>type: <code>string</code></p> <p>choices: \"error\", \"warn\", \"info\", \"verbose\", \"debug\", \"trace\"</p> <p>default: <code>\"info\"</code></p> <p></p>"},{"location":"lightclient-prover/lightclient-cli/#-logfile","title":"<code>--logFile</code>","text":"<p>description: Path to output all logs to a persistent log file, use 'none' to disable</p> <p>type: <code>string</code></p> <p></p>"},{"location":"lightclient-prover/lightclient-cli/#-logfilelevel","title":"<code>--logFileLevel</code>","text":"<p>description: Logging verbosity level for emitting logs to file</p> <p>type: <code>string</code></p> <p>choices: \"error\", \"warn\", \"info\", \"verbose\", \"debug\", \"trace\"</p> <p>default: <code>\"debug\"</code></p> <p></p>"},{"location":"lightclient-prover/lightclient-cli/#-logfiledailyrotate","title":"<code>--logFileDailyRotate</code>","text":"<p>description: Daily rotate log files, set to an integer to limit the file count, set to 0 (zero) to disable rotation</p> <p>type: <code>number</code></p> <p>default: <code>5</code></p> <p></p>"},{"location":"lightclient-prover/lightclient-cli/#-beaconapiurl","title":"<code>--beaconApiUrl</code>","text":"<p>description: Url to a beacon node that support lightclient API</p> <p>type: <code>string</code></p> <p></p>"},{"location":"lightclient-prover/lightclient-cli/#-checkpointroot","title":"<code>--checkpointRoot</code>","text":"<p>description: Checkpoint root hex string to sync the lightclient from, start with 0x</p> <p>type: <code>string</code></p> <p></p>"},{"location":"lightclient-prover/lightclient/","title":"Lodestar Light Client","text":"<p>Ethereum light clients provide a pathway for users to interact with the Ethereum blockchain in a trust-minimized manner, comparable to the level of trust required when engaging with a third-party provider like Infura or EtherScan. Not that those platforms are bad, but trust in any centralized provider goes against the ethos of blockchain. Light clients are a way that low-power devices, like cell phones, can do self validation of transactions and dApp state.</p> <p>Unlike full nodes, light clients do not download and store the entire blockchain. Instead, they download only the headers of each block and employ Merkle proofs to verify transactions. This enables a quick synchronization with the network and access the latest information without using significant system resources\u200b. This streamlined approach to accessing Ethereum is crucial, especially in scenarios where full-scale network participation is infeasible or undesired.</p> <p>The evolution of light clients is emblematic of the broader trajectory of Ethereum towards becoming more accessible and resource-efficient, making blockchain technology more inclusive and adaptable to a wide array of use cases and environments. The Altair hard fork introduced sync committees to allow light-clients to synchronize to the network.</p>"},{"location":"lightclient-prover/lightclient/#prerequisites","title":"Prerequisites","text":"<p>This package is part of ChainSafe's Lodestar project</p>"},{"location":"lightclient-prover/lightclient/#requirements-for-running-a-light-client","title":"Requirements for Running a Light-Client","text":"<p>Access to an beacon node that supports the light client specification is necessary. The client must support the following routes from the consensus API spec:</p> <ul> <li><code>/eth/v1/beacon/light_client/updates</code></li> <li><code>/eth/v1/beacon/light_client/optimistic_update</code></li> <li><code>/eth/v1/beacon/light_client/finality_update</code></li> <li><code>/eth/v1/beacon/light_client/bootstrap/{block_root}</code></li> <li><code>/eth/v0/beacon/light_client/committee_root</code></li> </ul> <p>System requirements are quite low so its possible to run a light client in the browser as part of a website. There are a few examples of this on github that you can use as reference, our prover being one of them.</p> <p>You can find more information about the light-client protocol in the specification.</p>"},{"location":"lightclient-prover/lightclient/#getting-started","title":"Getting started","text":"<ul> <li>Follow the installation guide or Docker install to install Lodestar.</li> <li>Quickly try out the whole stack by starting a local testnet.</li> </ul>"},{"location":"lightclient-prover/lightclient/#light-client-cli-example","title":"Light-Client CLI Example","text":"<p>It is possible to start up the light-client as a standalone process.</p> <pre><code>lodestar lightclient \\\n    --network mainnet \\\n    --beacon-api-url https://beacon-node.your-domain.com \\\n    --checkpoint-root \"0xccaff4b99986a7b05e06738f1828a32e40799b277fd9f9ff069be55341fe0229\"\n</code></pre>"},{"location":"lightclient-prover/lightclient/#light-client-programmatic-example","title":"Light-Client Programmatic Example","text":"<p>For this example we will assume there is a running beacon node at <code>https://beacon-node.your-domain.com</code></p> <pre><code>import {Api} from \"@lodestar/api/beacon\";\nimport {ApiError} from \"@lodestar/api\";\nimport {Bytes32} from \"@lodestar/types\";\nimport {createChainForkConfig} from \"@lodestar/config\";\nimport {networksChainConfig} from \"@lodestar/config/networks\";\nimport {\n    GenesisData,\n    Lightclient,\n    LightclientEvent,\n    RunStatusCode,\n    getLcLoggerConsole\n} from `@lodestar/lightclient`;\n\nasync function getGenesisData(api: Pick&lt;Api, \"beacon\"&gt;): Promise&lt;GenesisData&gt; {\n    const res = await api.beacon.getGenesis();\n    ApiError.assert(res);\n\n    return {\n        genesisTime: Number(res.response.data.genesisTime),\n        genesisValidatorsRoot: res.response.data.genesisValidatorsRoot,\n    };\n}\n\nasync function getSyncCheckpoint(api: Pick&lt;Api, \"beacon\"&gt;): Promise&lt;Bytes32&gt; {\n    const res = await api.beacon.getStateFinalityCheckpoints(\"head\");\n    ApiError.assert(res);\n    return res.response.data.finalized.root;\n}\n\nconst config = createChainForkConfig(networksChainConfig.mainnet);\n\nconst logger = getLcLoggerConsole({logDebug: Boolean(process.env.DEBUG)});\n\nconst api = getClient({urls: [\"https://beacon-node.your-domain.com\"]}, {config});\n\nconst transport = new LightClientRestTransport(api);\n\nconst lightclient = await Lightclient.initializeFromCheckpointRoot({\n    config,\n    logger,\n    transport,\n    genesisData: await getGenesisData(api),\n    checkpointRoot: await getSyncCheckpoint(api),\n    opts: {\n        allowForcedUpdates: true,\n        updateHeadersOnForcedUpdate: true,\n    }\n});\n\n// Wait for the lightclient to start\nawait new Promise&lt;void&gt;((resolve) =&gt; {\n    const lightclientStarted = (status: RunStatusCode): void =&gt; {\n        if (status === RunStatusCode.started) {\n            this.lightclient?.emitter.off(LightclientEvent.statusChange, lightclientStarted);\n            resolve();\n        }\n    };\n    lightclient?.emitter.on(LightclientEvent.statusChange, lightclientStarted);\n    logger.info(\"Initiating lightclient\");\n    lightclient?.start();\n});\n\nlogger.info(\"Lightclient synced\");\n\nlightclient.emitter.on(LightclientEvent.lightClientFinalityHeader, async (finalityUpdate) =&gt; {\n    console.log(finalityUpdate);\n});\n\nlightclient.emitter.on(LightclientEvent.lightClientOptimisticHeader, async (optimisticUpdate) =&gt; {\n    console.log(optimisticUpdate);\n});\n</code></pre>"},{"location":"lightclient-prover/lightclient/#contributors","title":"Contributors","text":"<p>Read our contribution documentation, submit an issue or talk to us on our discord!</p>"},{"location":"lightclient-prover/lightclient/#license","title":"License","text":"<p>Apache-2.0 ChainSafe Systems</p>"},{"location":"lightclient-prover/prover/","title":"Lodestar Eth Consensus Lightclient Prover","text":"<p>This package is part of ChainSafe's Lodestar project</p> <p>Typescript REST client for the Ethereum Consensus API spec</p>"},{"location":"lightclient-prover/prover/#usage","title":"Usage","text":"<p>You can use the <code>@lodestar/prover</code> in two ways, as a Web3 Provider and as proxy. For prover use case see below example.</p> <pre><code>import Web3 from \"web3\";\nimport {createVerifiedExecutionProvider, LCTransport} from \"@lodestar/prover\";\n\nconst {provider, proofProvider} = createVerifiedExecutionProvider(\n  new Web3.providers.HttpProvider(\"https://lodestar-sepoliarpc.chainsafe.io\"),\n  {\n    transport: LCTransport.Rest,\n    urls: [\"https://lodestar-sepolia.chainsafe.io\"],\n    network: \"sepolia\",\n    wsCheckpoint: \"trusted-checkpoint\",\n  }\n);\n\nconst web3 = new Web3(provider);\n\nconst address = \"0xf97e180c050e5Ab072211Ad2C213Eb5AEE4DF134\";\nconst balance = await web3.eth.getBalance(address, \"latest\");\nconsole.log({balance, address});\n</code></pre> <p>You can also invoke the package as binary.</p> <pre><code>npm -i g @lodestar/prover\n\nlodestar-prover start \\\n  --network sepolia \\\n  --execution-rpc https://lodestar-sepoliarpc.chainsafe.io \\\n  --mode rest \\\n  --beacon-rpc https://lodestar-sepolia.chainsafe.io \\\n  --port 8080\n</code></pre>"},{"location":"lightclient-prover/prover/#supported-web3-methods","title":"Supported Web3 Methods","text":"<p>\u2705 - Completed</p> <p>\u231b - Todo</p> <p>\u27a1\ufe0f - Request will be forward to EL without any intermediary manipulations. You can limit these by providing <code>unverifiedWhitelist</code> option for provider or <code>--unverifiedWhitelist</code> from the cli. If not set then all methods will be forwarded.</p> <p>\u2747\ufe0f - Always forwarded to EL.</p> Group Method Status Version Block eth_getBlockByHash \u2705 v0 eth_getBlockByNumber \u2705 v0 eth_getBlockTransactionCountByHash \u231b v2 eth_getBlockTransactionCountByNumber \u231b v2 eth_getUncleCountByBlockHash \u231b v2 eth_getUncleCountByBlockNumber \u231b v2 Chain/Network eth_chainId \u27a1\ufe0f eth_syncing \u231b v1 eth_coinbase \u231b v2 eth_accounts \u27a1\ufe0f eth_blockNumber \u27a1\ufe0f Call and Estimate eth_call \u2705 v0 eth_estimateGas \u2705 v0 eth_createAccessList \u231b v2 eth_gasPrice \u231b v1 eth_maxPriorityFeePerGas \u231b v1 eth_feeHistory \u231b v2 Filters eth_newFilter \u231b v2 eth_newBlockFilter \u231b v2 eth_newPendingTransactionFilter \u231b v2 eth_uninstallFilter \u231b v2 eth_getFilterChanges \u231b v2 eth_getFilterLogs \u231b v2 eth_getLogs \u231b v1 Mining eth_mining \u27a1\ufe0f eth_hashrate \u27a1\ufe0f eth_getWork \u27a1\ufe0f eth_submitWork \u27a1\ufe0f eth_submitHashrate \u27a1\ufe0f Signing eth_sign \u27a1\ufe0f eth_signTransaction \u27a1\ufe0f State eth_getBalance \u2705 v0 eth_getStorageAt \u231b v1 eth_getTransactionCount \u231b v2 eth_getCode \u2705 v0 eth_getProof \u2747\ufe0f v0 Transactions eth_sendTransaction \u27a1\ufe0f eth_sendRawTransaction \u27a1\ufe0f eth_getTransactionByHash \u231b v2 eth_getTransactionByBlockHashAndIndex \u231b v2 eth_getTransactionByBlockNumberAndIndex \u231b v2 eth_getTransactionReceipt \u231b v2 Events eth_subscribe \u2747\ufe0f v0 eth_unsubscribe \u2747\ufe0f v0"},{"location":"lightclient-prover/prover/#non-supported-features","title":"Non-supported features","text":"<ul> <li>Currently does not support batch requests.</li> </ul>"},{"location":"lightclient-prover/prover/#warnings","title":"Warnings","text":"<ul> <li>To use this prover the ethereum provider must support the <code>eth_getProof</code> method. Unfortunately, Infura does not currently support this endpoint. As an alternative, we suggest using Alchemy.</li> </ul>"},{"location":"lightclient-prover/prover/#prerequisites","title":"Prerequisites","text":"<ul> <li>NodeJS (LTS)</li> <li>Yarn</li> </ul>"},{"location":"lightclient-prover/prover/#what-you-need","title":"What you need","text":"<p>You will need to go over the specification. You will also need to have a basic understanding of lightclient.</p>"},{"location":"lightclient-prover/prover/#getting-started","title":"Getting started","text":"<ul> <li>Follow the installation guide to install Lodestar.</li> <li>Quickly try out the whole stack by starting a local testnet.</li> </ul>"},{"location":"lightclient-prover/prover/#contributors","title":"Contributors","text":"<p>Read our contributors document, submit an issue or talk to us on our discord!</p>"},{"location":"lightclient-prover/prover/#license","title":"License","text":"<p>Apache-2.0 ChainSafe Systems</p>"},{"location":"logging-and-metrics/client-monitoring/","title":"Client monitoring","text":"<p>Lodestar has the ability to send client stats to a remote service for collection. At the moment, the main service offering remote monitoring is beaconcha.in.</p> <p>Instructions for setting up client monitoring with beaconcha.in can be found in their docs about Mobile App &lt;&gt; Node Monitoring and in your account settings.</p>"},{"location":"logging-and-metrics/client-monitoring/#configuration","title":"Configuration","text":"<p>Lodestar provides CLI options to configure monitoring on both the beacon node and validator client.</p>"},{"location":"logging-and-metrics/client-monitoring/#remote-endpoint-url","title":"Remote endpoint URL","text":"<p>Client monitoring can be enabled by setting the <code>--monitoring.endpoint</code> flag to a remote service endpoint URL.</p> <pre><code>--monitoring.endpoint \"https://beaconcha.in/api/v1/client/metrics?apikey={apikey}&amp;machine={machineName}\"\n</code></pre> <p>In case of beaconcha.in, the API key can be found in your account settings. Setting the machine is optional but it is especially useful if you are monitoring multiple nodes.</p> <p>Note</p> <p>When sending data to a remote service you should be conscious about security:</p> <ul> <li>Only use a service that you trust as this will send information which may identify you   and associate your validators, IP address and other personal information.</li> <li>Always use a HTTPS connection (i.e. a URL starting with <code>https://</code>) to prevent the traffic   from being intercepted in transit and leaking information.</li> </ul> <p>More details about the data sent to the remote service can be found in the specification.</p> <p>It is also possible to print out the data sent to the remote service by enabling debug logs which can be done by supplying the <code>--logLevel debug</code> flag.</p>"},{"location":"logging-and-metrics/client-monitoring/#monitoring-interval","title":"Monitoring interval","text":"<p>It is possible to adjust the interval between sending client stats to the remote service by setting the <code>--monitoring.interval</code> flag. It takes an integer value in milliseconds, the default is <code>60000</code> which means data is sent once a minute.</p> <p>For example, setting an interval of <code>300000</code> would mean the data is only sent every 5 minutes.</p> <pre><code>--monitoring.interval 300000\n</code></pre> <p>Increasing the monitoring interval can be useful if you are running into rate limit errors when posting large amounts of data for multiple nodes.</p>"},{"location":"logging-and-metrics/log-management/","title":"Log Management","text":"<p>Check back soon for more information!!</p>"},{"location":"logging-and-metrics/prometheus-grafana/","title":"Prometheus and Grafana","text":"<p>Prometheus is an open-source monitoring system with efficient time series database and a modern alerting approach. Together with Grafana it's the recommended way to make sure that your node and validator(s) are performing correctly.</p>"},{"location":"logging-and-metrics/prometheus-grafana/#prometheus","title":"Prometheus","text":"<p>To start, download Prometheus from https://prometheus.io/download/. Unzip the downloaded .zip file and run Prometheus from its installed location with the lodestar <code>prometheus.yml</code> passed in as the configuration file</p> <pre><code>./prometheus --config.file=$dataDir/prometheus.yml\n</code></pre> <p>Info</p> <p>8008 is also the default port specified in the <code>prometheus.yml</code> in the lodestar repository</p> <p>Then run the Lodestar beacon node with</p> <pre><code>lodestar --metrics=true --metrics.port=8008\n</code></pre> <p>Navigate to http://localhost:9090/ in your browser to verify that Prometheus is monitoring Lodestar</p>"},{"location":"logging-and-metrics/prometheus-grafana/#grafana","title":"Grafana","text":"<p>Download and install Grafana from its official repository https://grafana.com/docs/grafana/latest/installation/debian/</p> <p>Add Prometheus as a data source to Grafana https://prometheus.io/docs/visualization/grafana/#installing</p> <p>An example of relevant metrics of interest to monitor are:</p> <ul> <li><code>nodejs_heap_space_size_used_bytes</code></li> <li><code>nodejs_eventloop_lag_seconds</code></li> <li><code>beaconchain_peers</code></li> <li><code>beaconchain_current_slot</code></li> <li><code>beaconchain_current_finalized_epoch</code></li> </ul>"},{"location":"reference/cli/","title":"Page relocated","text":"<p>Welcome! This page has been moved. Please checkout our new docs layout from the Table of Contents! Below are some helpful links to the CLI pages that were split out from this original document</p> <ul> <li>Beacon Node CLI</li> <li>Validator CLI</li> <li>Bootnode CLI</li> <li>Light Client CLI</li> </ul>"},{"location":"supporting-libraries/","title":"Supporting Libraries","text":""},{"location":"supporting-libraries/#networking","title":"Networking","text":""},{"location":"supporting-libraries/#libp2p","title":"LibP2P","text":"<ul> <li><code>@chainsafe/js-libp2p-noise</code> - Noise handshake for <code>js-libp2p</code></li> <li><code>@chainsafe/js-libp2p-gossipsub</code> - Gossipsub protocol for <code>js-libp2p</code></li> <li><code>@chainsafe/libp2p-yamux</code></li> </ul>"},{"location":"supporting-libraries/#discv5","title":"Discv5","text":"<ul> <li><code>discv5</code> - Discv5 protocol</li> </ul>"},{"location":"supporting-libraries/#serialization-and-hashing","title":"Serialization and Hashing","text":"<ul> <li><code>@chainsafe/ssz</code> - Simple Serialize (SSZ)</li> <li><code>@chainsafe/persistent-merkle-tree</code> - binary merkle tree implemented as a persistent data structure</li> <li><code>@chainsafe/as-sha256</code> - Small AssemblyScript implementation of SHA256</li> </ul>"},{"location":"supporting-libraries/#bls","title":"BLS","text":"<ul> <li><code>@chainsafe/bls</code> - Isomorphic Ethereum Consensus BLS sign / verify / aggregate</li> <li><code>@chainsafe/blst-ts</code> - Node specific Ethereum Consensus BLS sign / verify / aggregate</li> <li><code>@chainsafe/bls-keystore</code> - store / retrieve a BLS secret key from an EIP-2335 JSON keystore</li> <li><code>@chainsafe/bls-keygen</code> - utility functions to generate BLS secret keys, following EIP-2333 and EIP-2334</li> <li><code>@chainsafe/bls-hd-key</code> - low level EIP-2333 and EIP-2334 functionality</li> </ul>"},{"location":"supporting-libraries/libraries/","title":"Lodestar libraries","text":"<p>The Lodestar project is divided into Typescript packages that can be used independently of the CLI. These packages span the breadth of the Ethereum Consensus layer, and are perfect for Typescript developers looking to build around Ethereum.</p>"},{"location":"supporting-libraries/libraries/#monorepo-libraries","title":"Monorepo libraries","text":"<p>Several useful Ethereum consensus libraries are developed as part of the Lodestar monorepo and may be useful when used individually.</p> <ul> <li><code>params</code> - Ethereum consensus constants and fork names</li> <li><code>types</code> - Ethereum consensus types, Typescript interfaces and SSZ type objects</li> <li><code>config</code> - Ethereum consensus run-time network configuration</li> <li><code>api</code> - Ethereum consensus REST API client</li> <li><code>flare</code> - Beacon chain multi-purpose and debugging tool</li> </ul>"},{"location":"supporting-libraries/libraries/#other-libraries","title":"Other libraries","text":""},{"location":"supporting-libraries/libraries/#bls-utilities","title":"BLS Utilities","text":"<ul> <li><code>bls</code> - Ethereum Consensus BLS sign / verify / aggregate</li> <li><code>bls-keystore</code> - store / retrieve a BLS secret key from an EIP-2335 JSON keystore</li> <li><code>bls-keygen</code> - utility functions to generate BLS secret keys, following EIP-2333 and EIP-2334</li> <li><code>bls-hd-key</code> - low level EIP-2333 and EIP-2334 functionality</li> </ul>"},{"location":"supporting-libraries/libraries/#hashing","title":"Hashing","text":"<ul> <li><code>ssz</code> - Simple Serialize (SSZ)</li> <li><code>persistent-merkle-tree</code> - binary merkle tree implemented as a persistent data structure</li> <li><code>as-sha256</code> - Small AssemblyScript implementation of SHA256</li> </ul>"},{"location":"supporting-libraries/libraries/#networking","title":"Networking","text":"<ul> <li><code>discv5</code> - Discv5 protocol</li> <li><code>js-libp2p-gossipsub</code> - Gossipsub protocol for <code>js-libp2p</code></li> <li><code>js-libp2p-noise</code> - Noise handshake for <code>js-libp2p</code></li> </ul>"},{"location":"tools/core-dumps/","title":"Core Dump Analysis","text":"<p>Core dump analysis is some ninja level stuff. Once you get the hang of it you will feel like you have super powers. It will up your game to a whole new level because you will be able to debug issues that seemed impossible before. Post-crash analysis is a very powerful tool to have in your tool belt. A core dump has all of the objects in memory as well as all of the stack frame information at the exact moment the dump was taken, usually when a hard crash occurs.</p> <p>It is important to note that debug symbols will greatly aid you in your debugging for issues related to native code like <code>C/C++</code>. When compiled languages are optimized the compiler will often strip out identifiers and all that will be remaining are mangled symbols and addresses. Compiling with debug symbols will leave all of the identifiers, file names and line numbers in-tact.</p> <p>While it is not always practical to be running code in a Debug version of node, if you run across a persistent issue it will be helpful to recreate it on a debug build and to use that for analysis.</p> <p>It is important to note that the EXACT binary that was running when the dump was created MUST be loaded when doing analysis. There is a lot of information in the dump that is specific to the binary that was running (like function offsets, etc). If you load a different binary you will get a lot of errors and the analysis will not be useful (if it loads at all).</p> <p>It is also a nice-to-know that you can create the dump on linux, using a linux compiled version of node, and then read it on a mac. All that is needed is to download the node binary and dump file to the mac. It is possible to load them into a mac compiled version of llnode and all will work as expected. Its just the meta in the linux binary that is needed for analysis, it doesn't actually run the code.</p>"},{"location":"tools/core-dumps/#installing-llnode","title":"Installing <code>llnode</code>","text":"<p><code>llnode</code> is a Node.js plugin for the LLDB debugger. It is the officially sanctioned tool from Node and powerful way to do postmortem analysis of Node.js processes. The process for install is pretty straight-forward unless you have an M1 mac. XCode ships with an instance of <code>lldb</code> and installing <code>llnode</code> is as simple as running <code>npm install -g llnode</code>.</p> <p>On an M1 mac the install will work fine but the plugin will crash at load time. See this issue for updates. The workaround is to install <code>lldb</code> via homebrew.</p> <pre><code># should only be necessary on M1 macs at time of writing\n$ brew install llvm\n$ echo 'export PATH=\"/opt/homebrew/opt/llvm/bin:$PATH\"' &gt;&gt; ~/.zshrc\n$ # note that its before recopying PATH to make sure it resolves\n$ zsh ~/.zshrc\n$ which llvm-config\n/opt/homebrew/opt/llvm/bin/llvm-config # if this is not what comes up restart the shell\n$ npm install -g llnode\n$ llnode\n(lldb) plugin load '/Users/ninja_user/.nvm/versions/node/v20.5.1/lib/node_modules/llnode/llnode.dylib'\n(lldb) settings set prompt '(llnode) '\n(llnode)\n</code></pre>"},{"location":"tools/core-dumps/#collecting-a-core-dump","title":"Collecting a core dump","text":"<p>Before a core dump can be created the system must be enabled.</p> <pre><code>ulimit -c unlimited\n</code></pre> <p>This is a critical step. If that command is not run the core will not be dumped to disk.</p> <p>Core dumps are normally created by the kernel when certain process signals are encountered. <code>SIGSEGV</code> is the most common signal that will cause a dump and its sent by the kernel to the process when a segfault occurs. <code>SIGSEGV</code> is not the only signal that works and you can see the full list here under the \"Standard Signals\" section (all the ones that say \"Core\" in the \"Action\" column).</p> <p>If you want to create a dump on demand you can use the <code>gcore</code> command on linux. This will create a dump of the process without killing it. If you don't mind termination you can also use <code>kill -SIGSEGV &lt;pid&gt;</code> to send the a dump signal to the process.</p>"},{"location":"tools/core-dumps/#analyzing-a-core-dump","title":"Analyzing a core dump","text":"<p>Once you collect the core dump you can load it into <code>llnode</code> for debugging.</p> <pre><code># remember that the node binary must be the exact same one that was running when the core was created\n$ llnode -f /path/to/node_debug -c /Users/ninja_user/coredumps/node.coredump\n(lldb) target create \"node_debug\" --core \"node.coredump\"\nCore file '/Users/ninja_user/coredumps/node.coredump' (x86_64) was loaded.\n(lldb) plugin load '/Users/ninja_user/.nvm/versions/node/v20.5.1/lib/node_modules/llnode/llnode.dylib'\n(lldb) settings set prompt '(llnode) '\n(llnode)\n</code></pre> <p>Once the dump is loaded the first few steps will be to figure out what types of objects were in memory and what was the processor working on when the crash occurred. Lets start with the stack trace.</p> <p>There are two distinct commands for pulling the stack because node is both a native runtime and a virtual machine. The <code>bt</code>, back trace, command will pull the native stack frames and the <code>v8 bt</code> command will use the <code>llnode</code> plugin to pull the JavaScript stack frames. Newer versions of <code>llnode</code> will automatically pull the JavaScript stack frames when the <code>bt</code> command is run but it is still good to know the difference. It is also possible to add the <code>all</code> verb to the <code>bt</code> command and it will pull the back trace for all threads.</p> <p>To start looking through memory there are two commands that are helpful. The <code>v8 findjsobjects</code> command will list all of the JavaScript objects in memory. The <code>v8 findjsinstances</code> command will list all of the instances of a particular JavaScript object.</p>"},{"location":"tools/flamegraphs/","title":"Generating Flamegraphs for a Running Node Service on Linux","text":"<p>This guide assumes a running instance of Lodestar and will walk through how to generate a flamegraph for the process while running on Linux. While it is possible to run Lodestar in a number of ways, for performance profiling it is recommended to not use Dockerized implementations. It is best to run Lodestar as a service on a Linux machine. Follow the Lodestar docs to get the service installed and running. Then come back here when you are ready to generate the flamegraph.</p>"},{"location":"tools/flamegraphs/#modifying-linux-and-lodestar","title":"Modifying Linux and Lodestar","text":"<p>Use the following two commands to install <code>perf</code> for generating the stack traces. You may get a warning about needing to restart the VM due to kernel updates. This is nothing to be concerned with and if so, cancel out of the restart dialog.</p> <pre><code>sudo apt-get install linux-tools-common linux-tools-generic\nsudo apt-get install linux-tools-`uname -r`  # empirically this throws if run on the same line above\n</code></pre> <p>Next we need to update the Lodestar service by modifying the start script. We need to add a necessary flag <code>--perf-basic-prof</code> to allow the stack traces to be useful. Node is a virtual machine and <code>perf</code> is designed to capture host stack traces. In order to allow the JavaScript functions to be captured meaningfully, <code>v8</code> can provide some help. Generally Lodestar is started with a script like the following:</p>"},{"location":"tools/flamegraphs/#example-start_lodestarsh","title":"Example start_lodestar.sh","text":"<pre><code>node \\\n  --perf-basic-prof \\\n  --max-old-space-size=4096 \\\n  /usr/src/lodestar/packages/cli/bin/lodestar \\\n  beacon \\\n  --rcConfig /home/devops/beacon/rcconfig.yml\n</code></pre> <p>After updating the start script, restart the node process running the beacon service. Note in the command below, that the <code>beacon</code> service may have a different name or restart command, depending on your setup.</p> <pre><code>admin@12.34.56.78: sudo systemctl restart beacon\n</code></pre> <p>The flag that was added notifies <code>V8</code> to output a map of functions and their addresses. This is necessary for <code>perf</code> to generate the stack traces for the virtual machine in addition to the traditional host stack traces. There is a very small, performance overhead to output the maps. After a short while, once the process runs for a bit the functions will no longer be moving in memory and the overhead will be significantly reduced. The VM will still be moving objects around but this flag is generally safe to run in production. After a few minutes of running, listing the directory with the start script (<code>process.cwd()</code>) will look similar:</p> <pre><code>-rw-r--r--  1 admin admin   9701529 May 22 00:36 beacon-2023-05-22.log\n-rwxrwxr-x  1 admin root        421 May 22 00:31 beacon_run.sh\ndrwxr-xr-x  2 admin admin    917504 May 22 00:35 chain-db\n-rw-r--r--  1 admin admin   2861242 May 22 00:36 isolate-0x6761520-2085004-v8.log\n-rw-r--r--  1 admin admin    203172 May 22 00:36 isolate-0x7fa2f0001060-2085004-v8.log\n-rw-r--r--  1 admin admin     68044 May 22 00:36 isolate-0x7fcd80001060-2085004-v8.log\n-rw-r--r--  1 admin admin    420809 May 22 00:36 isolate-0x7fcd84001060-2085004-v8.log\n-rw-r--r--  1 admin admin    123919 May 22 00:36 isolate-0x7fcd88001060-2085004-v8.log\n-rw-r--r--  1 admin admin     94391 May 22 00:35 isolate-0x7fcd8c001060-2085004-v8.log\n-rw-r--r--  1 admin admin    183831 May 22 00:36 isolate-0x7fcd90000e60-2085004-v8.log\n-rw-r--r--  1 admin admin    152786 May 22 00:36 isolate-0x7fcd94000e60-2085004-v8.log\n-rw-r--r--  1 admin admin    262333 May 22 00:36 isolate-0x7fcd98000e60-2085004-v8.log\n-rw-r--r--  1 admin admin    218473 May 22 00:36 isolate-0x7fcd9c000e60-2085004-v8.log\n-rw-r--r--  1 admin admin    366788 May 22 00:36 isolate-0x7fcda0000e60-2085004-v8.log\n-rw-r--r--  1 admin admin    304917 May 22 00:36 isolate-0x7fcda4000e60-2085004-v8.log\n-rw-r--r--  1 admin admin    586238 May 22 00:36 isolate-0x7fcda8000e60-2085004-v8.log\n-rw-r--r--  1 admin admin    450675 May 22 00:36 isolate-0x7fcdac000e60-2085004-v8.log\n-rw-r--r--  1 admin admin    768470 May 22 00:36 isolate-0x7fcdb8000d60-2085004-v8.log\n-rw-r--r--  1 admin root        559 May 21 14:17 rcconfig.yml\n</code></pre> <p>The <code>isolate-*-v8.log</code> files are the maps that <code>v8</code> outputs for the <code>perf</code> command to reference. You are now ready to collect the stack traces.</p>"},{"location":"tools/flamegraphs/#capturing-stack-traces","title":"Capturing Stack Traces","text":"<p>The first command below will run <code>perf</code> for 60 seconds, and then save the output to a file named <code>perf.out</code>. The second one will merge the exported, unknown, tokens with the isolate maps and output full stack traces for the render. Running both <code>perf</code> commands in the folder with the <code>isolate</code> maps will allow the data to be seamlessly spliced. Once the output is saved, update the permissions so the file can be copied to your local machine via <code>scp</code>.</p> <p>You can modify the frequency of capture by changing <code>-F 99</code> to a different number. Try to stay away from whole numbers as they are more likely to cause interference with periodically scheduled tasks. As an example use <code>99Hz</code> or <code>997Hz</code> instead of <code>100Hz</code> or <code>1000Hz</code>. In testing neither seemed to have an appreciable affect on CPU usage when run for a short period of time.</p> <p>To change the period of capture adjust the sleep duration (which is in seconds).</p> <p>The <code>pgrep</code> command is used to find the process id to capture against. Feel free to pass a number to the <code>-p</code> flag if you know the process id, or adjust the file path if the executable is in a different location.</p> <pre><code>admin@12.34.56.78: sudo perf record -F 99 -p $(pgrep -f '/usr/src/lodestar/packages/cli/bin/lodestar beacon') -g -- sleep 60\nadmin@12.34.56.78: sudo perf script -f &gt; perf.out\nadmin@12.34.56.78: sudo chmod 777 ~/beacon/perf.out\n</code></pre> <p>And then copy the <code>perf.out</code> file to your local machine to render the flamegraph. Running at <code>99Hz</code> for 180 seconds results in a file size of about 3.5MB and <code>997Hz</code> for 60 seconds is roughly 4.4MB.</p> <pre><code>scp admin@12.34.56.78:/home/devops/beacon/out.perf /some_temp_dir/perf.out\n</code></pre>"},{"location":"tools/flamegraphs/#rendering-a-flamegraph","title":"Rendering a Flamegraph","text":"<p>By far the best tool to render flamegraphs is <code>flamescope</code> from Netflix. It allows for easy analysis and zooming into specific time periods. It also give a holistic view of how the process is performing over time.</p>"},{"location":"tools/flamegraphs/#installation","title":"Installation","text":"<p>Python3 is required. Clone the repository and install the dependencies:</p> <p>The original is no longer maintained and had a configuration bug. This is a fork that fixes the issue.</p> <pre><code>git clone https://github.com/matthewkeil/flamescope\ncd flamescope\npip3 install -r requirements.txt\nyarn\n</code></pre>"},{"location":"tools/flamegraphs/#usage","title":"Usage","text":"<pre><code>mv /some_temp_dir/perf.out /path/to/flamescope/examples\nyarn dev\n</code></pre> <p>Then navigate in a browser to <code>http://localhost:8080</code> and begin analyzing the data.</p> <p> </p>"},{"location":"tools/flamegraphs/#filtering-results","title":"Filtering Results","text":"<p>There can be a lot of \"noise\" in the stack traces with <code>libc</code>, <code>v8</code> and <code>libuv</code> calls. It is possible to filter the results to make it more useful, but note this will skew the results. Looking at the graph both filtered and unfiltered can be beneficial. The following <code>sed</code> command will remove the noise from the stack traces.</p> <pre><code>sed -r -e \"/( __libc_start| uv_| LazyCompile | v8::internal::| node::| Builtins_| Builtin:| Stub:| LoadIC:| \\\\[unknown\\\\]| LoadPolymorphicIC:)/d\" -e 's/ LazyCompile:[*~]?/ /'\n</code></pre>"},{"location":"tools/flamegraphs/#unfiltered","title":"Unfiltered","text":""},{"location":"tools/flamegraphs/#filtered","title":"Filtered","text":""},{"location":"tools/flamegraphs/#references","title":"References","text":""},{"location":"tools/flamegraphs/#list-of-web-references","title":"List of Web References","text":"<ul> <li>https://www.brendangregg.com/flamegraphs.html</li> <li>https://nodejs.org/en/docs/guides/diagnostics-flamegraph</li> <li>https://netflixtechblog.com/netflix-flamescope-a57ca19d47bb</li> <li>https://jaanhio.me/blog/nodejs-flamegraph-analysis/ (this was a great one about filtering methodology)</li> <li>https://medium.com/voodoo-engineering/node-js-and-cpu-profiling-on-production-in-real-time-without-downtime-d6e62af173e2</li> </ul>"},{"location":"tools/flamegraphs/#visualization-tools","title":"Visualization Tools","text":"<ul> <li><code>flamescope</code></li> </ul>"},{"location":"tools/flamegraphs/#collecting-on-linux","title":"Collecting on Linux","text":"<ul> <li>https://www.brendangregg.com/perf.html</li> <li>https://www.brendangregg.com/linuxperf.html</li> <li>https://www.brendangregg.com/blog/2014-09-17/node-flame-graphs-on-linux.html</li> <li>https://perf.wiki.kernel.org/index.php/Main_Page</li> </ul>"},{"location":"tools/flamegraphs/#collecting-on-macos","title":"Collecting on MacOS","text":"<ul> <li>https://gist.github.com/zeusdeux/aac6f8500917319213c5</li> <li>https://gist.github.com/loderunner/36724cc9ee8db66db305</li> <li>https://keith.github.io/xcode-man-pages/xctrace.1.html</li> </ul>"},{"location":"tools/heap-dumps/","title":"Heap Dump Analysis","text":"<p>There are a number of reason why one would want to do a heap dump but in particular, they are helpful for find memory intensive operations and leaks. There are two major types of heap dumps that are available to node developers. The first is a JavaScript heap dump, and the second is a native heap dump. The JS heap dump is much more common and is the default heap dump that is generated by <code>node</code>. It is useful when analyzing JS generated objects that are managed by the runtime. However there is one major limitation to the JS heap dump, and that is that it does not include native objects. This is where the native heap dump comes in handy. The native heap dump is a snapshot of the entire process memory, and includes objects that are allocated by <code>C/C++</code> code, including native modules in use by the application. The limitation to the native heap dump is that it will not include any JS objects that are allocated by the <code>V8</code> runtime. Those are generally created within <code>mmap</code>'ed pages and the native heap dump tools are specific to <code>C</code> objects that are created with <code>malloc</code> and destroyed via <code>free</code>. <code>C++</code> is also covered as <code>new</code> and <code>delete</code> are wrappers around <code>malloc</code> and <code>free</code>. This is why it is important to understand how to analyze both types of memory usage.</p>"},{"location":"tools/heap-dumps/#javascript-heap-dump","title":"JavaScript Heap Dump","text":"<p>Node has built in <code>V8</code> heap dump access and its a very powerful tool for analyzing memory usage. Understanding how the dump is created will both help to understand how it is displayed and how to use the analysis more effectively.</p> <p>The <code>V8</code> heap dump is a stop the world process because walking the entire heap graph is necessary to create one. This is similar to a full, major garbage collection event. The VM starts at the heap entrance node and walks the entire graph and makes note of every edge that connects each node along the way. Nodes are JSObjects and edges are references between those objects.</p> <p>By time the whole heap is walked the full size and values of all nodes are known and all of the connections between those nodes is well understood. The object that is returned is a set of three arrays, the nodes, the edges and the string values that are encountered (because strings are themselves arrays of characters in <code>C</code> so they are treated a bit differently by <code>V8</code>).</p>"},{"location":"tools/heap-dumps/#creating-a-v8-heap-dump","title":"Creating a <code>V8</code> heap dump","text":"<p>There are two functions for creating a heap dump but both call the same functionality under the hood. One streams the result, <code>require(\"v8\").getHeapSnapshot([options])</code>, and is primarily intended for use by the Chrome devtools button to \"take a snapshot\". The second writes the heap dump to a file, <code>require(\"v8\").writeHeapSnapshot(filename[,options])</code>.</p> <p>The optional <code>options</code> argument, in both cases, is the same and contains two props.<code>exposeInternals</code> and <code>exposeNumericValues</code> to enrich the dump. In many cases its the application layer that one wants to debug so <code>exposeInternals</code> is not usually necessary. In <code>V8</code> numbers are stored as 32bit integers and the size of pointers is also 32bits. So as an optimization, the pointer to the numeric value can be eliminated and the value itself can be stored in the <code>Address</code> of the <code>Value</code> instead. <code>exposeNumericValues</code> transcribes those \"pointers\" to the actual numeric value and appends them to the dump.</p> <p>Because heap analysis happens frequently during Lodestar development there is a helper api endpoint to capture a heap dump. It is IMPORTANT that this endpoint is not public facing as it will open the threat of DDOS attack.</p> <p>The endpoint accepts a <code>POST</code> request and you may include an optional <code>dirpath</code> query parameter to specify the directory where the heap dump will be written. If the <code>dirpath</code> is not specified then the heap dump will be written to the current working directory.</p> <p>To create a Lodestar heap dump you can use the following command:</p> <pre><code>curl -X POST http://localhost:9596/eth/v1/lodestar/write_heapdump?dirpath=/some/directory/path\n</code></pre>"},{"location":"tools/heap-dumps/#viewing-a-v8-heap-dump","title":"Viewing a <code>V8</code> heap dump","text":"<p>It is best to analyze on a local development machine so if Lodestar is running on a cloud instance download the dump to the local environment. Open Chrome, or any Chromium based browser (the example photos were taken using Brave). In the url bar type <code>chrome:://inspect</code> to bring up the DevTools menu (in brave the url will be rewritten to <code>brave://inspect</code>).</p> <p></p> <p>Click on the <code>Open dedicated DevTools for Node</code> link to open the node specific window and click on the <code>Memory</code> tab as shown below.</p> <p></p> <p>Load the profile by either right clicking on the left pane or by clicking the <code>Load</code> button at the bottom.</p> <p></p>"},{"location":"tools/heap-dumps/#analyzing-a-v8-heap-dump","title":"Analyzing a <code>V8</code> heap dump","text":"<p>Analysis is as much an art as it is a science and the best way to learn is to do it a few times. Generally the goal is looking for memory leaks but reducing memory overhead is also something that happens. This guide will focus on leaks. With memory leaks one is looking for why objects have references that prevent them from being garbage collected.</p> <p>To spot sources of leaks, focus on objects that have large quantities or very large <code>retained size</code>. Retained size is the amount of memory that would be freed if the object was garbage collected. As an example if there is an object that has lots and lots of instances, like 100,000, and they are all pushed into an array then the array will have a very large retained size. This is because the array is holding references to all of the objects that it contains.</p> <p>If it is not immediately apparent what objects are being leaked then another tool in your arsenal will be to take a second snapshot and compare it to the first. This will show what objects have been created/changed since the first snapshot.</p> <p>If there is an object that has a large retained size but is roughly the same, but not exactly the same, changes are that is NOT the leak. Some objects can get quite large during runtime but if its roughly the same size over time, but not exactly the same, it means that the application is modifying the object (why its not exactly identical in size) but if it hasn't grown significantly over time it can be assumed it is probably the working size of the instances.</p> <p>Try to focus on objects that are growing in size or in number over time. Growing in size means the object is holding references to other objects and growing in number means a function closure somewhere is retaining the small instances.</p> <p>That is the science part, but these clues are just breadcrumbs to follow. In order to actually resolve the leak, one needs to go into the code to figure out where those objects are being created, or more often, why the references to them are being retained. This is where the art comes in.</p> <p>Having a good understanding of the codebase will help to narrow down where to look. It is also common that the leak is not coming directly from Lodestar code, but rather one of the dependencies so be careful not to rule those out.</p>"},{"location":"tools/heap-dumps/#native-heap-dump","title":"Native Heap Dump","text":"<p>note: collecting a native heap dump is only supported on linux, analysis can be done from linux or Mac</p> <p>There are several tools that can be used to do native heap dump analysis. The most common are <code>massif</code> from the <code>Valgrind</code> suite, google's <code>gperftools</code> and <code>heaptrack</code> from KDE. Of the three, <code>heaptrack</code> is the most user friendly tool, and it is specifically designed for the task. It is much faster than <code>Valgrind</code>, easier to integrate than <code>gperftools</code> and also includes a gui for result analysis. Often times there are also memory allocations that are not related to memory leaks, and tools like <code>Valgrind</code> and <code>gperftools</code> become less useful. This is why <code>heaptrack</code> is the recommended tool for heap dump analysis on Lodestar.</p> <p>There are a few things that will make the results with <code>heaptrack</code> far better. The most important is using debug builds of all libraries included in a binary, including the application itself. This will make the results usable. Not to say that they will be useless without debug symbols but it will be kinda tough to optimize functions without knowing the function names nor the file and line numbers.</p> <p>This is the heart of what <code>heaptrack</code> will do for us. It hooks into the memory allocation and adds in stack traces for each <code>malloc</code> call site. That way every time memory is reserved there is a way to track back where it happened in the code. <code>heaptrack</code> also hooks into the <code>free</code> function and checks that versus the allocations to check for memory leaks and for temporary variables that can be optimized. This also allows for optimization of how many of each object is created by identifying high frequency allocations.</p> <p>Generally the .heapdump file will be created on a cloud server and then copied to a local machine for analysis, mostly because the gui is not available through ssh. The gui is not required for analysis but it is much easier to use than the command line tools. The first step will be to install <code>heaptrack</code> on the target server and to capture a profile.</p>"},{"location":"tools/heap-dumps/#build-collection-tools","title":"Build collection tools","text":"<p>Assume the following directory structure:</p> <pre><code>\u251c\u2500\u2500 beacon-node\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 db\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 logs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 start-lodestar.sh\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rc-config.yml\n\u251c\u2500\u2500 lodestar\n\u2514\u2500\u2500 node # step below will clone this repo\n</code></pre> <p>We will start from the directory that contains <code>lodestar</code> and the <code>beacon-node</code> files.</p> <pre><code># Install heaptrack\n$ sudo apt-get update\n$ sudo apt-get -y install heaptrack\n\n# Using a debug build of node is recommended and it can be build\n# from source. Clone the node repo to get started.\n$ git clone https://github.com/nodejs/node.git\n$ cd node\n\n# Use whichever version of node you prefer\n$ git checkout v20.10.0\n$ ./configure --debug\n\n# This command only builds the debug version of node and assumes\n# that a release version of node is already installed on the system\n$ make -C out BUILDTYPE=Debug -j$(nproc --all)\n\n# Move the debug version of node the the same folder that the release\n# version is installed in and name it `node_debug`.  This will put the\n# debug binary on the path and allow you to run it with the\n# `node_debug` command\n$ cp out/Debug/node \"$(which node)_debug\"\n$ which node_debug\n/your/home/directory/.nvm/versions/node/v20.10.0/bin/node_debug\n\n# Return to the lodestar repo\n$ cd ../lodestar\n\n# Clean the build artifacts and node_modules\n$ yarn clean &amp;&amp; yarn clean:nm\n\n# Install the dependencies\n$ yarn install\n\n# Ensure that all native modules are rebuilt with debug symbols. Some\n# modules are prebuilt, like classic-level, and the debug symbols may\n# not be included. If the the debugging exercise is focussed around\n# one of these dependencies, then you will need to manually clone those\n# repos and manually build them with debug symbols.\n$ npm rebuild --debug\n</code></pre>"},{"location":"tools/heap-dumps/#collect-a-heap-dump","title":"Collect a heap dump","text":"<pre><code># Move to th `beacon-node` directory\n$ cd ../beacon-node\n\n# Start lodestar with profiling enabled\n$ heaptrack \\\n$   --output ./lodestar.heapdump \\\n$   node_debug \\\n$   --max-old-space-size=8192 \\\n$   ../lodestar/packages/cli/bin/lodestar.js \\\n$   beacon \\\n$   --rcConfig ./rc-config.yml \\\n$   &gt; /dev/null 2&gt;&amp;1 &amp;\n# Wait some period of time for the heap dump data to be collected\n\n# The data will not be persisted until the process is stopped. You can gracefully\n# stop the process with the following command and if you want to hard kill it\n# add `-9` to the end of the `kill` command although that should not be necessary\n$ ps aux | grep lodestar | grep -v grep | awk '{print $2}' | head -n 1 | xargs kill\n</code></pre>"},{"location":"tools/heap-dumps/#collecting-a-heap-dump-on-a-running-process","title":"Collecting a heap dump on a running process","text":"<p>Collecting a heap dump can also be done on a running process. There are both advantages and disadvantages to this approach. The main advantage is that you can collect a heap dump without having to restart. The down side is that the dump will only include allocations/de-allocations while the tracker is running. This means that all the non-paired calls to malloc/free will register as leaks. It will also not give a true representation of how the heap is being used. On the upside, however the dump will be much smaller in size.</p> <p>It is important to note a warning that is in the <code>heaptrack</code> source code:</p> <p>WARNING: Runtime-attaching heaptrack is UNSTABLE and can lead to CRASHES in your application, especially after you detach heaptrack again. You are hereby warned, use it at your own risk!</p> <pre><code># Move to th `beacon-node` directory\n$ cd ../beacon-node\n\n# Start lodestar\n$ node_debug \\\n$   --max-old-space-size=8192 \\\n$   ../lodestar/packages/cli/bin/lodestar.js \\\n$   beacon \\\n$   --rcConfig ./rc-config.yml \\\n$   &gt; /dev/null 2&gt;&amp;1 &amp;\n# Wait some period of time to start collecting the dump\n\n# GDB is required to inject heaptrack into a running process\n# so you may need to install it\n$ sudo apt-get update\n$ sudo apt-get install -y gdb\n\n# Elevated `perf` permissions are also required depending on your\n# system configuration. Change until the next reboot\n$ echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope\n\n# Get the pid of the lodestar process\n$ export LODESTAR_PID=$(ps aux | grep lodestar | grep -v grep | awk '{print $2}' | head -n 1)\n\n# Inject heaptrack into the running process\n$ heaptrack --pid $LODESTAR_PID\n\nheaptrack output will be written to \"/home/user/beacon-node/heaptrack.node_debug.111868.zst\"\n/usr/lib/heaptrack/libheaptrack_preload.so\ninjecting heaptrack into application via GDB, this might take some time...\ninjection finished\n# Wait some period of time to collect the heap dump. See below\n# for the termination command that can be run from a separate\n# terminal when ready to stop collecting data\nTerminated\nremoving heaptrack injection via GDB, this might take some time...\nHeaptrack finished! Now run the following to investigate the data:\n\n  heaptrack --analyze \"/home/user/beacon-node/heaptrack.node_debug.111868.zst\"\n</code></pre> <p>There is a trap in <code>heaptrack</code> but the process uses a nested shell to do the actual injection so it is not possible to just Ctrl+C out of the injected process without corrupting the output file. To properly kill the collection one needs to target the nested shell pid. Here is a helper command to target that process:</p> <pre><code>ps -ef | grep '[h]eaptrack --pid' | awk '$3 == '$(ps -ef | grep '[h]eaptrack --pid' | awk '$3 != 1 {print $2}' | head -n 1)' {print $2}' | xargs -r kill\n</code></pre> <p>After working with the injected process for a while, I cannot honestly recommend it. It can work in a pinch, and is best suited for when the profiled process can be exited gracefully without repercussions (not on mainnet for instance). The benefit, though, is that the heapdump will be much smaller and targeted to runtime (will not have the transient, startup allocations) which can make it easier to see what is happening.</p>"},{"location":"tools/heap-dumps/#installing-heaptrack-gui-on-linux","title":"Installing <code>heaptrack-gui</code> on Linux","text":"<pre><code># You can you apt, apt-get or aptitude to install the gui\n$ sudo apt-get update\n$ sudo apt-get install -y heaptrack-gui\n</code></pre>"},{"location":"tools/heap-dumps/#installing-heaptrack-gui-on-osx","title":"Installing <code>heaptrack-gui</code> on OSX","text":"<p>At the time of writing this there is no official pre-built binary for OSX. This was a bit of a challenge but it was WELL worth the effort as the tool works very well. There were a number of bugs along the way while \"using the docs\" so your mileage may vary, but this is what worked for me.</p> <p>Most of the dependencies can be installed via Homebrew and the tool itself needs to be built from source. There was one dependency that needed to be built from source. This process assumes a working folder that the repos can be cloned into.</p> <pre><code># Start in the root folder where the repos will be cloned\n$ brew install qt@5\n\n# prepare tap of kde-mac/kde\n$ brew tap kde-mac/kde https://invent.kde.org/packaging/homebrew-kde.git\n$ \"$(brew --repo kde-mac/kde)/tools/do-caveats.sh\"\n\n# install the kde-mac and other required dependencies\n$ brew install kde-mac/kde/kf5-kcoreaddons \\\n$     kde-mac/kde/kf5-kitemmodels \\\n$     kde-mac/kde/kf5-kconfigwidgets \\\n$     kde-mac/kde/kdiagram \\\n$     extra-cmake-modules \\\n$     ki18n \\\n$     threadweaver \\\n$     boost \\\n$     zstd \\\n$     gettext\n\n# There is a bug in the current version of kde-mac/kde and one dependency needs\n# to be built manually. This is the workaround to get it built.\n$ git clone https://invent.kde.org/frameworks/kio.git\n$ mkdir kio/build\n$ cd kio/build\n$ export CMAKE_PREFIX_PATH=$(brew --prefix qt@5)\n$ cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..\n$ ninja\n$ sudo ninja install\n$ cd ../..\n\n# Now make sure that the dependencies are available to the system during runtime\n$ ln -sfv \"$(brew --prefix)/share/kf5\" \"$HOME/Library/Application Support\"\n$ ln -sfv \"$(brew --prefix)/share/knotifications5\" \"$HOME/Library/Application Support\"\n$ ln -sfv \"$(brew --prefix)/share/kservices5\" \"$HOME/Library/Application Support\"\n$ ln -sfv \"$(brew --prefix)/share/kservicetypes5\" \"$HOME/Library/Application Support\"\n\n# We are now ready to build the heaptrack_gui binaries for analysis on OSX\n$ git clone https://invent.kde.org/sdk/heaptrack.git\n$ cd heaptrack\n$ mkdir build\n$ cd build\n$ CMAKE_PREFIX_PATH=$(brew --prefix qt@5) PATH=$PATH:/opt/homebrew/opt/gettext/bin cmake ..\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\n$ make heaptrack_gui\n$ sudo make install\n# You can now find heaptrack_gui with your gui Applications. It is default\n# placed as /Applications/KDE/heaptrack_gui.app\n</code></pre>"},{"location":"validator-management/validator-cli/","title":"<code>validator</code> CLI Command","text":"<p>Run one or multiple validator clients</p> <p></p>"},{"location":"validator-management/validator-cli/#available-sub-commands","title":"Available Sub-Commands","text":"<p>The following sub-commands are available with the <code>validator</code> command:</p> <ul> <li> <p>validator slashing-protection import</p> </li> <li> <p>validator slashing-protection export</p> </li> <li> <p>validator import</p> </li> <li> <p>validator list</p> </li> <li> <p>validator voluntary-exit</p> </li> <li> <p>validator bls-to-execution-change</p> </li> </ul> <p></p>"},{"location":"validator-management/validator-cli/#examples","title":"Examples","text":""},{"location":"validator-management/validator-cli/#base-validator-command","title":"Base <code>validator</code> command","text":"<p>Run one validator client with all the keystores available in the directory .goerli/keystores</p> <pre><code>./lodestar validator --network goerli\n</code></pre> <p></p>"},{"location":"validator-management/validator-cli/#validator-options","title":"<code>validator</code> Options","text":""},{"location":"validator-management/validator-cli/#-datadir","title":"<code>--dataDir</code>","text":"<p>description: Lodestar root data directory</p> <p>type: <code>string</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-network","title":"<code>--network</code>","text":"<p>description: Name of the Ethereum Consensus chain network to join</p> <p>type: <code>string</code></p> <p>choices: \"mainnet\", \"gnosis\", \"goerli\", \"ropsten\", \"sepolia\", \"holesky\", \"chiado\", \"ephemery\", \"dev\"</p> <p>default: <code>\"mainnet\"</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-paramsfile","title":"<code>--paramsFile</code>","text":"<p>description: Network configuration file</p> <p>type: <code>string</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-terminal-total-difficulty-override","title":"<code>--terminal-total-difficulty-override</code>","text":"<p>description: Terminal PoW block TTD override</p> <p>type: <code>string</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-terminal-block-hash-override","title":"<code>--terminal-block-hash-override</code>","text":"<p>description: Terminal PoW block hash override</p> <p>type: <code>string</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-terminal-block-hash-epoch-override","title":"<code>--terminal-block-hash-epoch-override</code>","text":"<p>description: Terminal PoW block hash override activation epoch</p> <p>type: <code>string</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-loglevel","title":"<code>--logLevel</code>","text":"<p>description: Logging verbosity level for emitting logs to terminal</p> <p>type: <code>string</code></p> <p>choices: \"error\", \"warn\", \"info\", \"verbose\", \"debug\", \"trace\"</p> <p>default: <code>\"info\"</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-logfile","title":"<code>--logFile</code>","text":"<p>description: Path to output all logs to a persistent log file, use 'none' to disable</p> <p>type: <code>string</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-logfilelevel","title":"<code>--logFileLevel</code>","text":"<p>description: Logging verbosity level for emitting logs to file</p> <p>type: <code>string</code></p> <p>choices: \"error\", \"warn\", \"info\", \"verbose\", \"debug\", \"trace\"</p> <p>default: <code>\"debug\"</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-logfiledailyrotate","title":"<code>--logFileDailyRotate</code>","text":"<p>description: Daily rotate log files, set to an integer to limit the file count, set to 0 (zero) to disable rotation</p> <p>type: <code>number</code></p> <p>default: <code>5</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-keymanager","title":"<code>--keymanager</code>","text":"<p>description: Enable key manager API server</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-keymanagerauthenabled","title":"<code>--keymanager.authEnabled</code>","text":"<p>description: Enable token bearer authentication for key manager API server</p> <p>type: <code>boolean</code></p> <p>default: <code>true</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-keymanagerport","title":"<code>--keymanager.port</code>","text":"<p>description: Set port for key manager API</p> <p>type: <code>number</code></p> <p>default: <code>5062</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-keymanageraddress","title":"<code>--keymanager.address</code>","text":"<p>description: Set host for key manager API</p> <p>type: <code>string</code></p> <p>default: <code>\"127.0.0.1\"</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-keymanagercors","title":"<code>--keymanager.cors</code>","text":"<p>description: Configures the Access-Control-Allow-Origin CORS header for key manager API</p> <p>type: <code>string</code></p> <p>default: <code>\"*\"</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-beaconnodes","title":"<code>--beaconNodes</code>","text":"<p>description: Addresses to connect to BeaconNode</p> <p>type: <code>string[]</code></p> <p>default: <code>[ \"http://127.0.0.1:9596\" ]</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-force","title":"<code>--force</code>","text":"<p>description: Open validators even if there's a lockfile. Use with caution</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-graffiti","title":"<code>--graffiti</code>","text":"<p>description: Specify your custom graffiti to be included in blocks (plain UTF8 text, 32 characters max)</p> <p>type: <code>string</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-proposersettingsfile","title":"<code>--proposerSettingsFile</code>","text":"<p>description: A yaml file to specify detailed default and per validator public key customized proposer configs. PS: This feature and its format is in alpha and subject to change</p> <p>type: <code>string</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-suggestedfeerecipient","title":"<code>--suggestedFeeRecipient</code>","text":"<p>description: Specify fee recipient default for collecting the EL block fees and rewards (a hex string representing 20 bytes address: ^0x[a-fA-F0-9]{40}$). It would be possible (WIP) to override this per validator key using config or key manager API. Only used post merge.</p> <p>type: <code>string</code></p> <p>default: <code>\"0x0000000000000000000000000000000000000000\"</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-strictfeerecipientcheck","title":"<code>--strictFeeRecipientCheck</code>","text":"<p>description: Enable strict checking of the validator's <code>feeRecipient</code> with the one returned by engine</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-defaultgaslimit","title":"<code>--defaultGasLimit</code>","text":"<p>description: Suggested gas limit to the engine/builder for building execution payloads. Only used post merge.</p> <p>type: <code>number</code></p> <p>default: <code>30000000</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-builder","title":"<code>--builder</code>","text":"<p>description: An alias for <code>--builder.selection maxprofit</code> for the builder flow, ignored if <code>--builder.selection</code> is explicitly provided</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-builderselection","title":"<code>--builder.selection</code>","text":"<p>description: Builder block selection strategy <code>maxprofit</code>, <code>builderalways</code>, <code>builderonly</code> or <code>executiononly</code></p> <p>type: <code>string</code></p> <p>default: <code>\"executiononly\"</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-builderboostfactor","title":"<code>--builder.boostFactor</code>","text":"<p>description: Percentage multiplier the block producing beacon node must apply to boost (&gt;100) or dampen (&lt;100) builder block value for selection against execution block. The multiplier is ignored if <code>--builder.selection</code> is set to anything other than <code>maxprofit</code></p> <p>type: <code>string</code></p> <p>default: <code>\"100\"</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-useproduceblockv3","title":"<code>--useProduceBlockV3</code>","text":"<p>description: Enable/disable usage of produceBlockV3 for block production, is auto enabled on deneb+ blocks</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-broadcastvalidation","title":"<code>--broadcastValidation</code>","text":"<p>description: Validations to be run by beacon node for the signed block prior to publishing</p> <p>type: <code>string</code></p> <p>default: <code>\"gossip\"</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-blindedlocal","title":"<code>--blindedLocal</code>","text":"<p>description: Request fetching local block in blinded format for produceBlockV3</p> <p>type: <code>string</code></p> <p>default: <code>\"false\"</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-importkeystores","title":"<code>--importKeystores</code>","text":"<p>description: Path(s) to a directory or single file path to validator keystores, i.e. Launchpad validators</p> <p>type: <code>string[]</code></p> <p>default: <code>[ \"./keystores/*.json\" ]</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-importkeystorespassword","title":"<code>--importKeystoresPassword</code>","text":"<p>description: Path to a file with password to decrypt all keystores from <code>importKeystores</code> option</p> <p>type: <code>string</code></p> <p>default: <code>\"./password.txt\"</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-doppelgangerprotection","title":"<code>--doppelgangerProtection</code>","text":"<p>description: Enables Doppelganger protection</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-externalsignerurl","title":"<code>--externalSigner.url</code>","text":"<p>description: URL to connect to an external signing server</p> <p>type: <code>string</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-externalsignerpubkeys","title":"<code>--externalSigner.pubkeys</code>","text":"<p>description: List of validator public keys used by an external signer. May also provide a single string of comma-separated public keys</p> <p>type: <code>string[]</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-externalsignerfetch","title":"<code>--externalSigner.fetch</code>","text":"<p>description: Fetch the list of public keys to validate from an external signer. Cannot be used in combination with <code>--externalSigner.pubkeys</code></p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-distributed","title":"<code>--distributed</code>","text":"<p>description: Enables specific features required to run as part of a distributed validator cluster</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-metrics","title":"<code>--metrics</code>","text":"<p>description: Enable the Prometheus metrics HTTP server</p> <p>type: <code>boolean</code></p> <p>default: <code>false</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-metricsport","title":"<code>--metrics.port</code>","text":"<p>description: Listen TCP port for the Prometheus metrics HTTP server</p> <p>type: <code>number</code></p> <p>default: <code>5064</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-metricsaddress","title":"<code>--metrics.address</code>","text":"<p>description: Listen address for the Prometheus metrics HTTP server</p> <p>type: <code>string</code></p> <p>default: <code>\"127.0.0.1\"</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-monitoringendpoint","title":"<code>--monitoring.endpoint</code>","text":"<p>description: Enables monitoring service for sending clients stats to the specified endpoint of a remote service (e.g. beaconcha.in)</p> <p>type: <code>string</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-monitoringinterval","title":"<code>--monitoring.interval</code>","text":"<p>description: Interval in milliseconds between sending client stats to the remote service</p> <p>type: <code>number</code></p> <p>default: <code>60000</code></p> <p></p> <p></p>"},{"location":"validator-management/validator-cli/#validator-slashing-protection-import","title":"<code>validator slashing-protection import</code>","text":"<p>Import an interchange file.</p>"},{"location":"validator-management/validator-cli/#validator-slashing-protection-import-options","title":"<code>validator slashing-protection import</code> Options","text":"<p>Supports all parent command options plus the following:</p> <p></p>"},{"location":"validator-management/validator-cli/#-beaconnodes_1","title":"<code>--beaconNodes</code>","text":"<p>description: Addresses to connect to BeaconNode</p> <p>type: <code>string[]</code></p> <p>default: <code>[ \"http://127.0.0.1:9596\" ]</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-force_1","title":"<code>--force</code>","text":"<p>description: If <code>genesisValidatorsRoot</code> can't be fetched from the Beacon node, use a zero hash</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-file","title":"<code>--file</code>","text":"<p>description: The slashing protection interchange file to import (.json).</p> <p>required: true</p> <p>type: <code>string</code></p> <p></p> <p></p>"},{"location":"validator-management/validator-cli/#validator-slashing-protection-export","title":"<code>validator slashing-protection export</code>","text":"<p>Export an interchange file.</p>"},{"location":"validator-management/validator-cli/#validator-slashing-protection-export-options","title":"<code>validator slashing-protection export</code> Options","text":"<p>Supports all parent command options plus the following:</p> <p></p>"},{"location":"validator-management/validator-cli/#-beaconnodes_2","title":"<code>--beaconNodes</code>","text":"<p>description: Addresses to connect to BeaconNode</p> <p>type: <code>string[]</code></p> <p>default: <code>[ \"http://127.0.0.1:9596\" ]</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-force_2","title":"<code>--force</code>","text":"<p>description: If <code>genesisValidatorsRoot</code> can't be fetched from the Beacon node, use a zero hash</p> <p>type: <code>boolean</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-file_1","title":"<code>--file</code>","text":"<p>description: The slashing protection interchange file to export to (.json).</p> <p>required: true</p> <p>type: <code>string</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-pubkeys","title":"<code>--pubkeys</code>","text":"<p>description: Export slashing protection data only for a given subset of public keys</p> <p>type: <code>string[]</code></p> <p></p> <p></p>"},{"location":"validator-management/validator-cli/#validator-import","title":"<code>validator import</code>","text":"<p>Imports one or more EIP-2335 keystores into a Lodestar validator client directory, requesting passwords interactively. The directory flag provides a convenient method for importing a directory of keys generated by the eth2-deposit-cli Ethereum Foundation utility.</p>"},{"location":"validator-management/validator-cli/#validator-import-examples","title":"<code>validator import</code> Examples","text":"<p>Import validator keystores generated with the Ethereum Foundation Staking Launchpad</p> <pre><code>./lodestar validator import --network goerli --importKeystores $HOME/staking-deposit-cli/validator_keys\n</code></pre>"},{"location":"validator-management/validator-cli/#validator-import-options","title":"<code>validator import</code> Options","text":"<p>Supports all parent command options plus the following:</p> <p></p>"},{"location":"validator-management/validator-cli/#-importkeystores_1","title":"<code>--importKeystores</code>","text":"<p>description: Path(s) to a directory or single file path to validator keystores, i.e. Launchpad validators</p> <p>type: <code>string[]</code></p> <p>default: <code>[ \"./keystores/*.json\" ]</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-importkeystorespassword_1","title":"<code>--importKeystoresPassword</code>","text":"<p>description: Path to a file with password to decrypt all keystores from <code>importKeystores</code> option</p> <p>type: <code>string</code></p> <p>default: <code>\"./password.txt\"</code></p> <p></p> <p></p>"},{"location":"validator-management/validator-cli/#validator-list","title":"<code>validator list</code>","text":"<p>Lists the public keys of all validators</p>"},{"location":"validator-management/validator-cli/#validator-list-examples","title":"<code>validator list</code> Examples","text":"<p>List all validator public keys previously imported</p> <pre><code>./lodestar validator list\n</code></pre> <p></p>"},{"location":"validator-management/validator-cli/#validator-voluntary-exit","title":"<code>validator voluntary-exit</code>","text":"<p>Performs a voluntary exit for a given set of validators as identified via <code>pubkeys</code>. If no <code>pubkeys</code> are provided, it will exit all validators that have been imported.</p>"},{"location":"validator-management/validator-cli/#validator-voluntary-exit-examples","title":"<code>validator voluntary-exit</code> Examples","text":"<p>Perform a voluntary exit for the validator who has a public key 0xF00</p> <pre><code>./lodestar validator voluntary-exit --network goerli --pubkeys 0xF00\n</code></pre> <p>Perform a voluntary exit for the validator who has a public key 0xF00 and its secret key is on a remote signer</p> <pre><code>./lodestar validator voluntary-exit --network goerli --externalSigner.url http://signer:9000 --externalSigner.fetch --pubkeys 0xF00\n</code></pre>"},{"location":"validator-management/validator-cli/#validator-voluntary-exit-options","title":"<code>validator voluntary-exit</code> Options","text":"<p>Supports all parent command options plus the following:</p> <p></p>"},{"location":"validator-management/validator-cli/#-exitepoch","title":"<code>--exitEpoch</code>","text":"<p>description: The epoch upon which to submit the voluntary exit.  If no value is provided, then we default to the current epoch.</p> <p>type: <code>number</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-pubkeys_1","title":"<code>--pubkeys</code>","text":"<p>description: Public keys to exit</p> <p>type: <code>string[]</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-yes","title":"<code>--yes</code>","text":"<p>description: Skip confirmation prompt</p> <p>type: <code>boolean</code></p> <p></p> <p></p>"},{"location":"validator-management/validator-cli/#validator-bls-to-execution-change","title":"<code>validator bls-to-execution-change</code>","text":"<p>Performs BLS To Execution Change for a given validator (as identified via <code>publicKey</code>.  If no <code>publicKey</code> is provided, a prompt will ask the user which validator they would like to choose for BLS To Execution Change.</p>"},{"location":"validator-management/validator-cli/#validator-bls-to-execution-change-examples","title":"<code>validator bls-to-execution-change</code> Examples","text":"<p>Perform BLS To Execution Change for the validator who has a public key 0xF00</p> <pre><code>./lodestar validator bls-to-execution-change --publicKey 0xF00 --fromBlsPrivkey ... --toExecutionAddress ...\n</code></pre>"},{"location":"validator-management/validator-cli/#validator-bls-to-execution-change-options","title":"<code>validator bls-to-execution-change</code> Options","text":"<p>Supports all parent command options plus the following:</p> <p></p>"},{"location":"validator-management/validator-cli/#-publickey","title":"<code>--publicKey</code>","text":"<p>description: Validator public key for which to set withdrawal address hence enabling withdrawals</p> <p>type: <code>string</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-fromblsprivkey","title":"<code>--fromBlsPrivkey</code>","text":"<p>description: Bls withdrawals private key to sign the message</p> <p>type: <code>string</code></p> <p></p>"},{"location":"validator-management/validator-cli/#-toexecutionaddress","title":"<code>--toExecutionAddress</code>","text":"<p>description: Address to which the validator's balances will be set to be withdrawn.</p> <p>type: <code>string</code></p> <p></p>"},{"location":"validator-management/validator-management/","title":"Validator management","text":"<p>The following instructions are required for stakers utilizing Lodestar.</p> <ul> <li>Validator management<ul> <li>Wallet configuration<ul> <li>Create a wallet</li> </ul> </li> <li>Setup your validator<ul> <li>Import a validator keystore from your wallet to Lodestar<ul> <li>Option 1: Import Keys To Lodestar's Keystores Folder</li> <li>Option 2: Import Keys When Starting the Validator</li> </ul> </li> <li>Configuring the fee recipient address</li> <li>Submit a validator deposit</li> </ul> </li> <li>Run the validator</li> </ul> </li> </ul>"},{"location":"validator-management/validator-management/#wallet-configuration","title":"Wallet configuration","text":"<p>A wallet helps to manage many validators from a group of 12/24 words (also known as a \"mnemonic\" or \"recovery phrase\"). All validators and withdrawal keys can be re-generated from a backed-up mnemonic.</p> <p>The mnemonic is randomly generated during wallet creation and printed out to the terminal. It's important to make one or more backups of the mnemonic to ensure your ETH wallets are not lost in the case of data loss.</p> <p>Danger</p> <p>It is very important to keep your mnemonic private as it represents the ultimate control of your ETH wallets.</p>"},{"location":"validator-management/validator-management/#create-a-wallet","title":"Create a wallet","text":"<p>Lodestar is deprecating its functionality to create wallets.</p> <p>To create a wallet, we recommend using the official <code>staking-deposit-cli</code> from the Ethereum Foundation for users comfortable with command line interfaces.</p> <p>Alternatively, for a graphical user interface, you can use the Stakehouse Wagyu Key Generator developed by members of the EthStaker community.</p> <p>Info</p> <p>These tools will generate files for staking validators as well as the important mnemonic. This mnemonic must be handled and stored securely.</p>"},{"location":"validator-management/validator-management/#setup-your-validator","title":"Setup your validator","text":"<p>Validators are represented by a BLS keypair. Use your generated mnemonic from one of the tools above to generate the keystore files required for validator duties on Lodestar.</p>"},{"location":"validator-management/validator-management/#import-a-validator-keystore-from-your-wallet-to-lodestar","title":"Import a validator keystore from your wallet to Lodestar","text":"<p>To import a validator keystore that was created via one of the methods described above, you must locate the validator JSON keystores exported by those tools (ex. <code>keystore-m_12381_3600_0_0_0-1654128694.json</code>).</p> <p>Inside the keystore JSON file, you should have an EIP-2335 keystore file.</p> <p>You will also need the passphrase used the encrypt the keystore. This can be specified interactively, or provided in a plaintext file.</p>"},{"location":"validator-management/validator-management/#option-1-import-keys-to-lodestars-keystores-folder","title":"Option 1: Import Keys To Lodestar's Keystores Folder","text":"<p>You can load the keys into the keystore folder using the <code>validator import</code> command. There are two methods for importing keystores:</p> <p>Interactive passphrase import</p> <pre><code>./lodestar validator import --importKeystores ./validator_keys\n</code></pre> <p>Plaintext passphrase file import</p> <pre><code>./lodestar validator import --importKeystores ./validator_keys --importKeystoresPassword ./password.txt\n</code></pre> <p>Info</p> <p>The interactive passphrase import method will prompt every keystore in the <code>validator_keys</code> folder for import and will ask for the individual password for each keystore. This method will allow you to import multiple keystores with different passwords.</p> <p>The plaintext passphrase file import method will allow  to import all keystores in the <code>validator_keys</code> folder with the same password contained in <code>password.txt</code> for efficiency. </p> <p>Once imported with either method, these keystores will be automatically loaded when you start the validator. To list the imported keystores, use the <code>validator list</code> command.</p>"},{"location":"validator-management/validator-management/#option-2-import-keys-when-starting-the-validator","title":"Option 2: Import Keys When Starting the Validator","text":"<p>To import keys when you start the validator specify the <code>--importKeystores</code> and <code>--importKeystoresPassword</code> flags with the <code>validator</code> command:</p> <pre><code>./lodestar validator --importKeystores ./validator_keys --importKeystoresPassword ./password.txt\n</code></pre> <p>Warning</p> <p>If you import keys using <code>--importKeystores</code> at runtime (Option 2) any keys loaded to the keystores folder from Option 1 will be ignored.</p>"},{"location":"validator-management/validator-management/#configuring-the-fee-recipient-address","title":"Configuring the fee recipient address","text":"<p>Post-Merge Ethereum requires validators to set a Fee Recipient which allows you to receive priority fees when proposing blocks. If you do not set this address, your priority fees will be sent to the burn address.</p> <p>Configure your validator client's fee recipient address by using the <code>--suggestedFeeRecipient</code> flag. Ensure you specify an Ethereum address you control. An example of a fee recipient set with the address <code>0xB7576e9d314Df41EC5506494293Afb1bd5D3f65d</code> would add the following flag to their configuration: <code>--suggestedFeeRecipient 0xB7576e9d314Df41EC5506494293Afb1bd5D3f65d</code>.</p> <p>You may choose to use the <code>--strictFeeRecipientCheck</code> flag to enable a strict check of the fee recipient address with the one returned by the beacon node for added reassurance.</p>"},{"location":"validator-management/validator-management/#submit-a-validator-deposit","title":"Submit a validator deposit","text":"<p>Please use the official tools to perform your deposits</p> <ul> <li><code>staking-deposit-cli</code>: https://github.com/ethereum/staking-deposit-cli</li> <li>Ethereum Foundation launchpad: https://launchpad.ethereum.org</li> </ul>"},{"location":"validator-management/validator-management/#run-the-validator","title":"Run the validator","text":"<p>To start a Lodestar validator run the command:</p> <pre><code>./lodestar validator --network $NETWORK_NAME\n</code></pre> <p>You should see confirmation that modules have started.</p> <pre><code>Nov-29 10:47:13.647[]                 info: Lodestar network=sepolia, version=v1.2.2/f093b46, commit=f093b468ec3ab0dbbe8e2d2c8175f52ad88aa35f\nNov-29 10:47:13.649[]                 info: Connecting to LevelDB database path=/home/user/.local/share/lodestar/sepolia/validator-db\nNov-29 10:47:51.732[]                 info: 3 local keystores\nNov-29 10:47:51.735[]                 info: 0x800f6be579b31ea950a50be65f7de8f678b23b7466579c01ac26ebf9c19599fb2b446da40ad4fc92c6109fcd6793303f\nNov-29 10:47:51.735[]                 info: 0x81337ebe90d6942d8b61922ea880c4d28ebc745ddc10a1acc85b745a15c6c8754af1a73b1b3483b6a5024b783510b35c\nNov-29 10:47:51.757[]                 info: 0xb95fc0ec39596deee2c4363f57bb4786f5bb8dfb345c1e5b14e2927be482615971d0d81f9a88b3389fac7079b3cb2f46\nNov-29 10:47:51.776[]                 info: Genesis fetched from the beacon node\nNov-29 10:47:51.781[]                 info: Verified connected beacon node and validator have same the config\nNov-29 10:47:51.837[]                 info: Verified connected beacon node and validator have the same genesisValidatorRoot\nNov-29 10:47:51.914[]                 info: Discovered new validators count=100\nNov-29 10:48:00.197[]                 info: Published SyncCommitteeMessage slot=1165140, count=27\nNov-29 10:48:02.296[]                 info: Published attestations slot=1165140, count=6\nNov-29 10:48:08.122[]                 info: Published aggregateAndProofs slot=1165140, index=0, count=2\nNov-29 10:48:12.102[]                 info: Published SyncCommitteeMessage slot=1165141, count=27\nNov-29 10:48:14.236[]                 info: Published attestations slot=1165141, count=4\n</code></pre>"}]}